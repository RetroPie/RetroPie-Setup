#!/bin/bash

#  RetroPie-Setup - Shell script for initializing Raspberry Pi 
#  with RetroArch, various cores, and EmulationStation (a graphical 
#  front end).
# 
#  (c) Copyright 2012-2013 Florian MÃ¼ller (contact@petrockblock.com)
# 
#  RetroPie-Setup homepage: https://github.com/petrockblog/RetroPie-Setup
# 
#  Permission to use, copy, modify and distribute RetroPie-Setup in both binary and
#  source form, for non-commercial purposes, is hereby granted without fee,
#  providing that this license information and copyright notice appear with
#  all copies and any derived work.
# 
#  This software is provided 'as-is', without any express or implied
#  warranty. In no event shall the authors be held liable for any damages
#  arising from the use of this software.
# 
#  RetroPie-Setup is freeware for PERSONAL USE only. Commercial users should
#  seek permission of the copyright holders first. Commercial use includes
#  charging money for RetroPie-Setup or software derived from RetroPie-Setup.
# 
#  The copyright holders request that bug fixes and improvements to the code
#  should be forwarded to them so everyone can benefit from the modifications
#  in future versions.
# 
#  Many, many thanks go to all people that provide the individual packages!!!
# 
#  Raspberry Pi is a trademark of the Raspberry Pi Foundation.
# 

function em_configure_advmame()
{
    $rootdir/emulators/advancemame-0.94.0/installdir/bin/advmame
    mv /root/.advance/ /home/$user/
    echo 'device_video_clock 5 - 50 / 15.62 / 50 ; 5 - 50 / 15.73 / 60' >> /home/$user/.advance/advmame.rc
    chmod -R a+rwX /home/$user/.advance/
    chown -R $user /home/$user/.advance/
}

# install AdvanceMAME emulator
function em_install_advmame()
{
    printMsg "Installing AdvMAME emulator"

    wget -O advmame.tar.gz http://downloads.sourceforge.net/project/advancemame/advancemame/0.94.0/advancemame-0.94.0.tar.gz

    tar xzvf advmame.tar.gz -C "$rootdir/emulators/"
    pushd "$rootdir/emulators/advancemame-0.94.0"
    sed 's/MAP_SHARED | MAP_FIXED,/MAP_SHARED,/' <advance/linux/vfb.c >advance/linux/temp.c
    mv advance/linux/temp.c advance/linux/vfb.c
    sed 's/misc_quiet\", 0/misc_quiet\", 1/' <advance/osd/global.c >advance/osd/temp.c
    mv advance/osd/temp.c advance/osd/global.c 
sed '
/#include <string>/ i\
#include <stdlib.h>
' <advance/d2/d2.cc >advance/d2/temp.cc
    mv advance/d2/temp.cc advance/d2/d2.cc
    ./configure --prefix="$rootdir/emulators/advancemame-0.94.0/installdir"
    sed 's/LDFLAGS=-s/LDFLAGS=-s -lm -Wl,--no-as-needed/' <Makefile >Makefile.temp
    mv Makefile.temp Makefile
    make
    make install
    popd

    em_configure_advmame
}

# install Amiga emulator
function em_install_amiga()
{
    printMsg "Installing Amiga emulator"
    if [[ -d "$rootdir/emulators/uae4all" ]]; then
        rm -rf "$rootdir/emulators/uae4all"
    fi
    wget http://www.gamshi.com/download/uae4rpi.tar.bz2
    tar -jxvf uae4rpi.tar.bz2 -C "$rootdir/emulators/"
    pushd "$rootdir/emulators/uae4rpi"
    if [[ ! -f /opt/vc/include/interface/vmcs_host/vchost_config.h ]]; then
        touch /opt/vc/include/interface/vmcs_host/vchost_config.h
    fi
    make
    chown -R $user "$rootdir/emulators/uae4rpi"
    chgrp -R pi "$rootdir/emulators/uae4rpi"
    if [[ ! -f "$rootdir/emulators/uae4rpi/uae4all" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Amiga emulator."
    fi  
    mkdir "roms"
    popd  
    rm uae4rpi.tar.bz2

    __INFMSGS="$__INFMSGS The Amiga emulator can be started from command line with '$rootdir/emulators/uae4all/uae4all'. Note that you must manually copy a Kickstart rom with the name 'kick.rom' to the directory $rootdir/emulators/uae4all/."
}

# install Atari 800 emulator
function em_install_atari800()
{
    printMsg "Installing Atari 800 emulator"
    wget -O atari800-3.0.0.tar.gz http://sourceforge.net/projects/atari800/files/atari800/3.0.0/atari800-3.0.0.tar.gz/download
    if [[ -d "$rootdir/emulators/atari800-3.0.0" ]]; then 
        rm -rf "$rootdir/emulators/atari800-3.0.0"
    fi
    tar xvfz atari800-3.0.0.tar.gz -C "$rootdir/emulators/"
    pushd "$rootdir/emulators/atari800-3.0.0/src"
    mkdir -p "$rootdir/emulators/atari800-3.0.0/installdir"
    ./configure --prefix="$rootdir/emulators/atari800-3.0.0/installdir"
    make
    make install
    if [[ ! -f "$rootdir/emulators/atari800-3.0.0/installdir/bin/atari800" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Atari 800 emulator."
    fi  
    popd
    rm atari800-3.0.0.tar.gz
}

function em_install_cpc4rpi()
{
    printMsg "Installing CPC4RPi"
    wget http://gaming.capsule-sa.co.za/downloads/cpc4rpi-1.1_src.tar.gz
    if [[ -d "$rootdir/emulators/cpc4rpi-1.1" ]]; then 
        rm -rf "$rootdir/emulators/cpc4rpi-1.1"
    fi
    tar xvfz cpc4rpi-1.1_src.tar.gz -C "$rootdir/emulators/"
    pushd "$rootdir/emulators/cpc4rpi-1.1"
    sed -i 's|LIBS = -L/usr/lib/arm-linux-gnueabihf -lz -lts -L/opt/vc/lib -lGLESv2 -lEGL|LIBS = -L/usr/lib/arm-linux-gnueabihf -lX11 -lz -lts -L/opt/vc/lib -lSDL -lpthread -ldl -lGLESv2 -lEGL|g' makefile
    sed -i 's|$(CC) $(CFLAGS) $(IPATHS) -o cpc4rpi cpc4rpi.cpp crtc.o fdc.o psg.o tape.o z80.o /root/Raspbian/Libs/libSDL.a /root/Raspbian/Libs/libnofun.a $(LIBS)|$(CC) $(CFLAGS) $(IPATHS) -o cpc4rpi cpc4rpi.cpp crtc.o fdc.o psg.o tape.o z80.o   $(LIBS)|g' makefile
    make RELEASE=TRUE
    if [[ ! -f "$rootdir/emulators/cpc4rpi-1.1/cpc4rpi" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Amstrad CPC emulator CPC4Rpi."
    fi  
    popd 
    rm cpc4rpi-1.1_src.tar.gz
}

function em_install_dosbox()
{
    printMsg "Installing Dosbox"
    apt-get install -y --force-yes dosbox
}

function em_install_stella()
{
    printMsg "Installing Atari 2600 emulator Stella"
    apt-get install -y --force-yes stella
}

function em_install_basiliskII()
{
    printMsg "Installing Basilisk II"
    gitPullOrClone "$rootdir/emulators/basiliskii" git://github.com/cebix/macemu.git
    cd BasiliskII/src/Unix
    ./autogen.sh
    ./configure --prefix="$rootdir/emulators/basiliskii/installdir" --enable-sdl-video --enable-sdl-audio --disable-vosf --disable-jit-compiler
    make clean
    make
    make install
    touch $rootdir/roms/basiliskii/Start.txt
    if [[ -z "$rootdir/emulators/basiliskii/installdir/bin/BasiliskII" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile BasiliskII."
    fi  
    popd
}

# install C64 ROMs
function em_install_c64roms()
{
    printMsg "Retrieving Commodore 64 ROMs"
    wget http://www.zimmers.net/anonftp/pub/cbm/crossplatform/emulators/VICE/old/vice-1.5-roms.tar.gz
    tar -xvzf vice-1.5-roms.tar.gz
    mkdir -p "$rootdir/emulators/vice-2.3.dfsg/installdir/lib/vice/"
    cp -a vice-1.5-roms/data/* "$rootdir/emulators/vice-2.3.dfsg/installdir/lib/vice/"
    rm -rf vice-1.5-roms
    rm -rf vice-1.5-roms.tar.gz    
}

# Install VICE C64 Emulator
function em_install_viceC64()
{
    printMsg "Install VICE Commodore 64 core"
    if [[ -d "$rootdir/emulators/vice-2.4" ]]; then
        rm -rf "$rootdir/emulators/vice-2.4"
    fi
    if dpkg-query -Wf'${db:Status-abbrev}' vice 2>/dev/null | grep -q '^i'; then
        printf 'Package vice is already installed - removing package\n' "${1}"
        apt-get remove -y vice
    fi
    printMsg "Installing vice"
    #pushd "$rootdir/emulators"
    echo 'deb-src http://mirrordirector.raspbian.org/raspbian/ wheezy main contrib non-free rpi' >> /etc/apt/sources.list
    apt-get update
    #apt-get build-dep -y vice
    apt-get install -y --force-yes libxaw7-dev automake checkinstall
    #apt-get source vice
    #cd vice-2.3.dfsg
    wget -O vice-2.4.tar.gz http://downloads.sourceforge.net/project/vice-emu/releases/vice-2.4.tar.gz
    tar xzvf vice-2.4.tar.gz -C "$rootdir/emulators/"
    pushd "$rootdir/emulators/vice-2.4"
    ./configure --prefix="$rootdir/emulators/vice-2.4/installdir" --enable-sdlui --without-pulse --with-sdlsound
    make    
    make install
    popd
    em_install_c64roms    
}

# configure DGEN
function em_configureDGEN()
{
    chmod 777 /dev/fb0

    if [[ ! -f "$rootdir/configs/all/dgenrc" ]]; then
        mkdir -p "$rootdir/configs/all/"
        cp $rootdir/emulators/dgen-sdl/sample.dgenrc $rootdir/configs/all/dgenrc 
    fi

    chown -R $user $rootdir/configs/all/
    chgrp -R $user $rootdir/configs/all/

    ensureKeyValue "joy_pad1_a" "joystick0-button0" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_b" "joystick0-button1" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_c" "joystick0-button2" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_x" "joystick0-button3" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_y" "joystick0-button4" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_z" "joystick0-button5" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_mode" "joystick0-button6" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_start" "joystick0-button7" $rootdir/configs/all/dgenrc

    ensureKeyValue "joy_pad2_a" "joystick1-button0" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_b" "joystick1-button1" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_c" "joystick1-button2" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_x" "joystick1-button3" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_y" "joystick1-button4" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_z" "joystick1-button5" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_mode" "joystick1-button6" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_start" "joystick1-button7" $rootdir/configs/all/dgenrc

    ensureKeyValue "emu_z80_startup" "drz80" $rootdir/configs/all/dgenrc
    ensureKeyValue "emu_m68k_startup" "cyclone" $rootdir/configs/all/dgenrc
}

# install DGEN (Megadrive/Genesis emulator)
function em_install_dgen()
{
    printMsg "Installing Megadrive/Genesis emulator"
    if [[ -d "$rootdir/emulators/dgen" ]]; then
        rm -rf "$rootdir/emulators/dgen"
    fi   
    wget http://downloads.sourceforge.net/project/dgen/dgen/1.32/dgen-sdl-1.32.tar.gz
    tar xvfz dgen-sdl-1.32.tar.gz -C "$rootdir/emulators/"
    if [[ -d "$rootdir/emulators/dgen-sdl" ]]; then
        rm -rf "$rootdir/emulators/dgen-sdl"
    fi
    mv "$rootdir/emulators/dgen-sdl-1.32" "$rootdir/emulators/dgen-sdl"
    pushd "$rootdir/emulators/dgen-sdl"
    mkdir "installdir" # only used for creating the binaries archive
    ./configure --disable-opengl CC=gcc-4.6 CXX=g++-4.6
    make
    make install DESTDIR=$rootdir/emulators/dgen-sdl/installdir
    make install
    if [[ ! -f "$rootdir/emulators/dgen-sdl/dgen" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile DGEN emulator."
    fi  
    popd    
    rm dgen-sdl-1.32.tar.gz

    wget http://projectmd.mdscene.net/download/projmd-20120429.zip
    unzip projmd-20120429.zip
    if [[ ! -f $rootdir/roms/megadrive/projmd-20120429.bin ]]; then
        cp ./projmd-20120429/projmd-20120429.bin $rootdir/roms/megadrive/
    fi
    rm -rf projmd-20120429    
    rm projmd-20120429.zip  
}

#install eDuke32
function em_install_eduke32()
{
    printMsg "Installing eDuke32"
    if [[ -d "$rootdir/emulators/eduke32" ]]; then
        rm -rf "$rootdir/emulators/eduke32"
    fi
    mkdir -p $rootdir/emulators/eduke32
    pushd "$rootdir/emulators/eduke32"
    printMsg "Downloading eDuke core"
    wget http://repo.berryboot.com/eduke32_2.0.0rpi+svn2789_armhf.deb       
    printMsg "Downloading eDuke32 Shareware files"
    wget http://apt.duke4.net/pool/main/d/duke3d-shareware/duke3d-shareware_1.3d-23_all.deb 
    if [[ ! -f "$rootdir/emulators/eduke32/eduke32_2.0.0rpi+svn2789_armhf.deb" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully install eDuke32 core."
    else
        printMsg "Installing eDuke32"
        dpkg -i *duke*.deb
        cp /usr/share/games/eduke32/DUKE.RTS $rootdir/roms/duke3d/
        cp /usr/share/games/eduke32/duke3d.grp $rootdir/roms/duke3d/
    fi
    popd
    rm -rf "$rootdir/emulators/eduke32"
}

# install DOS emulator FastDosbox
function em_install_fastdosbox() {
    printMsg "Installing Dos emulator FastDosbox"
    wget http://gaming.capsule-sa.co.za/downloads/fastdosbox-1.5_src.tar.gz
    tar xvfz fastdosbox-1.5_src.tar.gz -C "$rootdir/emulators/"

    # patch sources
    sed -i 's|#include "nofun.h"|//#include "nofun.h"|g' "$rootdir/emulators/fastdosbox-1.5/src/gui/sdl_mapper.cpp"

    mkdir -p $rootdir/emulators/fastdosbox-1.5/installdir
    pushd $rootdir/emulators/fastdosbox-1.5
    ./configure --prefix=$rootdir/emulators/fastdosbox-1.5/installdir
    make
    make install
    if [[ ! -f $rootdir/emulators/fastdosbox-1.5/installdir/bin/dosbox ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully install FastDosbox."
    fi
    popd
    rm fastdosbox-1.5_src.tar.gz
}

# install Game Boy Advance emulator gpSP
function em_install_gba()
{
    printMsg "Installing Game Boy Advance emulator gpSP"
    gitPullOrClone "$rootdir/emulators/gpsp" git://github.com/gizmo98/gpsp.git
    cd raspberrypi

    #if we are on the 256mb model, we will never have enough RAM to compile gpSP with compiler optimization
    #if this is the case, use sed to remove the -O3 in the Makefile (line 20, "CFLAGS     += -O3 -mfpu=vfp")
    local RPiRev=`grep 'Revision' "/proc/cpuinfo" | cut -d " " -f 2`
    if [ $RPiRev == "000000d" ] || [ $RPiRev == "000000e" ] || [ $RPiRev == "000000f" ] || [ $RPiRev == "100000d" ]; then
    	#RAM = 512mb, we're good
    	echo "512mb Pi, no de-optimization fix needed."
    else
	#RAM = 256mb, need to compile unoptimized
    	echo "Stripping -O[1..3] from gpSP Makefile to compile unoptimized on 256mb Pi..."
    	sed -i 's/-O[1..3]//g' Makefile
    	sed -i 's/-Ofast//g' Makefile
    fi

    #gpSP is missing an include in the Makefile
    if [[ ! -z `grep "-I/opt/vc/include/interface/vmcs_host/linux" Makefile` ]]; then
	   echo "Skipping adding missing include to gpSP Makefile."
    else
	   echo "Adding -I/opt/vc/include/interface/vmcs_host/linux to Makefile"
	   sed -i '23iCFLAGS     += -I/opt/vc/include/interface/vmcs_host/linux' Makefile
    fi

    make clean	
    make
    cp "$rootdir/emulators/gpsp/game_config.txt" "$rootdir/emulators/gpsp/raspberrypi/"
    if [[ -z `find $rootdir/emulators/gpsp/ -name "gpsp"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Game Boy Advance emulator."
    fi
    popd
}

# install NeoGeo emulator GnGeo-Pi
function em_install_GnGeoPi()
{
    printMsg "Installing GnGeo-Pi emulator"
    if [[ -d "$rootdir/emulators/gngeo-pi-0.85" ]]; then
        rm -rf "$rootdir/emulators/gngeo-pi-0.85"
    fi
    gitPullOrClone "$rootdir/emulators/gngeo-pi-0.85" https://github.com/ymartel06/GnGeo-Pi.git
    pushd "$rootdir/emulators/gngeo-pi-0.85/gngeo"
    chmod +x configure
    ./configure --host=arm-linux --target=arm-linux --disable-i386asm --prefix="$rootdir/emulators/gngeo-pi-0.85/installdir"
    make
    make install
    if [[ ! -f "$rootdir/emulators/gngeo-pi-0.85/installdir/bin/arm-linux-gngeo" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile GnGeo-Pi emulator."
    fi
    popd
}

function em_install_hatari()
{
    printMsg "Installing Atari emulator Hatari"
    apt-get update;
    apt-get install -y --force-yes hatari
}

function em_configure_mame4allpi()
{
    mkdir "$rootdir/emulators/mame4all-pi/cfg"
    mkdir "$rootdir/emulators/mame4all-pi/hi"
    mkdir "$rootdir/emulators/mame4all-pi/sta"
    mkdir "$rootdir/emulators/mame4all-pi/roms"
    ensureKeyValueShort "samplerate" "22050" "$rootdir/emulators/mame4all-pi/mame.cfg"
    ensureKeyValueShort "rompath" "$rootdir/roms/mame" "$rootdir/emulators/mame4all-pi/mame.cfg"
}

function em_install_mame4allpi()
{
    printMsg "Installing Mame4All-Pi"

    gitPullOrClone "$rootdir/emulators/mame4all-pi" https://code.google.com/p/mame4all-pi/
    make clean
    make
    if [[ ! -f "$rootdir/emulators/mame4all-pi/mame" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully mame4all-pi emulator."
    fi    

    em_configure_mame4allpi

    popd
}

# install Sega Mega Drive/Mastersystem/Game Gear emulator OsmOse
function em_install_megadrive()
{
    printMsg "Installing Mega Drive/Mastersystem/Game Gear emulator OsmMose"

    wget 'https://dl.dropbox.com/s/z6l69wge8q1xq7r/osmose-0.8.1%2Brpi20121122.tar.bz2?dl=1' -O osmose.tar.bz2
    tar -jxvf osmose.tar.bz2 -C "$rootdir/emulators/"
    pushd "$rootdir/emulators/osmose-0.8.1+rpi20121122/"
    make clean
    make
    if [[ ! -f "$rootdir/emulators/osmose-0.8.1+rpi20121122/osmose" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile OsmMose."
    fi      
    popd
    rm osmose.tar.bz2
}

# install Intellivision Emulator jzintv
function em_install_intellivision()
{
    printMsg "Installing Intellivision emulator jzintv"
    wget 'http://spatula-city.org/~im14u2c/intv/dl/jzintv-1.0-beta4-src.zip' -O jzintv.zip
    unzip -n jzintv.zip -d "$rootdir/emulators/"
    pushd "$rootdir/emulators/jzintv-1.0-beta4/src/"
    mkdir "$rootdir/emulators/jzintv-1.0-beta4/bin"
    make clean
    make OPT_FLAGS="-O3 -fomit-frame-pointer -fprefetch-loop-arrays -march=armv6 -mfloat-abi=hard -mfpu=vfp"
    if [[ ! -f "$rootdir/emulators/jzintv-1.0-beta4/bin/jzintv" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile jzintv."
    else
        __INFMSGS="$__INFMSGS You need to copy Intellivision BIOS files to the folder '/usr/local/share/jzintv/rom'."
    fi      
    popd
    rm jzintv.zip
}

# configure Lineapple emulator
function em_configure_linapple()
{
    if [[ ! -d $rootdir/roms/apple2 ]]; then
        mkdir -p $rootdir/roms/apple2
    fi
    cat > "$rootdir/emulators/linapple-src_2a/Start.sh" << _EOF_
#!/bin/bash
pushd $rootdir/emulators/linapple-src_2a
./linapple
popd
_EOF_
    chmod +x "$rootdir/emulators/linapple-src_2a/Start.sh"
    touch $rootdir/roms/apple2/Start.txt

    pushd "$rootdir/emulators/linapple-src_2a"
    sed -i -r -e "s|[^I]?Joystick 0[^I]?=[^I]?[0-9]|\tJoystick 0\t=\t1|g" linapple.conf
    sed -i -r -e "s|[^I]?Joystick 1[^I]?=[^I]?[0-9]|\tJoystick 1\t=\t1|g" linapple.conf
    popd
    chgrp -R $user $rootdir
    chown -R $user $rootdir  
}

# install Linapple emulator
function em_install_linapple()
{
    printMsg "Installing Apple II emulator (Linapple)"
    if [[ -d "$rootdir/emulators/apple2" ]]; then
        rm -rf "$rootdir/emulators/apple2"
    fi   
    wget http://downloads.sourceforge.net/project/linapple/linapple/linapple-2a/linapple-src_2a.tar.bz2
    tar -jxvf linapple-src_2a.tar.bz2 -C "$rootdir/emulators/"
    pushd "$rootdir/emulators/linapple-src_2a/src"
    make CC=gcc-4.6 CXX=g++-4.6
    popd    
    em_configure_linapple
    rm linapple-src_2a.tar.bz2
}

function em_install_mupen64plus_rpi()
{
    printMsg "Installing N64 emulator Mupen 64 Plus RPi"
    if [[ -d "$rootdir/emulators/mupen64plus-rpi" ]]; then
        rm -rf "$rootdir/emulators/mupen64plus-rpi"
    fi   
    gitPullOrClone "$rootdir/emulators/mupen64plus-rpi" https://github.com/ricrpi/mupen64plus-rpi
    ./m64p_build.sh
    if [[ ! -f "$rootdir/emulators/mupen64plus-rpi/test/mupen64plus" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Mupen 64 Plus RPi."
    fi      
    popd
}

# configure NeoGeo
function em_configureNeogeo()
{
    mkdir /home/$user/.gngeo/
    cp $rootdir/emulators/gngeo-0.7/sample_gngeorc /home/$user/.gngeo/gngeorc
    chown -R $user /home/$user/.gngeo/
    chgrp -R $user /home/$user/.gngeo/

    sed -i -e "s/effect none/effect scale2x/g" /home/$user/.gngeo/gngeorc
    sed -i -e "s/fullscreen false/fullscreen true/g" /home/$user/.gngeo/gngeorc
    sed -i -e "s|rompath /usr/games/lib/xmame|rompath $rootdir/RetroPie/emulators/gngeo-0.7/installdir/share/gngeo/romrc.d|g" /home/$user/.gngeo/gngeorc

    chmod 777 /dev/fb0

    mkdir "$rootdir/emulators/gngeo-0.7/neogeo-bios"
    __INFMSGS="$__INFMSGS You need to copy NeoGeo BIOS files to the folder '$rootdir/emulators/gngeo-0.7/neogeo-bios/'."    
}

# install NeoGeo emulator
function em_install_neogeo()
{
    printMsg "Installing NeoGeo emulator"
    if [[ -d "$rootdir/emulators/gngeo" ]]; then
        rm -rf "$rootdir/emulators/gngeo"
    fi

    # GnGeo
    wget http://gngeo.googlecode.com/files/gngeo-0.7.tar.gz
    tar xvfz gngeo-0.7.tar.gz -C $rootdir/emulators/
    pushd "$rootdir/emulators/gngeo-0.7"
    ./configure --host=arm-linux --target=arm-linux --disable-i386asm --prefix="$rootdir/emulators/gngeo-0.7/installdir"
    make
    make install

    if [[ ! -f "$rootdir/emulators/gngeo-0.7/installdir/bin/arm-linux-gngeo" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile NeoGeo emulator."
    fi          
    popd
    rm gngeo-0.7.tar.gz

}

# install SNES9X emulator
function em_install_snes9x()
{
    printMsg "Installing SNES9X-RPi emulator"    
    if [[ -d "$rootdir/emulators/snes9x-rpi" ]]; then
        rm -rf "$rootdir/emulators/snes9x-rpi"
    fi        
    gitPullOrClone "$rootdir/emulators/snes9x-rpi" https://github.com/chep/snes9x-rpi.git
    make clean
    make
    if [[ -z `grep "mode \"320x240\"" /etc/fb.modes` ]]; then
        echo -e "mode \"320x240\"\ngeometry 320 240 656 512 16\ntimings 0 0 0 0 0 0 0\nrgba 5/11,6/5,5/0,0/16\nendmode" | cat - /etc/fb.modes > temp && mv temp /etc/fb.modes
    fi
    if [[ ! -f "$rootdir/emulators/snes9x-rpi/snes9x" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile SNES9X."
    fi      
    popd
}

function em_configure_pifba()
{
    printMsg "Configuring PiFBA emulator"

}

function em_install_pifba()
{
    printMsg "Installing PiFBA emulator"    
    if [[ -d "$rootdir/emulators/pifba" ]]; then
        rm -rf "$rootdir/emulators/pifba"
    fi  
    gitPullOrClone "$rootdir/emulators/pifba" https://code.google.com/p/pifba/
    mkdir ".obj"
    make clean
    make
    if [[ ! -d "$rootdir/emulators/pifba/" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile PiFBA."
    fi      
    popd
}

# install PiSNES emulator
function em_install_pisnes()
{
    printMsg "Installing PiSNES emulator"    
    if [[ -d "$rootdir/emulators/pisnes" ]]; then
        rm -rf "$rootdir/emulators/pisnes"
    fi        
    gitPullOrClone "$rootdir/emulators/pisnes" https://code.google.com/p/pisnes/
    sed -i -e "s|-lglib-2.0|-lglib-2.0 -lbcm_host|g" Makefile
    make clean
    make
    if [[ -z `grep "mode \"320x240\"" /etc/fb.modes` ]]; then
        echo -e "mode \"320x240\"\ngeometry 320 240 656 512 16\ntimings 0 0 0 0 0 0 0\nrgba 5/11,6/5,5/0,0/16\nendmode" | cat - /etc/fb.modes > temp && mv temp /etc/fb.modes
    fi
    if [[ ! -f "$rootdir/emulators/pisnes/snes9x" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile PiSNES."
    fi      
    popd
}

# install PSP emulator PPSSPP
function em_install_ppsspp()
{
    printMsg "Installing PPSSPP emulator"    
    if [[ -d "$rootdir/emulators/ppsspp" ]]; then
        rm -rf "$rootdir/emulators/ppsspp"
    fi        
    gitPullOrClone "$rootdir/emulators/ppsspp" git://github.com/hrydgard/ppsspp.git
    git submodule update --init    
    # generate default Makefile
    cmake . 
    sed -i -e "s/ARM:BOOL=OFF/ARM:BOOL=ON/g" CMakeCache.txt
    sed -i -e "s/X86:BOOL=ON/X86:BOOL=OFF/g" CMakeCache.txt
    sed -i -e "s/CMAKE_BUILD_TYPE:STRING=/CMAKE_BUILD_TYPE:STRING=Release/g" CMakeCache.txt
    # enabled arm, disabled x86, built with release flags.
    cmake .
    make    
    mkdir -p "$rootdir/emulators/ppsspp/assets/lang"
    cp $rootdir/emulators/ppsspp/lang/* $rootdir/emulators/ppsspp/assets/lang/
    if [[ ! -f "$rootdir/emulators/ppsspp/PPSSPPSDL" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile PPSSPP."
    fi      
    popd
}

function em_install_wolfenstein3d()
{
    printMsg "Installing Wolfenstein3D Engine"    
    if [[ -d "$rootdir/emulators/Wolf4SDL-1.7-src" ]]; then
        rm -rf "$rootdir/emulators/Wolf4SDL-1.7-src"
    fi    
    wget http://radix-16.com/files/wolf4sdl/Wolf4SDL-1.7-src.zip
    mv Wolf4SDL-1.7-src.zip Wolf4SDL-1.7.zip
    unzip -n Wolf4SDL-1.7.zip -d "$rootdir/emulators/"
    pushd "$rootdir/emulators/Wolf4SDL-1.7-src"
    make
    mkdir "$rootdir/emulators/Wolf4SDL-1.7-bin"
    cp wolf3d "$rootdir/emulators/Wolf4SDL-1.7-bin/"
    popd
    if [[ ! -f "$rootdir/emulators/Wolf4SDL-1.7-bin/wolf3d" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Wolfenstein3D engine."
    else
        __INFMSGS="$__INFMSGS The Wolfenstein3D engine was successfully installed. You have to copy the game files (.wl6) into the directory $rootdir/emulators/Wolf4SDL-1.7-bin. Take care for lowercase extensions!"        
    fi 
    rm Wolf4SDL-1.7.zip
}

# configure sound settings
function em_configureSoundsettings()
{
    printMsg "Enabling ALSA thread-based audio driver for RetroArch in $rootdir/configs/all/retroarch.cfg"    

    # RetroArch settings
    ensureKeyValue "audio_driver" "alsathread" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "audio_out_rate" "44100" "$rootdir/configs/all/retroarch.cfg"

    # ALSA settings
    mv /etc/asound.conf /etc/asound.conf.bak
    cat >> /etc/asound.conf << _EOF_
pcm.!default {
type hw
card 0
}

ctl.!default {
type hw
card 0
}
_EOF_

}

# settings for RetroArch
function em_configureRetroArch()
{
    printMsg "Configuring RetroArch"

    cp $scriptdir/supplementary/retroarch-zip "$rootdir/emulators/RetroArch/installdir/bin/"

    if [[ ! -d "$rootdir/emulators/RetroArch/configs/" ]]; then
        mkdir -p "$rootdir/emulators/RetroArch/configs/"
    fi
    cp $scriptdir/supplementary/RetroArchConfigs/*.cfg "$rootdir/emulators/RetroArch/configs/"

   if [[ ! -f "$rootdir/configs/all/retroarch.cfg" ]]; then
        mkdir -p "$rootdir/configs/all/"
        mkdir -p "$rootdir/configs/atari2600/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/atari2600/retroarch.cfg
        mkdir -p "$rootdir/configs/cavestory/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/cavestory/retroarch.cfg
        mkdir -p "$rootdir/configs/doom/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/doom/retroarch.cfg
        mkdir -p "$rootdir/configs/gb/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/gb/retroarch.cfg
        mkdir -p "$rootdir/configs/gbc/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/gbc/retroarch.cfg
        mkdir -p "$rootdir/configs/gamegear/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/gamegear/retroarch.cfg
        mkdir -p "$rootdir/configs/mame/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/mame/retroarch.cfg
        mkdir -p "$rootdir/configs/mastersystem/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/mastersystem/retroarch.cfg
        mkdir -p "$rootdir/configs/megadrive/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/megadrive/retroarch.cfg
        mkdir -p "$rootdir/configs/nes/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/nes/retroarch.cfg
        mkdir -p "$rootdir/configs/pcengine/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/pcengine/retroarch.cfg
        mkdir -p "$rootdir/configs/psx/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/psx/retroarch.cfg
        mkdir -p "$rootdir/configs/snes/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/snes/retroarch.cfg
        mkdir -p "$rootdir/configs/segacd/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/segacd/retroarch.cfg
        mkdir -p "$rootdir/configs/sega32x/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/sega32x/retroarch.cfg
        mkdir -p "$rootdir/configs/fba/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/fba/retroarch.cfg
        cp /etc/retroarch.cfg "$rootdir/configs/all/"
    fi

    mkdir -p "$rootdir/BIOS/"
    ensureKeyValue "system_directory" "$rootdir/BIOS" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "config_save_on_exit" "false" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "video_aspect_ratio" "1.33" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "video_smooth" "false" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "video_threaded" "true" "$rootdir/configs/all/retroarch.cfg"

    # enable hotkey ("select" button)
    ensureKeyValue "input_enable_hotkey" "escape" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_exit_emulator" "escape" "$rootdir/configs/all/retroarch.cfg"

    # enable and configure rewind feature
    ensureKeyValue "rewind_enable" "false" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "rewind_buffer_size" "10" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "rewind_granularity" "2" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_rewind" "r" "$rootdir/configs/all/retroarch.cfg"

    # enable gpu screenshots
    ensureKeyValue "video_gpu_screenshot" "true" "$rootdir/configs/all/retroarch.cfg"

    # enable and configure shaders
    if [[ ! -d "$rootdir/emulators/RetroArch/shader" ]]; then
        mkdir -p "$rootdir/emulators/RetroArch/shader"
    fi
    cp -r $scriptdir/supplementary/RetroArchShader/* $rootdir/emulators/RetroArch/shader/
    for f in `ls "$rootdir/emulators/RetroArch/shader/*.glslp"`; 
    do 
        sed -i "s|/home/pi/RetroPie|$rootdir|g" $f
    done

    ensureKeyValue "input_shader_next" "m" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_shader_prev" "n" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "video_shader_dir" "$rootdir/emulators/RetroArch/shader/" "$rootdir/configs/all/retroarch.cfg"

    # system-specific shaders, SNES
    ensureKeyValue "video_shader" "\"$rootdir/emulators/RetroArch/shader/snes_phosphor.glslp\"" "$rootdir/configs/snes/retroarch.cfg"
    ensureKeyValue "video_shader_enable" "true" "$rootdir/configs/snes/retroarch.cfg"
    ensureKeyValue "video_smooth" "false" "$rootdir/configs/snes/retroarch.cfg"

    # system-specific shaders, NES
    ensureKeyValue "video_shader" "\"$rootdir/emulators/RetroArch/shader/phosphor.glslp\"" "$rootdir/configs/nes/retroarch.cfg"
    ensureKeyValue "video_shader_enable" "true" "$rootdir/configs/nes/retroarch.cfg"
    ensureKeyValue "video_smooth" "false" "$rootdir/configs/nes/retroarch.cfg"

    # system-specific shaders, Megadrive
    ensureKeyValue "video_shader" "\"$rootdir/emulators/RetroArch/shader/phosphor.glslp\"" "$rootdir/configs/megadrive/retroarch.cfg"
    ensureKeyValue "video_shader_enable" "true" "$rootdir/configs/megadrive/retroarch.cfg"
    ensureKeyValue "video_smooth" "false" "$rootdir/configs/megadrive/retroarch.cfg"

    # system-specific shaders, Mastersystem
    ensureKeyValue "video_shader" "\"$rootdir/emulators/RetroArch/shader/phosphor.glslp\"" "$rootdir/configs/mastersystem/retroarch.cfg"
    ensureKeyValue "video_shader_enable" "true" "$rootdir/configs/mastersystem/retroarch.cfg"
    ensureKeyValue "video_smooth" "false" "$rootdir/configs/mastersystem/retroarch.cfg"

    # system-specific shaders, Gameboy
    ensureKeyValue "video_shader" "\"$rootdir/emulators/RetroArch/shader/hq4x.glslp\"" "$rootdir/configs/gb/retroarch.cfg"
    ensureKeyValue "video_shader_enable" "true" "$rootdir/configs/gb/retroarch.cfg"

    # system-specific shaders, Gameboy Color
    ensureKeyValue "video_shader" "\"$rootdir/emulators/RetroArch/shader/hq4x.glslp\"" "$rootdir/configs/gbc/retroarch.cfg"
    ensureKeyValue "video_shader_enable" "true" "$rootdir/configs/gbc/retroarch.cfg"

    # system-specific, PSX
    ensureKeyValue "rewind_enable" "false" "$rootdir/configs/psx/retroarch.cfg"
    

    # configure keyboard mappings
    ensureKeyValue "input_player1_a" "x" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_b" "z" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_y" "a" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_x" "s" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_start" "enter" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_select" "rshift" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_l" "q" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_r" "w" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_left" "left" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_right" "right" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_up" "up" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_down" "down" "$rootdir/configs/all/retroarch.cfg"

    # input settings
    ensureKeyValue "input_autodetect_enable" "true" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "joypad_autoconfig_dir" "$rootdir/emulators/RetroArch/configs/" "$rootdir/configs/all/retroarch.cfg"

}

# install RetroArch emulator
function em_install_retroarch()
{
    printMsg "Installing RetroArch emulator"
    gitPullOrClone "$rootdir/emulators/RetroArch" git://github.com/libretro/RetroArch.git
    ./configure --prefix="$rootdir/emulators/RetroArch/installdir" --disable-x11 --disable-oss --disable-pulse --disable-sdl --enable-floathard
    make clean
    make
    make install
    if [[ ! -f "$rootdir/emulators/RetroArch/installdir/bin/retroarch" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile and install RetroArch."
    fi  
    em_configureRetroArch
    popd
}

function em_configure_rpix86()
{
    ln -s $rootdir/roms/x86/ $rootdir/emulators/rpix86/games
    rm $rootdir/roms/x86/x86
    cat > "$rootdir/emulators/rpix86/Start.sh" << _EOF_
#!/bin/bash
pushd $rootdir/emulators/rpix86
./rpix86
popd
_EOF_
    chmod +x "$rootdir/emulators/rpix86/Start.sh"
    touch $rootdir/roms/x86/Start.txt
    chgrp -R $user $rootdir
    chown -R $user $rootdir    
}

# install PC emulator rpix86
function em_install_rpix86()
{
    printMsg "Installing PC emulator rpix86"
    
    # install rpix86
    wget http://rpix86.patrickaalto.com/rpix86.tar.gz
    if [[ -d "$rootdir/emulators/rpix86" ]]; then
        rm -rf "$rootdir/emulators/rpix86"
    fi  
    mkdir -p "$rootdir/emulators/rpix86"
    tar xvfz rpix86.tar.gz -C "$rootdir/emulators/rpix86"
    rm rpix86.tar.gz

    # install 4DOS.com
    unzip -n $scriptdir/supplementary/4dos.zip -d "$rootdir/emulators/rpix86/"

    # configure for use with Emulation Station
    em_configure_rpix86

    chgrp -R $user $rootdir
    chown -R $user $rootdir
}

# install ScummVM
function em_install_scummvm()
{
    printMsg "Installing ScummVM"
    apt-get install -y --force-yes scummvm scummvm-data
    if [[ $? -gt 0 ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully install ScummVM."
    else
        __INFMSGS="$__INFMSGS ScummVM has successfully been installed. You can start the ScummVM GUI by typing 'scummvm' in the console. Copy your Scumm games into the directory '$rootdir/roms/scummvm'. When you get a blank screen after running scumm for the first time, press CTRL-q. You should not get a blank screen with further runs of scummvm."
    fi 
}

# install Z Machine emulator
function em_install_zmachine()
{
    printMsg "Installing Z Machine emulator"
    apt-get install -y --force-yes frotz
    wget -U firefox http://www.infocom-if.org/downloads/zork1.zip
    wget -U firefox http://www.infocom-if.org/downloads/zork2.zip
    wget -U firefox http://www.infocom-if.org/downloads/zork3.zip
    unzip -n zork1.zip -d "$rootdir/roms/zmachine/zork1/"
    unzip -n zork2.zip -d "$rootdir/roms/zmachine/zork2/"
    unzip -n zork3.zip -d "$rootdir/roms/zmachine/zork3/"
    rm zork1.zip
    rm zork2.zip
    rm zork3.zip
    __INFMSGS="$__INFMSGS The text adventures Zork 1 - 3 have been installed in the directory '$rootdir/roms/zmachine/'. You can start, e.g., Zork 1 with the command 'frotz $rootdir/roms/zmachine/zork1/DATA/ZORK1.DAT'."
}

#install ZX Spectrum emulator FBZX
function em_install_fbzx()
{
    printMsg "Installing ZX Spectrum emulator FBZX"
    if [[ -d "$rootdir/emulators/fbzx-2.10.0" ]]; then
        rm -rf "$rootdir/emulators/fbzx-2.10.0"
    fi    
    pushd $rootdir/emulators/
    wget -O fbzx-2.10.0.tar.bz2 http://www.rastersoft.com/descargas/fbzx-2.10.0.tar.bz2
    tar xvfj fbzx-2.10.0.tar.bz2
    cd fbzx-2.10.0/
    make
    cd ..
    if [[ ! -f "$rootdir/emulators/fbzx-2.10.0/fbzx" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile FBZX."
    fi    
    popd
}

# Install ZX Spectrum emulator, this function is not used abymore due to segmentation fault errors.
# However, it is kept here for now as a recipe.
function em_install_zxspectrumFromSource()
{
    printMsg "Installing ZX Spectrum emulator"
    if [[ -d "$rootdir/emulators/zxspectrum" ]]; then
        rm -rf "$rootdir/emulators/zxspectrum"
    fi    
    mkdir -p "$rootdir/emulators/zxspectrum"
    pushd "$rootdir/emulators/zxspectrum"
    wget ftp://ftp.worldofspectrum.org/pub/sinclair/emulators/unix/libspectrum-1.0.0.tar.gz
    wget http://downloads.sourceforge.net/project/fuse-emulator/fuse/1.0.0.1a/fuse-1.0.0.1a.tar.gz
    tar xvfz libspectrum-1.0.0.tar.gz
    cd libspectrum-1.0.0
    ./configure # this yields segmentation fault errors now (20.2.2013)
    make
    make install
    echo "/usr/local/lib" >> /etc/ld.so.conf.d/libspectrum.conf
    ldconfig
    cd ..

    tar xvfz fuse-1.0.0.1a.tar.gz
    cd fuse-1.0.0.1a
    ./configure --with-sdl
    make
    make install
    popd
}

function em_install_zxspectrum()
{
    printMsg "Installing ZX Spectrum emulator"
    apt-get install -y --force-yes spectrum-roms fuse-emulator-utils fuse-emulator-common
}

