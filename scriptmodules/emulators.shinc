#
#  (c) Copyright 2012-2014  Florian MÃ¼ller (contact@petrockblock.com)
#
#  RetroPie-Setup homepage: https://github.com/petrockblog/RetroPie-Setup
#
#  Permission to use, copy, modify and distribute this work in both binary and
#  source form, for non-commercial purposes, is hereby granted without fee,
#  providing that this license information and copyright notice appear with
#  all copies and any derived work.
#
#  This software is provided 'as-is', without any express or implied
#  warranty. In no event shall the authors be held liable for any damages
#  arising from the use of this software.
#
#  RetroPie-Setup is freeware for PERSONAL USE only. Commercial users should
#  seek permission of the copyright holders first. Commercial use includes
#  charging money for RetroPie-Setup or software derived from RetroPie-Setup.
#
#  The copyright holders request that bug fixes and improvements to the code
#  should be forwarded to them so everyone can benefit from the modifications
#  in future versions.
#
#  Many, many thanks go to all people that provide the individual packages!!!
#

function depen_retroarch() {
    aptInstall libudev-dev libxkbcommon-dev
    cat > "/etc/udev/rules.d/99-evdev.rules" << _EOF_
KERNEL=="event*", NAME="input/%k", MODE="666"
_EOF_
    sudo chmod 666 /dev/input/event*
}

function sources_retroarch() {
    gitPullOrClone "$rootdir/emulators/RetroArch" git://github.com/libretro/RetroArch.git
}

function build_retroarch() {
    pushd "$rootdir/emulators/RetroArch"
    ./configure --prefix="$rootdir/emulators/RetroArch/installdir" --disable-x11 --disable-oss --disable-pulse --enable-floathard
    make clean
    make
    popd
}

function install_retroarch() {
    pushd "$rootdir/emulators/RetroArch"
    make install
    popd
    if [[ ! -f "$rootdir/emulators/RetroArch/installdir/bin/retroarch" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile and install RetroArch."
    fi
}

function ensureSystemretroconfig {
    if [[ ! -d "$rootdir/configs/$1/" ]]; then
        mkdir -p "$rootdir/configs/$1/"
        echo -e "# All settings made here will override the global settings for the current emulator core\n" >> $rootdir/configs/$1/retroarch.cfg
    fi
}

function configure_retroarch() {
    cp $scriptdir/supplementary/retroarch-zip "$rootdir/emulators/RetroArch/installdir/bin/"
    cp $scriptdir/supplementary/retroarch-core-options.cfg "$rootdir/configs/all/"
    chown $user:$user "$rootdir/configs/all/retroarch-core-options.cfg"

    if [[ ! -d "$rootdir/emulators/RetroArch/configs/" ]]; then
        mkdir -p "$rootdir/emulators/RetroArch/configs/"
    fi

    if [[ -f "$rootdir/configs/all/retroarch.cfg" ]]; then
        cp "$rootdir/configs/all/retroarch.cfg" "$rootdir/configs/all/retroarch.cfg.bak"
    fi
    cp $rootdir/emulators/RetroArch/retroarch.cfg "$rootdir/configs/all/"
    chown $user:$user "$rootdir/configs/all/retroarch.cfg"
    mkdir -p "$rootdir/configs/all/"

    ensureSystemretroconfig "atari2600"
    ensureSystemretroconfig "cavestory"
    ensureSystemretroconfig "doom"
    ensureSystemretroconfig "gb"
    ensureSystemretroconfig "gbc"
    ensureSystemretroconfig "gamegear"
    ensureSystemretroconfig "mame"
    ensureSystemretroconfig "mastersystem"
    ensureSystemretroconfig "megadrive"
    ensureSystemretroconfig "nes"
    ensureSystemretroconfig "pcengine"
    ensureSystemretroconfig "psx"
    ensureSystemretroconfig "snes"
    ensureSystemretroconfig "segacd"
    ensureSystemretroconfig "sega32x"
    ensureSystemretroconfig "fba"

    mkdir -p "$romdir/../BIOS/"
    ensureKeyValue "system_directory" "$romdir/../BIOS" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "config_save_on_exit" "false" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "video_aspect_ratio" "1.33" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "video_smooth" "false" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "video_threaded" "true" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "core_options_path" "$rootdir/configs/all/retroarch-core-options.cfg" "$rootdir/configs/all/retroarch.cfg"

    # enable hotkey ("select" button)
    # ensureKeyValue "input_enable_hotkey" "escape" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_exit_emulator" "escape" "$rootdir/configs/all/retroarch.cfg"

    # enable and configure rewind feature
    ensureKeyValue "rewind_enable" "false" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "rewind_buffer_size" "10" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "rewind_granularity" "2" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_rewind" "r" "$rootdir/configs/all/retroarch.cfg"

    # enable gpu screenshots
    ensureKeyValue "video_gpu_screenshot" "true" "$rootdir/configs/all/retroarch.cfg"

    # enable and configure shaders
    if [[ ! -d "$rootdir/emulators/RetroArch/shader" ]]; then
        mkdir -p "$rootdir/emulators/RetroArch/shader"
    fi
    cp -r $scriptdir/supplementary/RetroArchShader/* $rootdir/emulators/RetroArch/shader/
    for f in `ls "$rootdir/emulators/RetroArch/shader/*.glslp"`;
    do
        sed -i "s|/home/pi/RetroPie|$rootdir|g" $f
    done

    ensureKeyValue "input_shader_next" "m" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_shader_prev" "n" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "video_shader_dir" "$rootdir/emulators/RetroArch/shader/" "$rootdir/configs/all/retroarch.cfg"

    # system-specific shaders, SNES
    ensureKeyValue "video_shader" "\"$rootdir/emulators/RetroArch/shader/snes_phosphor.glslp\"" "$rootdir/configs/snes/retroarch.cfg"
    ensureKeyValue "video_shader_enable" "false" "$rootdir/configs/snes/retroarch.cfg"
    ensureKeyValue "video_smooth" "false" "$rootdir/configs/snes/retroarch.cfg"

    # system-specific shaders, NES
    ensureKeyValue "video_shader" "\"$rootdir/emulators/RetroArch/shader/phosphor.glslp\"" "$rootdir/configs/nes/retroarch.cfg"
    ensureKeyValue "video_shader_enable" "false" "$rootdir/configs/nes/retroarch.cfg"
    ensureKeyValue "video_smooth" "false" "$rootdir/configs/nes/retroarch.cfg"

    # system-specific shaders, Megadrive
    ensureKeyValue "video_shader" "\"$rootdir/emulators/RetroArch/shader/phosphor.glslp\"" "$rootdir/configs/megadrive/retroarch.cfg"
    ensureKeyValue "video_shader_enable" "false" "$rootdir/configs/megadrive/retroarch.cfg"
    ensureKeyValue "video_smooth" "false" "$rootdir/configs/megadrive/retroarch.cfg"

    # system-specific shaders, Mastersystem
    ensureKeyValue "video_shader" "\"$rootdir/emulators/RetroArch/shader/phosphor.glslp\"" "$rootdir/configs/mastersystem/retroarch.cfg"
    ensureKeyValue "video_shader_enable" "false" "$rootdir/configs/mastersystem/retroarch.cfg"
    ensureKeyValue "video_smooth" "false" "$rootdir/configs/mastersystem/retroarch.cfg"

    # system-specific shaders, Gameboy
    ensureKeyValue "video_shader" "\"$rootdir/emulators/RetroArch/shader/hq4x.glslp\"" "$rootdir/configs/gb/retroarch.cfg"
    ensureKeyValue "video_shader_enable" "false" "$rootdir/configs/gb/retroarch.cfg"

    # system-specific shaders, Gameboy Color
    ensureKeyValue "video_shader" "\"$rootdir/emulators/RetroArch/shader/hq4x.glslp\"" "$rootdir/configs/gbc/retroarch.cfg"
    ensureKeyValue "video_shader_enable" "false" "$rootdir/configs/gbc/retroarch.cfg"

    # system-specific, PSX
    ensureKeyValue "rewind_enable" "false" "$rootdir/configs/psx/retroarch.cfg"

    # configure keyboard mappings
    ensureKeyValue "input_player1_a" "x" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_b" "z" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_y" "a" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_x" "s" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_start" "enter" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_select" "rshift" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_l" "q" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_r" "w" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_left" "left" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_right" "right" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_up" "up" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "input_player1_down" "down" "$rootdir/configs/all/retroarch.cfg"

    # input settings
    ensureKeyValue "input_autodetect_enable" "true" "$rootdir/configs/all/retroarch.cfg"
    ensureKeyValue "joypad_autoconfig_dir" "$rootdir/emulators/RetroArch/configs/" "$rootdir/configs/all/retroarch.cfg"

    chown $user:$user -R "$rootdir/emulators/RetroArch/shader/"
    chown $user:$user -R "$rootdir/configs/"
}

# 101, AdvMAME
function depen_advmame() {
    aptInstall libsdl1.2-dev gcc-4.7
}

function sources_advmame() {
    wget -O advmame.tar.gz http://downloads.sourceforge.net/project/advancemame/advancemame/0.94.0/advancemame-0.94.0.tar.gz
}

function build_advmame() {
    tar xzvf advmame.tar.gz -C "$rootdir/emulators/"
    pushd "$rootdir/emulators/advancemame-0.94.0"
    sed -i 's/MAP_SHARED | MAP_FIXED,/MAP_SHARED,/' advance/linux/vfb.c
    sed -i 's/misc_quiet\", 0/misc_quiet\", 1/' advance/osd/global.c
    sed -i '/#include <string>/ i\#include <stdlib.h>' advance/d2/d2.cc
    ./configure CC="gcc-4.7" CXX="g++-4.7" --prefix="$rootdir/emulators/advancemame-0.94.0/installdir"
    sed -i 's/LDFLAGS=-s/LDFLAGS=-s -lm -Wl,--no-as-needed/' Makefile
    make
    popd
    rm advmame.tar.gz

}

function install_advmame() {
    pushd "$rootdir/emulators/advancemame-0.94.0"
    make install
    chmod -R 755 "$rootdir/emulators/advancemame-0.94.0"
    popd
}

function configure_advmame() {
    rmDirExists /root/.advance
    rmDirExists /home/$user/.advance
    $rootdir/emulators/advancemame-0.94.0/installdir/bin/advmame
    mv /root/.advance /home/$user/
    echo 'device_video_clock 5 - 50 / 15.62 / 50 ; 5 - 50 / 15.73 / 60' >> /home/$user/.advance/advmame.rc
    chown -R $user:$user /home/$user/.advance/
}

# Amiga emulator UAE4All

function sources_uae4all() {
    rmDirExists "$rootdir/emulators/uae4rpi"
    wget http://www.gamshi.com/download/uae4rpi.tar.bz2
    tar -jxvf uae4rpi.tar.bz2 -C "$rootdir/emulators/"
    rm uae4rpi.tar.bz2
}

function build_uae4all() {
    pushd "$rootdir/emulators/uae4rpi"
    if [[ ! -f /opt/vc/include/interface/vmcs_host/vchost_config.h ]]; then
        touch /opt/vc/include/interface/vmcs_host/vchost_config.h
    fi
    make
    if [[ ! -f "$rootdir/emulators/uae4rpi/uae4all" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Amiga emulator."
    fi
    popd
}

function configure_uae4all() {
    mkdir -p "$romdir/amiga"
}

function sources_atari800() {
    wget -O atari800-3.0.0.tar.gz http://sourceforge.net/projects/atari800/files/atari800/3.0.0/atari800-3.0.0.tar.gz/download
    rmDirExists "$rootdir/emulators/atari800-3.0.0"
    tar xvfz atari800-3.0.0.tar.gz -C "$rootdir/emulators/"
    rm atari800-3.0.0.tar.gz
}

function build_atari800() {
    pushd "$rootdir/emulators/atari800-3.0.0/src"
    mkdir -p "$rootdir/emulators/atari800-3.0.0/installdir"
    ./configure --prefix="$rootdir/emulators/atari800-3.0.0/installdir"
    make
    popd
}

function install_atari800() {
    pushd "$rootdir/emulators/atari800-3.0.0/src"
    make install
    if [[ ! -f "$rootdir/emulators/atari800-3.0.0/installdir/bin/atari800" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Atari 800 emulator."
    fi
    popd
}

function configure_atari800() {
    mkdir -p "$romdir/atari800"
}

function sources_cpc() {
    wget http://gaming.capsule-sa.co.za/downloads/cpc4rpi-1.1_src.tar.gz
    rmDirExists "$rootdir/emulators/cpc4rpi-1.1"
    tar xvfz cpc4rpi-1.1_src.tar.gz -C "$rootdir/emulators/"
    rm cpc4rpi-1.1_src.tar.gz
}

function build_cpc() {
    pushd "$rootdir/emulators/cpc4rpi-1.1"
    sed -i 's|LIBS = -L/usr/lib/arm-linux-gnueabihf -lz -lts -L/opt/vc/lib -lGLESv2 -lEGL|LIBS = -L/usr/lib/arm-linux-gnueabihf -lX11 -lz -lts -L/opt/vc/lib -lSDL -lpthread -ldl -lGLESv2 -lEGL|g' makefile
    sed -i 's|$(CC) $(CFLAGS) $(IPATHS) -o cpc4rpi cpc4rpi.cpp crtc.o fdc.o psg.o tape.o z80.o /root/Raspbian/Libs/libSDL.a /root/Raspbian/Libs/libnofun.a $(LIBS)|$(CC) $(CFLAGS) $(IPATHS) -o cpc4rpi cpc4rpi.cpp crtc.o fdc.o psg.o tape.o z80.o   $(LIBS)|g' makefile
    make RELEASE=TRUE
    if [[ ! -f "$rootdir/emulators/cpc4rpi-1.1/cpc4rpi" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Amstrad CPC emulator CPC4Rpi."
    fi
    popd
}

function configure_cpc() {
    mkdir -p "$romdir/amstradcpc"
}

function install_dosbox() {
    aptInstall dosbox
}

function configure_dosbox() {
    mkdir -p "$romdir/pc"
}

function install_stella()
{
    aptInstall stella
}

function configure_stella() {
    mkdir -p "r$omroot/atari2600"
}

function sources_basilisk() {
    gitPullOrClone "$rootdir/emulators/basiliskii" git://github.com/cebix/macemu.git
}

function build_basilisk() {
    pushd "$rootdir/emulators/basiliskii"
    cd BasiliskII/src/Unix
    ./autogen.sh
    ./configure --prefix="$rootdir/emulators/basiliskii/installdir" --enable-sdl-video --enable-sdl-audio --disable-vosf --disable-jit-compiler
    make clean
    make
    popd
}

function install_basilisk() {
    pushd "$rootdir/emulators/basiliskii"
    make install
    if [[ -z "$rootdir/emulators/basiliskii/installdir/bin/BasiliskII" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile BasiliskII."
    fi
    popd
}

function configure_basilisk() {
    touch $rootdir/roms/basiliskii/Start.txt
    mkdir -p "$romdir/macintosh"
}

function sources_vice() {
    rmDirExists "$rootdir/emulators/vice-2.4"
    wget -O vice-2.4.tar.gz http://downloads.sourceforge.net/project/vice-emu/releases/vice-2.4.tar.gz
    tar xzvf vice-2.4.tar.gz -C "$rootdir/emulators/"
    rm vice-2.4.tar.gz
}

function build_vice() {
    if dpkg-query -Wf'${db:Status-abbrev}' vice 2>/dev/null | grep -q '^i'; then
        printf 'Package vice is already installed - removing package\n' "${1}"
        apt-get remove -y vice
    fi
    echo 'deb-src http://mirrordirector.raspbian.org/raspbian/ wheezy main contrib non-free rpi' >> /etc/apt/sources.list
    aptInstall libxaw7-dev automake checkinstall
    pushd "$rootdir/emulators/vice-2.4"
    ./configure --prefix="$rootdir/emulators/vice-2.4/installdir" --enable-sdlui --without-pulse --with-sdlsound
    make
    popd
}

function install_vice() {
    pushd "$rootdir/emulators/vice-2.4"
    make install
    popd
}

function configure_vice() {
    mkdir -p "$romdir/c64"
}

function install_c64roms() {
    wget http://www.zimmers.net/anonftp/pub/cbm/crossplatform/emulators/VICE/old/vice-1.5-roms.tar.gz
    tar -xvzf vice-1.5-roms.tar.gz
    mkdir -p "$rootdir/emulators/vice-2.3.dfsg/installdir/lib/vice/"
    cp -a vice-1.5-roms/data/* "$rootdir/emulators/vice-2.3.dfsg/installdir/lib/vice/"
    rm -rf vice-1.5-roms
    rm -rf vice-1.5-roms.tar.gz
}

function install_eduke32() {
    rmDirExists "$rootdir/emulators/eduke32"
    mkdir -p $rootdir/emulators/eduke32
    pushd "$rootdir/emulators/eduke32"
    printMsg "Downloading eDuke core"
    wget http://repo.berryboot.com/eduke32_2.0.0rpi+svn2789_armhf.deb
    printMsg "Downloading eDuke32 Shareware files"
    wget http://apt.duke4.net/pool/main/d/duke3d-shareware/duke3d-shareware_1.3d-23_all.deb
    if [[ ! -f "$rootdir/emulators/eduke32/eduke32_2.0.0rpi+svn2789_armhf.deb" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully install eDuke32 core."
    else
        dpkg -i *duke*.deb
        if [[ ! -d $romdir/roms/ports/duke3d ]]; then
            mkdir -p $romdir/roms/ports/duke3d
        fi
        cp /usr/share/games/eduke32/DUKE.RTS $romdir/roms/ports/duke3d/
        cp /usr/share/games/eduke32/duke3d.grp $romdir/roms/ports/duke3d/
    fi
    popd
    rm -rf "$rootdir/emulators/eduke32"

    cat > "$romdir/roms/ports/Duke3D Shareware.sh" << _EOF_
#!/bin/bash
$rootdir/supplementary/runcommand/runcommand.sh 4 "eduke32 -g %ROM% -gamegrp duke3d.grp"
_EOF_
    chmod +x "$romdir/roms/ports/Duke3D Shareware.sh"
}

# install Game Boy Advance emulator gpSP
function sources_gpsp() {
    gitPullOrClone "$rootdir/emulators/gpsp" git://github.com/gizmo98/gpsp.git
    pushd "$rootdir/emulators/gpsp"
    cd raspberrypi

    if [ "$__chroot" == "0" ]; then
        #if we are on the 256mb model, we will never have enough RAM to compile gpSP with compiler optimization
        #if this is the case, use sed to remove the -O3 in the Makefile (line 20, "CFLAGS     += -O3 -mfpu=vfp")
        local RPiRev=`grep 'Revision' "/proc/cpuinfo" | cut -d " " -f 2`
        if [ $RPiRev == "000000d" ] || [ $RPiRev == "000000e" ] || [ $RPiRev == "000000f" ] || [ $RPiRev == "100000d" ]; then
            #RAM = 512mb, we're good
            echo "512mb Pi, no de-optimization fix needed."
        else
        #RAM = 256mb, need to compile unoptimized
            echo "Stripping -O[1..3] from gpSP Makefile to compile unoptimized on 256mb Pi..."
            sed -i 's/-O[1..3]//g' Makefile
            sed -i 's/-Ofast//g' Makefile
        fi
    fi

    #gpSP is missing an include in the Makefile
    if [[ ! -z `grep "\-I/opt/vc/include/interface/vmcs_host/linux" Makefile` ]]; then
       echo "Skipping adding missing include to gpSP Makefile."
    else
       echo "Adding -I/opt/vc/include/interface/vmcs_host/linux to Makefile"
       sed -i '23iCFLAGS     += -I/opt/vc/include/interface/vmcs_host/linux' Makefile
    fi
    popd
}

function build_gpsp() {
    pushd "$rootdir/emulators/gpsp"
    cd raspberrypi
    make clean
    make
    cp "$rootdir/emulators/gpsp/game_config.txt" "$rootdir/emulators/gpsp/raspberrypi/"
    # TODO copy gpsp into /opt/retropie/emulators/gpsp directory
    if [[ -z `find $rootdir/emulators/gpsp/ -name "gpsp"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Game Boy Advance emulator."
    fi
    popd

}

function configure_gpsp() {
    mkdir -p "$romdir/gba"
    chown $user:$user -R "$rootdir/emulators/gpsp/raspberrypi/"
}

function sources_gngeopi() {
    gitPullOrClone "$rootdir/emulators/gngeo-pi-0.85" https://github.com/ymartel06/GnGeo-Pi.git
}

function build_gngeopi() {
    pushd "$rootdir/emulators/gngeo-pi-0.85/gngeo"
    chmod +x configure
    ./configure --disable-i386asm --prefix="$rootdir/emulators/gngeo-pi-0.85/installdir"
    make
    popd
}

function install_gngeopi() {
    pushd "$rootdir/emulators/gngeo-pi-0.85/gngeo"
    make install
    if [[ ! -f "$rootdir/emulators/gngeo-pi-0.85/installdir/bin/arm-linux-gngeo" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile GnGeo-Pi emulator."
    fi
    popd
}

function configure_gngeopi() {
    mkdir -p "$romdir/mame"
}

function install_hatari() {
    aptInstall hatari
    mkdir -p $romdir/atariststefalcon
}

function sources_mame4all() {
    gitPullOrClone "$rootdir/emulators/mame4all-pi" https://code.google.com/p/mame4all-pi/ NS
    sed -i "s/@mkdir/@mkdir -p/g" "$rootdir/emulators/mame4all-pi/Makefile"
}

function build_mame4all() {
    pushd "$rootdir/emulators/mame4all-pi"
    make clean
    make
    if [[ ! -f "$rootdir/emulators/mame4all-pi/mame" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully mame4all-pi emulator."
    fi
    popd
}

function configure_mame4all() {
    mkdir -p "$romdir/mame"
    mkdir -p "$rootdir/emulators/mame4all-pi/"{cfg,hi,sta,roms}
    chown -R $user:$user "$rootdir/emulators/mame4all-pi"
    ensureKeyValueShort "samplerate" "22050" "$rootdir/emulators/mame4all-pi/mame.cfg"
    ensureKeyValueShort "rompath" "$romdir/mame" "$rootdir/emulators/mame4all-pi/mame.cfg"
}

function sources_osmose() {
    wget 'https://dl.dropbox.com/s/z6l69wge8q1xq7r/osmose-0.8.1%2Brpi20121122.tar.bz2?dl=1' -O osmose.tar.bz2
    tar -jxvf osmose.tar.bz2 -C "$rootdir/emulators/"
    rm osmose.tar.bz2
}

function build_osmose() {
    pushd "$rootdir/emulators/osmose-0.8.1+rpi20121122/"
    make clean
    make
    if [[ ! -f "$rootdir/emulators/osmose-0.8.1+rpi20121122/osmose" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile OsmMose."
    fi
    popd
}

function configure_osmose() {
    mkdir -p "$romdir/gamegear"
    mkdir -p "$romdir/mastersystem"
}

function sources_jzint() {
    wget 'http://spatula-city.org/~im14u2c/intv/dl/jzintv-1.0-beta4-src.zip' -O jzintv.zip
    unzip -n jzintv.zip -d "$rootdir/emulators/"
    rm jzintv.zip
}

function build_jzint() {
    pushd "$rootdir/emulators/jzintv-1.0-beta4/src/"
    mkdir "$rootdir/emulators/jzintv-1.0-beta4/bin"
    make clean
    make OPT_FLAGS="-O3 -fomit-frame-pointer -fprefetch-loop-arrays -march=armv6 -mfloat-abi=hard -mfpu=vfp"
    if [[ ! -f "$rootdir/emulators/jzintv-1.0-beta4/bin/jzintv" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile jzintv."
    else
        __INFMSGS="$__INFMSGS You need to copy Intellivision BIOS files to the folder '/usr/local/share/jzintv/rom'."
    fi
    popd
}

function configure_jzint() {
    mkdir -p "$romdir/intellivision"
}

function depen_linapple() {
    aptInstall libzip2
}

function sources_linapple() {
    rmDirExists "$rootdir/emulators/apple2"
    wget http://downloads.sourceforge.net/project/linapple/linapple/linapple-2a/linapple-src_2a.tar.bz2
    tar -jxvf linapple-src_2a.tar.bz2 -C "$rootdir/emulators/"
    rm linapple-src_2a.tar.bz2
}

function build_linapple() {
    pushd "$rootdir/emulators/linapple-src_2a/src"
    make CXX="g++-4.6"
    popd
}

function configure_linapple() {
    if [[ ! -d $romdir/apple2 ]]; then
        mkdir -p $romdir/apple2
    fi
    cat > "$rootdir/emulators/linapple-src_2a/Start.sh" << _EOF_
#!/bin/bash
pushd $rootdir/emulators/linapple-src_2a
./linapple
popd
_EOF_
    chmod +x "$rootdir/emulators/linapple-src_2a/Start.sh"
    touch $romdir/apple2/Start.txt

    pushd "$rootdir/emulators/linapple-src_2a"
    sed -i -r -e "s|[^I]?Joystick 0[^I]?=[^I]?[0-9]|\tJoystick 0\t=\t1|g" linapple.conf
    sed -i -r -e "s|[^I]?Joystick 1[^I]?=[^I]?[0-9]|\tJoystick 1\t=\t1|g" linapple.conf
    popd
}

function sources_mupen64rpi() {
    gitPullOrClone "$rootdir/emulators/mupen64plus-rpi" https://github.com/ricrpi/mupen64plus-rpi
}

function build_mupen64rpi() {
    pushd "$rootdir/emulators/mupen64plus-rpi"
    ./m64p_build.sh
    if [[ ! -f "$rootdir/emulators/mupen64plus-rpi/test/mupen64plus" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Mupen 64 Plus RPi."
    fi
    popd
}

function configure_mupen64rpi() {
    mkdir -p "$romdir/n64"
}

function depen_snes9x() {
    aptInstall libsdl-dev libboost-thread-dev
}

function sources_snes9x() {
    gitPullOrClone "$rootdir/emulators/snes9x-rpi" https://github.com/chep/snes9x-rpi.git
}

function build_snes9x() {
    pushd "$rootdir/emulators/snes9x-rpi"
    make clean
    make
    if [[ ! -f "$rootdir/emulators/snes9x-rpi/snes9x" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile SNES9X."
    fi
    popd
}

function configure_snes9x() {
    if [[ -z `grep "mode \"320x240\"" /etc/fb.modes` ]]; then
        echo -e "mode \"320x240\"\ngeometry 320 240 656 512 16\ntimings 0 0 0 0 0 0 0\nrgba 5/11,6/5,5/0,0/16\nendmode" | cat - /etc/fb.modes > temp && mv temp /etc/fb.modes
    fi

    mkdir -p "$romdir/snes"
}

function sources_pifba() {
    gitPullOrClone "$rootdir/emulators/pifba" https://code.google.com/p/pifba/ NS
}

function build_pifba() {
    pushd "$rootdir/emulators/pifba"
    mkdir ".obj"
    make clean
    make
    if [[ ! -d "$rootdir/emulators/pifba/" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile PiFBA."
    fi
    popd
}

function install_pifba() {
    mkdir -p "$rootdir/emulators/pifba/installdir"

    cp "$rootdir/emulators/pifba/fba2x" "$rootdir/emulators/pifba/installdir/"
    cp "$rootdir/emulators/pifba/capex.cfg" "$rootdir/emulators/pifba/installdir/"
    cp "$rootdir/emulators/pifba/fba2x.cfg" "$rootdir/emulators/pifba/installdir/"
    cp "$rootdir/emulators/pifba/zipname.fba" "$rootdir/emulators/pifba/installdir/"
    cp "$rootdir/emulators/pifba/rominfo.fba" "$rootdir/emulators/pifba/installdir/"
    cp "$rootdir/emulators/pifba/FBACache_windows.zip" "$rootdir/emulators/pifba/installdir/"
    cp "$rootdir/emulators/pifba/fba_029671_clrmame_dat.zip" "$rootdir/emulators/pifba/installdir/"
    chown -R $user:$user "$rootdir/emulators/pifba/installdir/"
    mkdir -p "$rootdir/emulators/pifba/roms"
    mkdir -p "$rootdir/emulators/pifba/skin"
    mkdir -p "$rootdir/emulators/pifba/preview"

}

function configure_pifba() {
    mkdir -p "$romdir/fba"
}

function sources_pisnes() {
    gitPullOrClone "$rootdir/emulators/pisnes" https://code.google.com/p/pisnes/ NS
}

function build_pisnes() {
    pushd "$rootdir/emulators/pisnes"
    sed -i -e "s|-lglib-2.0|-lglib-2.0 -lbcm_host|g" Makefile
    make clean
    make
    if [[ ! -f "$rootdir/emulators/pisnes/snes9x" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile PiSNES."
    fi
    popd
}

function configure_pisnes() {
    if [[ -z `grep "mode \"320x240\"" /etc/fb.modes` ]]; then
        echo -e "mode \"320x240\"\ngeometry 320 240 656 512 16\ntimings 0 0 0 0 0 0 0\nrgba 5/11,6/5,5/0,0/16\nendmode" | cat - /etc/fb.modes > temp && mv temp /etc/fb.modes
    fi

    mkdir -p "$romdir/snes"
}

function install_rpix86() {
    wget http://rpix86.patrickaalto.com/rpix86.tar.gz
    rmDirExists "$rootdir/emulators/rpix86"
    mkdir -p "$rootdir/emulators/rpix86"
    tar xvfz rpix86.tar.gz -C "$rootdir/emulators/rpix86"
    rm rpix86.tar.gz

    # install 4DOS.com
    unzip -n $scriptdir/supplementary/4dos.zip -d "$rootdir/emulators/rpix86/"
}

function configure_rpix86() {
    ln -s $romdir/pc/ $rootdir/emulators/rpix86/games
    rmDirExists "$romdir/pc/pc"
    cat > "$rootdir/emulators/rpix86/Start.sh" << _EOF_
#!/bin/bash
pushd $rootdir/emulators/rpix86
./rpix86
popd
_EOF_
    chmod +x "$rootdir/emulators/rpix86/Start.sh"
    mkdir -p "$romdir/pc"
    touch $romdir/pc/Start.txt
}

function install_scummvm() {
    aptInstall scummvm scummvm-data
    if [[ $? -gt 0 ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully install ScummVM."
    else
        __INFMSGS="$__INFMSGS ScummVM has successfully been installed. You can start the ScummVM GUI by typing 'scummvm' in the console. Copy your Scumm games into the directory '$rootdir/roms/scummvm'. When you get a blank screen after running scumm for the first time, press CTRL-q. You should not get a blank screen with further runs of scummvm."
    fi
}

function install_zmachine() {
    aptInstall frotz
    wget -U firefox http://www.infocom-if.org/downloads/zork1.zip
    wget -U firefox http://www.infocom-if.org/downloads/zork2.zip
    wget -U firefox http://www.infocom-if.org/downloads/zork3.zip
    mkdir -p $romdir/zmachine/zork1
    mkdir -p $romdir/zmachine/zork2
    mkdir -p $romdir/zmachine/zork3
    unzip -n zork1.zip -d "$romdir/zmachine/zork1/"
    unzip -n zork2.zip -d "$romdir/zmachine/zork2/"
    unzip -n zork3.zip -d "$romdir/zmachine/zork3/"
    rm zork1.zip
    rm zork2.zip
    rm zork3.zip
    __INFMSGS="$__INFMSGS The text adventures Zork 1 - 3 have been installed in the directory '$romdir/zmachine/'. You can start, e.g., Zork 1 with the command 'frotz $romdir/roms/zmachine/zork1/DATA/ZORK1.DAT'."
}

function install_zxspectrum() {
    aptInstall spectrum-roms fuse-emulator-utils fuse-emulator-common
}

function sources_fbzx() {
    rmDirExists "$rootdir/emulators/fbzx-2.10.0"
    wget -O fbzx-2.10.0.tar.bz2 http://www.rastersoft.com/descargas/fbzx-2.10.0.tar.bz2
    tar xvfj fbzx-2.10.0.tar.bz2  -C "$rootdir/emulators"
    rm fbzx-2.10.0.tar.bz2
}

function build_fbzx() {
    pushd "$rootdir/emulators/fbzx-2.10.0"
    make
    if [[ ! -f "$rootdir/emulators/fbzx-2.10.0/fbzx" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile FBZX."
    fi
    popd
}

function configure_fbzx() {
    mkdir -p $romdir/zxspectrum
}

function depen_msx() {
    aptInstall libsdl1.2-dev libsdl-ttf2.0-dev libglew-dev libao-dev libogg-dev libtheora-dev libxml2-dev libvorbis-dev tcl-dev
}

function sources_openmsx() {
    wget http://downloads.sourceforge.net/project/openmsx/openmsx/0.10.0/openmsx-0.10.0.tar.gz
    tar xvfz openmsx-0.10.0.tar.gz  -C "$rootdir/emulators"
    rm openmsx-0.10.0.tar.gz
}

function build_openmsx() {
    pushd "$rootdir/emulators/openmsx-0.10.0"
    ./configure
    make
    popd
}

function configure_openmsx() {
    mkdir -p $romdir/msx
}

function sources_fastdosbox() {
    wget http://gaming.capsule-sa.co.za/downloads/fastdosbox-1.5_src.tar.gz
    tar xvfz fastdosbox-1.5_src.tar.gz -C "$rootdir/emulators/"

    # patch sources
    sed -i 's|#include "nofun.h"|//#include "nofun.h"|g' "$rootdir/emulators/fastdosbox-1.5/src/gui/sdl_mapper.cpp"

    mkdir -p $rootdir/emulators/fastdosbox-1.5/installdir
    rm fastdosbox-1.5_src.tar.gz
}

function build_fastdosbox() {
    pushd $rootdir/emulators/fastdosbox-1.5
    ./configure --prefix=$rootdir/emulators/fastdosbox-1.5/installdir
    make
    popd
}

function install_fastdosbox() {
    pushd $rootdir/emulators/fastdosbox-1.5
    make install
    if [[ ! -f $rootdir/emulators/fastdosbox-1.5/installdir/bin/dosbox ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully install FastDosbox."
    fi
    popd
}

function sources_dgen() {
    rmDirExists "$rootdir/emulators/dgen"
    wget http://downloads.sourceforge.net/project/dgen/dgen/1.32/dgen-sdl-1.32.tar.gz
    tar xvfz dgen-sdl-1.32.tar.gz -C "$rootdir/emulators/"
    rmDirExists "$rootdir/emulators/dgen-sdl"
    mv "$rootdir/emulators/dgen-sdl-1.32" "$rootdir/emulators/dgen-sdl"
    rm dgen-sdl-1.32.tar.gz
}

function build_dgen() {
    pushd "$rootdir/emulators/dgen-sdl"
    ./configure CC="gcc-4.6" CXX="g++-4.6" --disable-opengl --prefix="$rootdir/emulators/dgen-sdl/installdir"
    make
    popd
}

function install_dgen() {
    pushd "$rootdir/emulators/dgen-sdl"
    if [[ ! -d "$rootdir/emulators/dgen-sdl/installdir" ]]; then
        mkdir -p "$rootdir/emulators/dgen-sdl/installdir"
    fi
    make install
    if [[ ! -f "$rootdir/emulators/dgen-sdl/installdir/dgen" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile DGEN emulator."
    fi
    popd
}

function configure_dgen()
{
    chmod 777 /dev/fb0

    if [[ ! -f "$rootdir/configs/all/dgenrc" ]]; then
        mkdir -p "$rootdir/configs/all/"
        cp $rootdir/emulators/dgen-sdl/sample.dgenrc $rootdir/configs/all/dgenrc
        chmod 666 $rootdir/configs/all/dgenrc
    fi

    ensureKeyValue "joy_pad1_a" "joystick0-button0" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_b" "joystick0-button1" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_c" "joystick0-button2" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_x" "joystick0-button3" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_y" "joystick0-button4" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_z" "joystick0-button5" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_mode" "joystick0-button6" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad1_start" "joystick0-button7" $rootdir/configs/all/dgenrc

    ensureKeyValue "joy_pad2_a" "joystick1-button0" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_b" "joystick1-button1" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_c" "joystick1-button2" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_x" "joystick1-button3" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_y" "joystick1-button4" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_z" "joystick1-button5" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_mode" "joystick1-button6" $rootdir/configs/all/dgenrc
    ensureKeyValue "joy_pad2_start" "joystick1-button7" $rootdir/configs/all/dgenrc

    ensureKeyValue "emu_z80_startup" "drz80" $rootdir/configs/all/dgenrc
    ensureKeyValue "emu_m68k_startup" "cyclone" $rootdir/configs/all/dgenrc
}
