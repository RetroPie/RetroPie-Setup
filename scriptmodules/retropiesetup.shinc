#!/bin/bash

#  RetroPie-Setup - Shell script for initializing Raspberry Pi 
#  with RetroArch, various cores, and EmulationStation (a graphical 
#  front end).
# 
#  (c) Copyright 2012-2013  Florian MÃ¼ller (contact@petrockblock.com)
# 
#  RetroPie-Setup homepage: https://github.com/petrockblog/RetroPie-Setup
# 
#  Permission to use, copy, modify and distribute RetroPie-Setup in both binary and
#  source form, for non-commercial purposes, is hereby granted without fee,
#  providing that this license information and copyright notice appear with
#  all copies and any derived work.
# 
#  This software is provided 'as-is', without any express or implied
#  warranty. In no event shall the authors be held liable for any damages
#  arising from the use of this software.
# 
#  RetroPie-Setup is freeware for PERSONAL USE only. Commercial users should
#  seek permission of the copyright holders first. Commercial use includes
#  charging money for RetroPie-Setup or software derived from RetroPie-Setup.
# 
#  The copyright holders request that bug fixes and improvements to the code
#  should be forwarded to them so everyone can benefit from the modifications
#  in future versions.
# 
#  Many, many thanks go to all people that provide the individual packages!!!
# 
#  Raspberry Pi is a trademark of the Raspberry Pi Foundation.
# 

# prepare folder structure for emulator, cores, front end, and roms
function rps_prepareFolders()
{
    printMsg "Creating folder structure for emulator, front end, cores, and roms"

    pathlist=()
    pathlist+=("$rootdir/roms")
    pathlist+=("$rootdir/roms/atari800")
    pathlist+=("$rootdir/roms/atari2600")
    pathlist+=("$rootdir/roms/atariStSteFalcon")
    pathlist+=("$rootdir/roms/basiliskii")
    pathlist+=("$rootdir/roms/c64")
    pathlist+=("$rootdir/roms/cavestory")
    pathlist+=("$rootdir/roms/doom")
    pathlist+=("$rootdir/roms/duke3d/")
    pathlist+=("$rootdir/roms/esconfig/")
    pathlist+=("$rootdir/roms/gamegear")
    pathlist+=("$rootdir/roms/gb")
    pathlist+=("$rootdir/roms/gba")
    pathlist+=("$rootdir/roms/gbc")
    pathlist+=("$rootdir/roms/intellivision")
    pathlist+=("$rootdir/roms/mame")
    pathlist+=("$rootdir/roms/mastersystem")
    pathlist+=("$rootdir/roms/megadrive")
    pathlist+=("$rootdir/roms/nes")
    pathlist+=("$rootdir/roms/n64")
    pathlist+=("$rootdir/roms/pcengine")
    pathlist+=("$rootdir/roms/psx")
    pathlist+=("$rootdir/roms/psp")
    pathlist+=("$rootdir/roms/snes")
    pathlist+=("$rootdir/roms/zxspectrum")
    pathlist+=("$rootdir/roms/fba")
    pathlist+=("$rootdir/roms/amiga")
    pathlist+=("$rootdir/roms/neogeo")
    pathlist+=("$rootdir/roms/scummvm")
    pathlist+=("$rootdir/roms/x86")
    pathlist+=("$rootdir/roms/zmachine")
    pathlist+=("$rootdir/emulatorcores")
    pathlist+=("$rootdir/emulators")
    pathlist+=("$rootdir/supplementary")

    for elem in "${pathlist[@]}"
    do
        if [[ ! -d $elem ]]; then
            mkdir -p $elem
            chown $user $elem
            chgrp $user $elem
        fi
    done    
}


# install driver for XBox 360 controllers
function rps_install_xboxdrv()
{
    printMsg "Installing xboxdrv"
    apt-get install -y xboxdrv
    # still to be continued
}



# downloads and installs pre-compiles binaries of all essential programs and libraries
function rps_downloadBinaries()
{
    wget -O - 'http://blog.petrockblock.com/?wpdmdl=3' | tar -jxv -C $rootdir
	mv $rootdir/RetroPie/* $rootdir

    # handle Doom emulator specifics
    cp $rootdir/emulatorcores/libretro-prboom/prboom.wad $rootdir/roms/doom/
    chgrp $user $rootdir/roms/doom/prboom.wad
    chown $user $rootdir/roms/doom/prboom.wad
}

# downloads and installs theme files for Emulation Station
function rps_install_esthemes()
{
    printMsg "Installing themes for Emulation Station"
    wget -O - 'http://blog.petrockblock.com/?wpdmdl=2' | tar -jxv -C $home/

    chgrp -R $user $home/.emulationstation
    chown -R $user $home/.emulationstation
}

# shows help information in the console
function rps_showHelp()
{
    echo ""
    echo "RetroPie Setup script"
    echo "====================="
    echo ""
    echo "The script installs the RetroArch emulator base with various cores and a graphical front end."
    echo "Because it needs to install some APT packages it has to be run with root priviliges."
    echo ""
    echo "Usage:"
    echo "sudo ./retropie_setup.sh: The installation directory is /home/pi/RetroPie for user pi"
    echo "sudo ./retropie_setup.sh USERNAME: The installation directory is /home/USERNAME/RetroPie for user USERNAME"
    echo "sudo ./retropie_setup.sh USERNAME ABSPATH: The installation directory is ABSPATH for user USERNAME"
    echo ""
}

function rps_checkNeededPackages()
{
    if [[ -z $(type -P git) || -z $(type -P dialog) ]]; then
        echo "Did not find needed packages 'git' and/or 'dialog'. I am trying to install these now."
        apt-get update
        apt-get install -y git dialog
        if [ $? == '0' ]; then
            echo "Successfully installed 'git' and/or 'dialog'."
        else
            echo "Could not install 'git' and/or 'dialog'. Aborting now."
            exit 1
        fi
    else
        echo "Found needed packages 'git' and 'dialog'."
    fi 
}

function rps_main_reboot()
{
    clear
    reboot    
}

# checks all kinds of essential files for existence and logs the results into the file debug.log
function rps_createDebugLog()
{
    clear
    printMsg "Generating debug log"

    echo "RetroArch files:" > "$rootdir/debug.log"

    # existence of files
    checkFileExistence "/usr/local/bin/retroarch"
    checkFileExistence "/usr/local/bin/retroarch-zip"
    checkFileExistence "$rootdir/configs/all/retroarch.cfg"
    echo -e "\nActive lines in $rootdir/configs/all/retroarch.cfg:" >> "$rootdir/debug.log"
    sed '/^$\|^#/d' "$rootdir/configs/all/retroarch.cfg"  >>  "$rootdir/debug.log"

    echo -e "\nEmulation Station files:" >> "$rootdir/debug.log"
    checkFileExistence "$rootdir/supplementary/EmulationStation/emulationstation"
    checkFileExistence "$rootdir/../.emulationstation/es_systems.cfg"
    checkFileExistence "$rootdir/../.emulationstation/es_input.cfg"
    echo -e "\nContent of es_systems.cfg:" >> "$rootdir/debug.log"
    cat "$rootdir/../.emulationstation/es_systems.cfg" >> "$rootdir/debug.log"
    echo -e "\nContent of es_input.cfg:" >> "$rootdir/debug.log"
    cat "$rootdir/../.emulationstation/es_input.cfg" >> "$rootdir/debug.log"

    echo -e "\nEmulators and cores:" >> "$rootdir/debug.log"
    checkFileExistence "`find $rootdir/emulatorcores/fceu-next/ -name "*libretro*.so"`"
    checkFileExistence "`find $rootdir/emulatorcores/libretro-prboom/ -name "*libretro*.so"`"
    checkFileExistence "$rootdir/emulatorcores/libretro-prboom/prboom.wad"
    checkFileExistence "`find $rootdir/emulatorcores/stella-libretro/ -name "*libretro*.so"`"
    checkFileExistence "`find $rootdir/emulatorcores/nxengine-libretro/ -name "*libretro*.so"`"
    checkFileExistence "`find $rootdir/emulatorcores/gambatte-libretro/ -name "*libretro*.so"`"
    checkFileExistence "`find $rootdir/emulatorcores/Genesis-Plus-GX/ -name "*libretro*.so"`"
    checkFileExistence "`find $rootdir/emulatorcores/fba-libretro/ -name "*libretro*.so"`"
    checkFileExistence "`find $rootdir/emulatorcores/pcsx_rearmed/ -name "*libretro*.so"`"
    checkFileExistence "`find $rootdir/emulatorcores/mednafen-pce-libretro/ -name "*libretro*.so"`"
    checkFileExistence "`find $rootdir/emulatorcores/pocketsnes-libretro/ -name "*libretro*.so"`"
    checkFileExistence "$rootdir/emulators/uae4rpi/uae4all"

    echo -e "\nSNESDev:" >> "$rootdir/debug.log"
    checkFileExistence "$rootdir/supplementary/SNESDev-Rpi/bin/SNESDev"

    echo -e "\nSummary of ROMS directory:" >> "$rootdir/debug.log"
    du -ch --max-depth=1 "$rootdir/roms/" >> "$rootdir/debug.log"

    echo -e "\nUnrecognized ROM extensions:" >> "$rootdir/debug.log"
    find "$rootdir/roms/amiga/" -type f ! \( -iname "*.adf" -or -iname "*.jpg" -or -iname "*.xml" \) >> "$rootdir/debug.log"
    find "$rootdir/roms/atari2600/" -type f ! \( -iname "*.bin" -or -iname "*.jpg" -or -iname "*.xml" \) >> "$rootdir/debug.log"
    find "$rootdir/roms/doom/" -type f ! \( -iname "*.WAD" -or -iname "*.jpg" -or -iname "*.xml" -or -name "*.wad" \) >> "$rootdir/debug.log"
    find "$rootdir/roms/fba/" -type f ! \( -iname "*.zip" -or -iname "*.jpg" -or -iname "*.xml" \) >> "$rootdir/debug.log"
    find "$rootdir/roms/gamegear/" -type f ! \( -iname "*.gg" -or -iname "*.jpg" -or -iname "*.xml" \) >> "$rootdir/debug.log"
    find "$rootdir/roms/gba/" -type f ! \( -iname "*.gba" -or -iname "*.jpg" -or -iname "*.xml" \) >> "$rootdir/debug.log"
    find "$rootdir/roms/gbc/" -type f ! \( -iname "*.gb" -or -iname "*.jpg" -or -iname "*.xml" \) >> "$rootdir/debug.log"
    find "$rootdir/roms/mame/" -type f ! \( -iname "*.zip" -or -iname "*.jpg" -or -iname "*.xml" \) >> "$rootdir/debug.log"
    find "$rootdir/roms/mastersystem/" -type f ! \( -iname "*.sms" -or -iname "*.jpg" -or -iname "*.xml" \) >> "$rootdir/debug.log"
    find "$rootdir/roms/megadrive/" -type f ! \( -iname "*.smd" -or -iname "*.jpg" -or -iname "*.xml" \) >> "$rootdir/debug.log"
    find "$rootdir/roms/nes/" -type f ! \( -iname "*.nes" -or -iname "*.jpg" -or -iname "*.xml" \) >> "$rootdir/debug.log"
    find "$rootdir/roms/pcengine/" -type f ! \( -iname "*.iso" -or -iname "*.jpg" -or -iname "*.xml" \) >> "$rootdir/debug.log"
    find "$rootdir/roms/psx/" -type f ! \( -iname "*.img" -or -iname "*.jpg" -or -iname "*.xml" \) >> "$rootdir/debug.log"
    find "$rootdir/roms/snes/" -type f ! \( -iname "*.smc" -or -iname "*.jpg" -or -iname "*.xml" \) >> "$rootdir/debug.log"

    echo -e "\nCheck for needed APT packages:" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "libsdl1.2-dev" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "screen" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "scons" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "libasound2-dev" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "pkg-config" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "libgtk2.0-dev" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "libboost-filesystem-dev" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "libboost-system-dev" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "zip" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "libxml2" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "libxml2-dev" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "libbz2-dev" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "python-imaging" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "libfreeimage-dev" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "libfreetype6-dev" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "libaudiofile-dev" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "libsdl-sound1.2-dev" >> "$rootdir/debug.log"
    checkForInstalledAPTPackage "libsdl-mixer1.2-dev" >> "$rootdir/debug.log"

    echo -e "\nEnd of log file" >> "$rootdir/debug.log" >> "$rootdir/debug.log"

    dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Debug log was generated in $rootdir/debug.log" 22 76    

}

# download, extract, and install binaries
function rps_main_binaries()
{
    __INFMSGS=""

    clear
    printMsg "Binaries-based installation"

    # install_rpiupdate, not done anymore, but rely on apt-get upgrade here
    rc_update_apt
    rc_upgrade_apt
    # run_rpiupdate, not done anymore, but rely on apt-get upgrade here
    rc_installAPTPackages
    rc_ensure_modules
    rc_add_to_groups
    rc_exportSDLNOMOUSE
    rc_configureBootConfig
    rps_prepareFolders
    rps_downloadBinaries
    sup_install_esscript
    sup_generate_esconfig
    sup_configure_snesdev
    rc_fixForXBian
    rc_disableTimeouts
    
    # install RetroArch
    # install -m755 $rootdir/emulators/RetroArch/retroarch /usr/local/bin
    # install -m644 $rootdir/emulators/RetroArch/retroarch.cfg /etc/retroarch.cfg
    # install -m755 $rootdir/emulators/RetroArch/retroarch-zip /usr/local/bin
    em_configureRetroArch
    lr_configure_snes
    rps_install_esthemes
    em_configureSoundsettings
    em_install_stella
    em_install_scummvm
    em_install_zmachine
    em_install_zxspectrum
    em_install_c64roms    
    em_install_hatari
    em_install_dosbox
    em_configure_mame4allpi

    # install DGEN
    test -z "/usr/local/bin" || /bin/mkdir -p "/usr/local/bin"
    /usr/bin/install -c $rootdir/emulators/dgen-sdl/installdir/usr/local/bin/dgen $rootdir/emulators/dgen-sdl/installdir/usr/local/bin/dgen_tobin '/usr/local/bin'
    test -z "/usr/local/share/man/man1" || /bin/mkdir -p "/usr/local/share/man/man1"
    /usr/bin/install -c -m 644 $rootdir/emulators/dgen-sdl/installdir/usr/local/share/man/man1/dgen.1 $rootdir/emulators/dgen-sdl/installdir/usr/local/share/man/man1/dgen_tobin.1 '/usr/local/share/man/man1'
    test -z "/usr/local/share/man/man5" || /bin/mkdir -p "/usr/local/share/man/man5"
    /usr/bin/install -c -m 644 $rootdir/emulators/dgen-sdl/installdir/usr/local/share/man/man5/dgenrc.5 '/usr/local/share/man/man5'
    em_configureDGEN
    em_configure_advmame
    lr_configure_cavestory
    em_configure_linapple
    em_install_eduke32
    em_configure_rpix86
    sup_configure_esconfig
    lr_configure_doom

    chgrp -R $user $rootdir
    chown -R $user $rootdir

    rc_setAvoidSafeMode
    sup_install_runcommandscript

    rps_createDebugLog

    __INFMSGS="$__INFMSGS The Amiga emulator can be started from command line with '$rootdir/emulators/uae4all/uae4all'. Note that you must manually copy a Kickstart rom with the name 'kick.rom' to the directory $rootdir/emulators/uae4all/."
    __INFMSGS="$__INFMSGS You need to copy NeoGeo BIOS files to the folder '$rootdir/emulators/gngeo-0.7/neogeo-bios/'."
    __INFMSGS="$__INFMSGS You need to copy Intellivision BIOS files to the folder '/usr/local/share/jzintv/rom'."

    if [[ ! -z $__INFMSGS ]]; then
        dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "$__INFMSGS" 20 60    
    fi

    dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Finished tasks.\nStart the front end with 'emulationstation'. You now have to copy roms to the roms folders. Have fun!" 22 76    
}

function rps_main_updatescript()
{
  printMsg "Fetching latest version of the RetroPie Setup Script."
  pushd $scriptdir
  if [[ ! -d ".git" ]]; then
    dialog --backtitle "PetRockBlock.com - RetroPie Setup." --msgbox "Cannot find direcotry '.git'. Please clone the RetroPie Setup script via 'git clone git://github.com/petrockblog/RetroPie-Setup.git'" 20 60    
    popd
    return
  fi
  git pull
  popd
  dialog --backtitle "PetRockBlock.com - ORetroPie Setup." --msgbox "Fetched the latest version of the RetroPie Setup script. You need to restart the script." 20 60    
}

##################
## menus #########
##################

function rps_scraperMenu()
{
    while true; do
        cmd=(dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --menu "Choose task." 22 76 16)
        options=(1 "(Re-)scape of the ROMs directory" 
                 2 "FORCED (re-)scrape of the ROMs directory" 
                 3 "(Re-)scrape of the ROMs directory with CRC option" 
                 4 "(Re-)scrape of the ROMs directory in MANUAL mode" 
                 5 "(Re-)scrape of the ROMs directory in PARTIAL mode"
                 6 "Set maximum width of images (currently: $esscrapimgw px)" )
        choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)    
        if [ "$choices" != "" ]; then
            clear
            case $choices in
                1) set_essc_runnormal ;;
                2) set_essc_runforced ;;
                3) set_essc_runcrc ;;
                4) set_essc_runmanual ;;
                5) set_essc_runpartial ;;
                6) set_essc_setimgw ;;
            esac
        else
            break
        fi
    done        
}

function rps_main_options()
{
    cmd=(dialog --separate-output --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --checklist "Select options with 'space' and arrow keys. The default selection installs a complete set of packages and configures basic settings. The entries marked as (C) denote the configuration steps. For an update of an installation you would deselect these to keep all your settings untouched." 22 76 16)
    options=(1 "Install latest rpi-update script" ON     # any option can be set to default to "on"
             2 "Update firmware with rpi-update" OFF \
             3 "Update APT repositories" ON \
             4 "Perform APT upgrade" ON \
             5 "Apply fix for XBian (Neede to make components compile properly)" ON \
             6 "(C) Add user $user to groups video, audio, and input" ON \
             7 "(C) Enable modules ALSA, uinput, and joydev" ON \
             8 "(C) Export SDL_NOMOUSE=1" ON \
             9 "Install all needed APT packages" ON \
             10 "(C) Generate folder structure" ON \
             11 "Install RetroArch (7 min)" ON \
             12 "(C) Configure video, rewind, and keyboard for RetroArch" ON \
             13 "Install Amiga emulator UAE4RPi (15 min)" ON \
             14 "Install Apple ][ emulator (Linapple, 7 min)" ON \
             15 "Install Atari 800 emulator (6 min)" ON \
             16 "Install Atari 2600 RetroArch core (15 min)" ON \
             17 "Install Atari 2600 emulator Stella (1 min)" ON \
             18 "Install Atari ST/STE/TT/Falcon emulator Hatari (1 min)" ON \
             19 "Install Apple Macintosh (BasiliskII, 23 min)" ON \
             20 "Install C64 emulator (Vice)" ON \
             21 "Install NXEngine / Cave Story (16 min)" ON \
             22 "Install Doom core" ON \
             23 "Install eDuke32 with shareware files" ON \
             24 "Install Game Boy Advance emulator (gpSP, 41 min)" ON \
             25 "Install Game Boy Color core (7 min)" ON \
             26 "Install IntelliVision emulator (jzintv, 10 min)" ON \
             27 "Install MAME (iMAME4All) core" ON \
             28 "Install AdvMAME emulator" ON \
             29 "Install MAME4All-Pi (84 min)" ON \
             30 "Install FBA core (130 min)" ON \
             31 "Install MAME emulator PiFBA (43 min)" ON \
             32 "Install Mastersystem/Game Gear/Megadrive emulator (OsmOse, 7 min)" ON \
             33 "Install DGEN (Megadrive/Genesis emulator, 32 min)" ON \
             34 "(C) Configure DGEN" ON \
             35 "Install Megadrive/Genesis core (Genesis-Plus-GX, 16 min)" ON \
             36 "Install Megadrive/Genesis core (Picodrive, 7 min)" ON \
             37 "Install NeoGeo emulator GnGeo 0.7" ON \
             38 "Install NeoGeo emulator GnGeo-Pi 0.85 (21 min)" ON \
             39 "(C) Configure NeoGeo" ON \
             40 "Install NES core (8 min)" ON \
             41 "Install N64 emulator Mupen 64 Plus RPi (56 min)" ON \
             42 "Install PC Engine core (Mednafen-PCE-Libretro, 21 min)" ON \
             43 "Install PC emulator (RPix86)" ON \
             44 "Install PC emulator (Dosbox, 1 min)" ON \
             45 "Install Playstation core (20 min)" ON \
             46 "Install PSP emulator PPSSPP" OFF \
             47 "Install ScummVM (1 min)" ON \
             48 "Install Super NES core (11 min)" ON \
             49 "Install SNES9X emulator (15 min)" ON \
             50 "Install PiSNES emulator (8 min)" ON \
             51 "(C) Configure Super NES core" ON \
             52 "Install Wolfenstein3D engine (3 min)" ON \
             53 "Install Z Machine emulator (Frotz)" ON \
             54 "Install ZX Spectrum emulator (Fuse, 1 min)" ON \
             55 "Install ZX Spectrum emulator (FBZX, 3 min)" ON \
             56 "Install BCM library" ON \
             57 "Install Dispmanx library" ON \
             58 "Install SNESDev" ON \
             59 "Install Emulation Station" ON \
             60 "Install Emulation Station Themes" ON \
             61 "Install ES-config" ON \
             62 "(C) Generate config file for Emulation Station" ON \
             63 "(C) Configure sound settings for RetroArch" ON \
             64 "(C) Set avoid_safe_mode=1 (for GPIO adapter)" ON \
             65 "Install runcommand script" ON \
             66 "(C) Configure /boot/config.txt" ON \
             67 "(C) Disable screen blanking and power down timeout" ON )
    choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
    clear
    __ERRMSGS=""
    __INFMSGS=""
    if [ "$choices" != "" ]; then
        now=$(date +'%d%m%Y_%H%M')
        {
            for choice in $choices
            do
                case $choice in
                    1) rc_install_rpiupdate ;;
                    2) rc_run_rpiupdate ;;
                    3) rc_update_apt ;;
                    4) rc_upgrade_apt ;;
                    5) rc_fixForXBian ;;
                    6) rc_add_to_groups ;;
                    7) rc_ensure_modules ;;
                    8) rc_exportSDLNOMOUSE ;;
                    9) rc_installAPTPackages ;;
                    10) rps_prepareFolders ;;
                    11) em_install_retroarch ;;
                    12) em_configureRetroArch ;;
                    13) em_install_amiga ;;
                    14) em_install_linapple ;;
                    15) em_install_atari800 ;;
                    16) lr_install_atari2600 ;;
                    17) em_install_stella ;;
                    18) em_install_hatari ;;
                    19) em_install_basiliskII ;;
                    20) em_install_viceC64 ;;
                    21) lr_install_cavestory ;;
                    22) lr_install_doom ;;
                    23) em_install_eduke32 ;;
                    24) em_install_gba ;;
                    25) lr_install_gbc ;;
                    26) em_install_intellivision ;;
                    27) lr_install_mame ;;
                    28) em_install_advmame ;;
                    29) em_install_mame4allpi ;;
                    30) lr_install_fba ;;
                    31) em_install_pifba ;;
                    32) em_install_megadrive ;;
                    33) em_install_dgen ;;
                    34) em_configureDGEN ;;
                    35) lr_install_megadriveLibretro ;;
                    36) lr_install_picodrive ;;
                    37) em_install_neogeo ;;
                    38) em_install_GnGeoPi ;;
                    39) em_configureNeogeo ;;
                    40) lr_install_nes ;;
                    41) em_install_mupen64plus_rpi ;;
                    42) lc_installPCEngine ;;
                    43) em_install_rpix86 ;;
                    44) em_install_dosbox ;;
                    45) lr_install_psx ;;
                    46) em_install_ppsspp ;;
                    47) em_install_scummvm ;;
                    48) lr_install_snes ;;
                    49) em_install_snes9x ;;
                    50) em_install_pisnes ;;
                    51) lr_configure_snes ;;
                    52) em_install_wolfenstein3d ;;
                    53) em_install_zmachine ;;
                    54) em_install_zxspectrum ;;
                    55) em_install_fbzx ;;
                    56) sup_install_bcmlibrary ;;
                    57) sup_install_dispmanx ;;
                    58) sup_install_snesdev ;;
                    59) sup_install_emulationstation ;;
                    60) rps_install_esthemes ;;
                    61) sup_install_esconfig ;;
                    62) sup_generate_esconfig ;;
                    63) em_configureSoundsettings ;;
                    64) rc_setAvoidSafeMode ;;
                    65) sup_install_runcommandscript ;;
                    66) rc_configureBootConfig ;;
                    67) rc_disableTimeouts ;;
                esac
            done

            chgrp -R $user $rootdir
            chown -R $user $rootdir

            rps_createDebugLog

        } 2>&1 | tee >(gzip --stdout > $scriptdir/logs/run_$now.log.gz)

        if [[ ! -z $__ERRMSGS ]]; then
            dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "$__ERRMSGS See debug.log for more details." 20 60    
        fi

        if [[ ! -z $__INFMSGS ]]; then
            dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "$__INFMSGS" 20 60    
        fi

        dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Finished tasks.\nStart the front end with 'emulationstation'. You now have to copy roms to the roms folders. Have fun!" 20 60    

        chown -R $user $scriptdir/logs/run_$now.log.gz
        chgrp -R $user $scriptdir/logs/run_$now.log.gz
    fi
}

function rps_availFreeDiskSpace()
{
    local __required=$1
    local __avail=`df -P $rootdir | tail -n1 | awk '{print $4}'`

    required_MB=`expr $__required / 1024`
    available_MB=`expr $__avail / 1024`

    if [[ "$__required" -le "$__avail" ]] || ask "Minimum recommended disk space ($required_MB MB) not available. Try 'sudo raspi-config' to resize partition to full size. Only $available_MB MB available at $rootdir continue anyway?"; then
        return 0;
    else
        exit 0;
    fi
}

function rps_main_setup()
{
    now=$(date +'%d%m%Y_%H%M%S')
    {
        while true; do
            cmd=(dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --menu "Choose task." 22 76 16)
            options=(1 "Re-generate config file for Emulation Station" 
                     2 "Install latest Rasperry Pi firmware" 
                     3 "Install AdvanceMenu"
                     4 "Start Emulation Station on boot?" 
                     5 "Start SNESDev on boot?"
                     6 "Enable/disable RetroPie splashscreen"
                     7 "Change RetroPie splashscreen"
                     8 "Configure audio settings"
                     9 "Change ARM frequency" 
                     10 "Change SDRAM frequency"
                     11 "Install/update multi-console gamepad drivers for GPIO" 
                     12 "Enable gamecon_gpio_rpi with SNES-pad config"
                     13 "Run 'ES-scraper'" 
                     14 "Install and configure SAMBA shares"
                     15 "Install USB-ROM-Copy service"
                     16 "Install drivers for XBox 360 Wired Controllers"
                     17 "Install driver and tools for PS3 controllers"
                     18 "Configure RetroArch Netplay"
                     19 "Register controller for RetroArch emulator"
                     20 "Update input configuration of Emulation Station"
                     21 "Generate debug log" )
            choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)    
            if [ "$choices" != "" ]; then
                case $choices in
                     1) sup_generate_esconfig ;;
                     2) rc_run_rpiupdate ;;
                     3) sup_install_advancemenu ;;
                     4) set_changeBootbehaviour ;;
                     5) sup_enableDisableSNESDevStart ;;
                     6) set_enableDisableSplashscreen ;;
                     7) rps_splashscreen ;;
                     8) set_changeAudioOutput ;;
                     9) set_setArmFreq ;;
                     10) set_setSDRAMFreq ;;
                     11) set_installGPIOpadModules ;;
                     12) set_enableGameconSnes ;;
                     13) rps_scraperMenu ;;
                     14) set_configureSAMBA ;;
                     15) set_install_USBROMService ;;
                     16) set_install_xboxdrv ;;
                     17) set_installps3controller ;;
                     18) rps_retronetplaysetup ;;
                     19) set_RetroarchJoyconfig ;;
                     20) set_ES_updateinput ;;
                     21) rps_createDebugLog ;;
                esac
            else
                break
            fi
        done    
    } 2>&1 | tee >(gzip --stdout > $scriptdir/logs/run_$now.log.gz)
    chown -R $user $scriptdir/logs/run_$now.log.gz
    chgrp -R $user $scriptdir/logs/run_$now.log.gz
}

function rps_splashscreen()
{
    local options
    local ctr

    ctr=0
    pushd $scriptdir/supplementary/splashscreens/ > /dev/null
    options=()
    dirlist=()
    for splashdir in $(find . -type d | sort) ; do
        if [[ $splashdir != "." ]]; then
            options+=($ctr "${splashdir:2}")
            dirlist+=(${splashdir:2})
            ctr=$((ctr + 1))
        fi
    done
    popd > /dev/null
    cmd=(dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --menu "Choose splashscreen." 22 76 16)
    __ERRMSGS=""
    __INFMSGS=""
    choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)    
    splashdir=${dirlist[$choices]}
    if [ "$choices" != "" ]; then
        rm /etc/splashscreen.list
        find $scriptdir/supplementary/splashscreens/$splashdir/ -type f | sort | while read line; do
            echo $line >> /etc/splashscreen.list
        done
        dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Splashscreen set to '$splashdir'." 20 60  
    else
        break
    fi
}

function rps_retronetplaysetup()
{
    ipaddress_int=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
    ipaddress_ext=$(curl http://ipecho.net/plain; echo)
    while true; do
        cmd=(dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --menu "Configure RetroArch Netplay.\nInternal IP: $ipaddress_int\nExternal IP: $ipaddress_ext" 22 76 16)
        options=(1 "(E)nable/(D)isable RetroArch Netplay. Currently: $__netplayenable" 
                 2 "Set mode, (H)ost or (C)lient. Currently: $__netplaymode" 
                 3 "Set port. Currently: $__netplayport" 
                 4 "Set host IP address (for client mode). Currently: $__netplayhostip"
                 5 "Set delay frames. Currently: $__netplayframes" )
        choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)    
        if [ "$choices" != "" ]; then
            case $choices in
                 1) rps_retronet_enable ;;
                 2) rps_retronet_mode ;;
                 3) rps_retronet_port ;;
                 4) rps_retronet_hostip ;;
                 5) rps_retronet_frames ;;
            esac
        else
            break
        fi
    done    
}

function rps_retronet_enable()
{
    cmd=(dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --menu "Enable or disable RetroArch's Netplay mode." 22 76 16)
    options=(1 "ENABLE netplay" 
             2 "DISABLE netplay" )
    choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)    
    if [ "$choices" != "" ]; then
        case $choices in
             1) __netplayenable="E" 
                ;;
             2) __netplayenable="D" 
                ;;
        esac
        rps_retronet_saveconfig
        sup_generate_esconfig
    fi
}

function rps_retronet_mode()
{
    cmd=(dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --menu "Please set the netplay mode." 22 76 16)
    options=(1 "Set as HOST" 
             2 "Set as CLIENT" )
    choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)    
    if [ "$choices" != "" ]; then
        case $choices in
             1) __netplaymode="H" 
                __netplayhostip_cfile=""
                ;;
             2) __netplaymode="C" 
                __netplayhostip_cfile="$__netplayhostip"
                ;;
        esac
        rps_retronet_saveconfig
        sup_generate_esconfig
    fi
}

function rps_retronet_port()
{
    cmd=(dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --inputbox "Please enter the port to be used for netplay (default: 55435)." 22 76 $__netplayport)
    choices=$("${cmd[@]}" 2>&1 >/dev/tty)    
    if [ "$choices" != "" ]; then
        __netplayport=$choices
        rps_retronet_saveconfig
        sup_generate_esconfig
    fi  
}

function rps_retronet_hostip()
{
    cmd=(dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --inputbox "Please enter the IP address of the host." 22 76 $__netplayhostip)
    choices=$("${cmd[@]}" 2>&1 >/dev/tty)    
    if [ "$choices" != "" ]; then
        __netplayhostip=$choices
        if [[ $__netplaymode == "H" ]]; then
            __netplayhostip_cfile=""
        else
            __netplayhostip_cfile="$__netplayhostip"
        fi
        rps_retronet_saveconfig
        sup_generate_esconfig
    fi  
}

function rps_retronet_frames()
{
    cmd=(dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --inputbox "Please enter the number of delay frames for netplay (default: 15)." 22 76 $__netplayframes)
    choices=$("${cmd[@]}" 2>&1 >/dev/tty)    
    if [ "$choices" != "" ]; then
        __netplayframes=$choices
        rps_retronet_saveconfig
        sup_generate_esconfig
    fi  
}

function rps_retronet_saveconfig()
{
    echo -e "__netplayenable=\"$__netplayenable\"\n__netplaymode=\"$__netplaymode\"\n__netplayport=\"$__netplayport\"\n__netplayhostip=\"$__netplayhostip\"\n__netplayhostip_cfile=\"$__netplayhostip_cfile\"\n__netplayframes=\"$__netplayframes\"" > $scriptdir/configs/retronetplay.cfg
}
