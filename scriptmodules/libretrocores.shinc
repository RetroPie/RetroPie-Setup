#!/bin/bash

#  RetroPie-Setup - Shell script for initializing Raspberry Pi 
#  with RetroArch, various cores, and EmulationStation (a graphical 
#  front end).
# 
#  (c) Copyright 2012-2013  Florian MÃ¼ller (contact@petrockblock.com)
# 
#  RetroPie-Setup homepage: https://github.com/petrockblog/RetroPie-Setup
# 
#  Permission to use, copy, modify and distribute RetroPie-Setup in both binary and
#  source form, for non-commercial purposes, is hereby granted without fee,
#  providing that this license information and copyright notice appear with
#  all copies and any derived work.
# 
#  This software is provided 'as-is', without any express or implied
#  warranty. In no event shall the authors be held liable for any damages
#  arising from the use of this software.
# 
#  RetroPie-Setup is freeware for PERSONAL USE only. Commercial users should
#  seek permission of the copyright holders first. Commercial use includes
#  charging money for RetroPie-Setup or software derived from RetroPie-Setup.
# 
#  The copyright holders request that bug fixes and improvements to the code
#  should be forwarded to them so everyone can benefit from the modifications
#  in future versions.
# 
#  Many, many thanks go to all people that provide the individual packages!!!
# 
#  Raspberry Pi is a trademark of the Raspberry Pi Foundation.
# 

# install Atari 2600 core
function lr_install_atari2600()
{
    printMsg "Installing Atari 2600 RetroArch core (Libretro core)"
    gitPullOrClone "$rootdir/emulatorcores/stella-libretro" git://github.com/libretro/stella-libretro.git
    make clean
    make
    if [[ -z `find $rootdir/emulatorcores/stella-libretro/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Atari 2600 core."
    fi  
    popd    
}

# configure NXEngine / Cave Story core
function lr_configure_cavestory()
{
    if [[ ! -d $rootdir/roms/cavestory ]]; then
        mkdir -p $rootdir/roms/cavestory
    fi
    touch $rootdir/roms/cavestory/Start.txt    
}

# install NXEngine / Cave Story core
function lr_install_cavestory()
{
    printMsg "Installing NXEngine / Cave Story (Libretro core)"
    gitPullOrClone "$rootdir/emulatorcores/nxengine-libretro" git://github.com/libretro/nxengine-libretro.git
    make
    if [[ -z `find $rootdir/emulatorcores/nxengine-libretro/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile NXEngine / Cave Story core."
    else
        lr_configure_cavestory
    fi  
    popd
}

function lr_configure_doom()
{
    mkdir -p $rootdir/roms/doom/
    cp $rootdir/emulatorcores/libretro-prboom/prboom.wad $rootdir/roms/doom/

    # download and install Doom 1 shareware
    if `wget "http://distro.ibiblio.org/pub/linux/distributions/slitaz/sources/packages/d/doom1.wad"`; then
        mv doom1.wad "$rootdir/roms/doom/"
    else
        __ERRMSGS="$__ERRMSGS Could not successfully download and install Doom 1 shareware."
    fi
}

# install Doom WADs emulator core
function lr_install_doom()
{
    printMsg "Installing Doom core (Libretro core)"

    # Download and compile Libretro PRBoom core
    gitPullOrClone "$rootdir/emulatorcores/libretro-prboom" git://github.com/libretro/libretro-prboom.git
    make clean
    make
    if [[ -z `find $rootdir/emulatorcores/libretro-prboom/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Doom core."
    fi  
    popd
    lr_configure_doom
}

# install Game Boy Color emulator core
function lr_install_gbc()
{
    printMsg "Installing Game Boy Color core (Libretro core)"
    gitPullOrClone "$rootdir/emulatorcores/gambatte-libretro" git://github.com/libretro/gambatte-libretro.git
    make -f Makefile.libretro clean
    make -C libgambatte -f Makefile.libretro
    if [[ -z `find $rootdir/emulatorcores/gambatte-libretro/libgambatte/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Game Boy Color core."
    fi      
    popd
}

# install MAME emulator core
function lr_install_mame()
{
    printMsg "Installing MAME core (Libretro core)"
    gitPullOrClone "$rootdir/emulatorcores/imame4all-libretro" git://github.com/libretro/imame4all-libretro.git
    make -f makefile.libretro clean
    make -f makefile.libretro ARM=1
    if [[ -z `find $rootdir/emulatorcores/imame4all-libretro/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile MAME core."
    fi      
    popd
}

# install FBA emulator core
function lr_install_fba()
{
    printMsg "Installing FBA core (Libretro core)"
    gitPullOrClone "$rootdir/emulatorcores/fba-libretro" git://github.com/libretro/fba-libretro.git
    apt-get install -y --force-yes cpp-4.5 gcc-4.5 g++-4.5
    (
        cd $rootdir/emulatorcores/fba-libretro/svn-current/trunk/
        gcc_version 4.5
        make -f makefile.libretro clean
        make -f makefile.libretro -j4 platform=armvhardfloat
        gcc_version 4.6
    )
    mv svn-current/trunk/*libretro*.so $rootdir/emulatorcores/fba-libretro/
    if [[ -z `find $rootdir/emulatorcores/fba-libretro/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile FBA core."
    fi
    popd
}

# install NES emulator core
function lr_install_nes()
{
    printMsg "Installing NES core (Libretro core)"
    gitPullOrClone "$rootdir/emulatorcores/fceu-next" git://github.com/libretro/fceu-next.git
    pushd fceumm-code
    make -f Makefile.libretro clean
    make -f Makefile.libretro
    popd
    if [[ -z `find $rootdir/emulatorcores/fceu-next/fceumm-code/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile NES core."
    fi      
    popd
}

# install Sega Mega Drive/Mastersystem/Game Gear libretro emulator core
function lr_install_megadriveLibretro()
{
    printMsg "Installing Mega Drive/Mastersystem/Game Gear core (Libretro core)"
    gitPullOrClone "$rootdir/emulatorcores/Genesis-Plus-GX" git://github.com/libretro/Genesis-Plus-GX.git
    make -f Makefile.libretro clean
    make -f Makefile.libretro 
    if [[ ! -f `find $rootdir/emulatorcores/Genesis-Plus-GX/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Genesis core."
    fi      
    popd
}

# install Mednafen PC Engine core
function lc_installPCEngine()
{
    printMsg "Installing PC Engine core (Libretro core)"
    gitPullOrClone "$rootdir/emulatorcores/mednafen-pce-libretro/" https://github.com/petrockblog/mednafen-pce-libretro.git
    make clean
    make
    if [[ ! -f `find $rootdir/emulatorcores/mednafen-pce-libretro/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile PC Engine core."
    fi      
    popd
}

# install Megadrive/Genesis emulator core Picodrive
function lr_install_picodrive()
{
    printMsg "Installing Megadrive core picodrive (Libretro core)"
    gitPullOrClone "$rootdir/emulatorcores/picodrive" https://github.com/libretro/picodrive.git
    git submodule init && git submodule update
    make clean
    make -f Makefile.libretro platform=armv6    
    if [[ ! -f `find $rootdir/emulatorcores/picodrive/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Genesis core Picodrive."
    fi      
    popd

    wget http://projectmd.mdscene.net/download/projmd-20120429.zip
    unzip projmd-20120429.zip
    if [[ ! -f $rootdir/roms/megadrive/projmd-20120429.bin ]]; then
        cp ./projmd-20120429/projmd-20120429.bin $rootdir/roms/megadrive/
    fi
    rm -rf projmd-20120429    
    rm projmd-20120429.zip  
}

# install Playstation emulator core
function lr_install_psx()
{
    printMsg "Installing PCSX core (Libretro core)"
    gitPullOrClone "$rootdir/emulatorcores/pcsx_rearmed" git://github.com/libretro/pcsx_rearmed.git
    ./configure --platform=libretro
    make clean
    make
    if [[ -z `find $rootdir/emulatorcores/pcsx_rearmed/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Playstation core."
    fi      
    popd
}

# install SNES emulator core
function lr_install_snes()
{
    printMsg "Installing SNES core (Libretro core)"
    gitPullOrClone "$rootdir/emulatorcores/pocketsnes-libretro" git://github.com/ToadKing/pocketsnes-libretro.git
    patch -N -i $scriptdir/supplementary/pocketsnesmultip.patch $rootdir/emulatorcores/pocketsnes-libretro/src/ppu.cpp
    make clean
    make
    if [[ -z `find $rootdir/emulatorcores/pocketsnes-libretro/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile SNES core."
    fi      
    popd
}

# configure SNES emulator core settings
function lr_configure_snes()
{
    printMsg "Configuring SNES core"

    # DISABLE rewind feature for SNES core due to the speed decrease
    ensureKeyValue "rewind_enable" "false" "$rootdir/configs/snes/retroarch.cfg"
}

