#
#  (c) Copyright 2012-2014  Florian MÃ¼ller (contact@petrockblock.com)
#
#  RetroPie-Setup homepage: https://github.com/petrockblog/RetroPie-Setup
#
#  Permission to use, copy, modify and distribute this work in both binary and
#  source form, for non-commercial purposes, is hereby granted without fee,
#  providing that this license information and copyright notice appear with
#  all copies and any derived work.
#
#  This software is provided 'as-is', without any express or implied
#  warranty. In no event shall the authors be held liable for any damages
#  arising from the use of this software.
#
#  RetroPie-Setup is freeware for PERSONAL USE only. Commercial users should
#  seek permission of the copyright holders first. Commercial use includes
#  charging money for RetroPie-Setup or software derived from RetroPie-Setup.
#
#  The copyright holders request that bug fixes and improvements to the code
#  should be forwarded to them so everyone can benefit from the modifications
#  in future versions.
#
#  Many, many thanks go to all people that provide the individual packages!!!
#

# SNES emulator Pocketsnes -------------------------------------------------
function sources_pocketsnes() {
    gitPullOrClone "$rootdir/emulatorcores/pocketsnes-libretro" git://github.com/ToadKing/pocketsnes-libretro.git
    pushd "$rootdir/emulatorcores/pocketsnes-libretro"
    patch -N -i $scriptdir/supplementary/pocketsnesmultip.patch $rootdir/emulatorcores/pocketsnes-libretro/src/ppu.cpp
    popd
}

function build_pocketsnes() {
    pushd "$rootdir/emulatorcores/pocketsnes-libretro"
    make clean
    make
    if [[ -z `find $rootdir/emulatorcores/pocketsnes-libretro/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile SNES core."
    fi
    popd
}

function configure_pocketsnes() {
    mkdir -p $romdir/snes

    # # look for existing configuration
    # xmlstarlet sel -t -c "/systemList/system[name='snes']" -n -v test.xml

    # # delete system
    # xmlstarlet ed -d "/systemList/system[name='snes']" -n test.xml

    # # add new system
    # xml ed -s /config -t elem -n sub -v "" -i /config/sub -t attr -n class -v com.foo test.xml

    # # append to system
    # xmlstarlet ed -a '/xml/block/el[@name="b"]' \
    #           --type 'elem' -n 'el' -v 0
}

# Picodrive -----------------------------

function sources_picodrive() {
    gitPullOrClone "$rootdir/emulatorcores/picodrive" https://github.com/libretro/picodrive.git
    pushd "$rootdir/emulatorcores/picodrive"
    git submodule init && git submodule update
    popd
}

function build_picodrive() {
    pushd "$rootdir/emulatorcores/picodrive"
    make clean
    make -f Makefile.libretro platform=armv6
    if [[ ! -f `find $rootdir/emulatorcores/picodrive/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Genesis core Picodrive."
    fi
    popd
}

function configure_picodrive() {
    mkdir -p $romdir/megadrive
    mkdir -p $romdir/mastersystem
    mkdir -p $romdir/segacd
    mkdir -p $romdir/sega32x
}

function sources_stellalibretro() {
    gitPullOrClone "$rootdir/emulatorcores/stella-libretro" git://github.com/libretro/stella-libretro.git
}

function build_stellalibretro() {
    pushd "$rootdir/emulatorcores/stella-libretro"
    make clean
    make
    if [[ -z `find $rootdir/emulatorcores/stella-libretro/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Atari 2600 core."
    fi
    popd
}

function configure_stellalibretro() {
    mkdir -p $romdir/atari2600
}

function sources_cavestory() {
    gitPullOrClone "$rootdir/emulatorcores/nxengine-libretro" git://github.com/libretro/nxengine-libretro.git
}

function build_cavestory() {
    pushd "$rootdir/emulatorcores/nxengine-libretro"
    make
    if [[ -z `find $rootdir/emulatorcores/nxengine-libretro/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile NXEngine / Cave Story core."
    fi
    popd
}

function configure_cavestory() {
    if [[ ! -d $romdir/ports ]]; then
        mkdir -p $romdir/ports
    fi
    cat > "$romdir/ports/Cave Story.sh" << _EOF_
#!/bin/bash
$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/nxengine-libretro/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/cavestory/retroarch.cfg $rootdir/emulatorcores/nxengine-libretro/datafiles/Doukutsu.exe"
_EOF_
    chmod +x "$romdir/ports/Cave Story.sh"
    chown -R $user:$user "$rootdir/emulatorcores/nxengine-libretro/datafiles/"
}

function sources_doom() {
    gitPullOrClone "$rootdir/emulatorcores/libretro-prboom" git://github.com/libretro/libretro-prboom.git
}

function build_doom() {
    pushd "$rootdir/emulatorcores/libretro-prboom"
    make clean
    make
    if [[ -z `find $rootdir/emulatorcores/libretro-prboom/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Doom core."
    fi
    popd
}

function configure_doom() {
    mkdir -p $romdir/ports/doom
    cp $rootdir/emulatorcores/libretro-prboom/prboom.wad $romdir/ports/doom

    cat > "$romdir/ports/Doom 1 Shareware.sh" << _EOF_
#!/bin/bash
$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/libretro-prboom/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/doom/retroarch.cfg $romdir/ports/doom/doom1.wad"
_EOF_
    chmod +x "$romdir/ports/Doom 1 Shareware.sh"

    # download and install Doom 1 shareware
    if `wget "http://distro.ibiblio.org/pub/linux/distributions/slitaz/sources/packages/d/doom1.wad"`; then
        mv doom1.wad "$romdir/ports/doom/"
    else
        __ERRMSGS="$__ERRMSGS Could not successfully download and install Doom 1 shareware."
    fi
    # download and install midi instruments
    pushd /usr/local/lib
    if `wget "http://www.libsdl.org/projects/SDL_mixer/timidity/timidity.tar.gz"`; then
    tar -xf timidity.tar.gz
        ln -s /usr/local/lib/timidity/timidity.cfg /etc/timidity.cfg
    else
        echo error
    fi
    popd
}

function sources_gbclibretro() {
    gitPullOrClone "$rootdir/emulatorcores/gambatte-libretro" git://github.com/libretro/gambatte-libretro.git
}

function build_gbclibretro() {
    pushd "$rootdir/emulatorcores/gambatte-libretro"
    make -f Makefile.libretro clean
    make -C libgambatte -f Makefile.libretro
    if [[ -z `find $rootdir/emulatorcores/gambatte-libretro/libgambatte/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Game Boy Color core."
    fi
    popd
}

function configure_gbclibretro() {
    mkdir -p $romdir/gbc
    mkdir -p $romdir/gb
}

function sources_mamelibretro() {
    gitPullOrClone "$rootdir/emulatorcores/imame4all-libretro" git://github.com/libretro/imame4all-libretro.git
}

function build_mamelibretro() {
    pushd "$rootdir/emulatorcores/imame4all-libretro"
    make -f makefile.libretro clean
    make -f makefile.libretro ARM=1
    if [[ -z `find $rootdir/emulatorcores/imame4all-libretro/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile MAME core."
    fi
    popd
}

function configure_mamelibretro() {
    mkdir -p $romdir/mame
}

function depen_fbalibretro() {
    aptInstall --force-yes cpp-4.5 gcc-4.5 g++-4.5
}

function sources_fbalibretro() {
    gitPullOrClone "$rootdir/emulatorcores/fba-libretro" git://github.com/libretro/fba-libretro.git
}

function build_fbalibretro() {
    pushd "$rootdir/emulatorcores/fba-libretro"
    cd $rootdir/emulatorcores/fba-libretro/svn-current/trunk/
    make -f makefile.libretro clean
    make -f makefile.libretro CC="gcc-4.5" -j4 platform=armvhardfloat
    mv svn-current/trunk/*libretro*.so $rootdir/emulatorcores/fba-libretro/
    if [[ -z `find $rootdir/emulatorcores/fba-libretro/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile FBA core."
    fi
    popd
}

function configure_fbalibretro() {
    mkdir -p $romdir/fba
}

function sources_neslibretro() {
    gitPullOrClone "$rootdir/emulatorcores/fceu-next" git://github.com/libretro/fceu-next.git
}

function build_neslibretro() {
    pushd "$rootdir/emulatorcores/fceu-next/fceumm-code"
    make -f Makefile.libretro clean
    make -f Makefile.libretro
    popd
    if [[ -z `find $rootdir/emulatorcores/fceu-next/fceumm-code/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile NES core."
    fi
    popd
}

function configure_neslibretro() {
    mkdir -p $romdir/nes
}

function sources_genesislibretro() {
    gitPullOrClone "$rootdir/emulatorcores/Genesis-Plus-GX" git://github.com/libretro/Genesis-Plus-GX.git
}

function build_genesislibretro() {
    pushd "$rootdir/emulatorcores/Genesis-Plus-GX"
    make -f Makefile.libretro clean
    make -f Makefile.libretro
    if [[ ! -f `find $rootdir/emulatorcores/Genesis-Plus-GX/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Genesis core."
    fi
    popd
}

function configure_genesislibretro() {
    mkdir -p $romdir/megadrive
}

function sources_turbografx16() {
    gitPullOrClone "$rootdir/emulatorcores/mednafen-pce-libretro/" https://github.com/petrockblog/mednafen-pce-libretro.git
}

function build_turbografx16() {
    pushd "$rootdir/emulatorcores/mednafen-pce-libretro/"
    make clean
    make
    if [[ ! -f `find $rootdir/emulatorcores/mednafen-pce-libretro/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile PC Engine core."
    fi
    popd
}

function configure_turbografx16() {
    mkdir -p $romdir/pcengine
}

function sources_psxlibretro() {
    gitPullOrClone "$rootdir/emulatorcores/pcsx_rearmed" git://github.com/libretro/pcsx_rearmed.git
}

function build_psxlibretro() {
    pushd "$rootdir/emulatorcores/pcsx_rearmed"
    ./configure --platform=libretro
    make clean
    make
    if [[ -z `find $rootdir/emulatorcores/pcsx_rearmed/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Playstation core."
    fi
    popd
}

function configure_psxlibretro() {
    mkdir -p $romdir/psx
}

function sources_mednafenpcefast() {
    gitPullOrClone "$rootdir/emulatorcores/mednafenpcefast" https://github.com/libretro/beetle-pce-fast-libretro.git
}

function build_mednafenpcefast() {
    pushd "$rootdir/emulatorcores/mednafenpcefast"
    make
     if [[ -z `find $rootdir/emulatorcores/mednafenpcefast/ -name "*libretro*.so"` ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Mednafen PCE Fast core."
    fi
    popd
}

function configure_mednafenpcefast() {
    mkdir -p $romdir/pcengine
}
