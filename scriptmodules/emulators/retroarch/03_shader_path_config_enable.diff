diff --git a/configuration.c b/configuration.c
index c339e9eb63..b2a49a17ff 100644
--- a/configuration.c
+++ b/configuration.c
@@ -1214,6 +1214,8 @@ static struct config_path_setting *populate_settings_path(settings_t *settings,
          settings->paths.path_core_options, false, NULL, true);
    SETTING_PATH("libretro_info_path",
          settings->paths.path_libretro_info, false, NULL, true);
+   SETTING_PATH("video_shader",
+          settings->paths.path_shader, false, NULL, true);
    SETTING_PATH("content_database_path",
          settings->paths.path_content_database, false, NULL, true);
    SETTING_PATH("cheat_database_path",
@@ -2238,6 +2240,7 @@ void config_set_defaults(void *data)
    *settings->paths.path_content_image_history   = '\0';
    *settings->paths.path_content_video_history   = '\0';
    *settings->paths.path_cheat_settings    = '\0';
+   *settings->paths.path_shader   = '\0';
 #ifndef IOS
    *settings->arrays.bundle_assets_src = '\0';
    *settings->arrays.bundle_assets_dst = '\0';
@@ -4117,6 +4120,10 @@ bool config_save_overrides(int override_type)
 
       for (i = 0; i < (unsigned)path_settings_size; i++)
       {
+         /* blacklist video_shader, better handled by shader presets*/
+         if (string_is_equal(path_settings[i].ident, "video_shader"))
+            continue;
+
          if (!string_is_equal(path_settings[i].ptr, path_overrides[i].ptr))
             config_set_path(conf, path_overrides[i].ident,
                   path_overrides[i].ptr);
diff --git a/configuration.h b/configuration.h
index 12aa7d446e..804b2e7820 100644
--- a/configuration.h
+++ b/configuration.h
@@ -686,6 +686,7 @@ typedef struct settings
       char path_libretro_info[PATH_MAX_LENGTH];
       char path_cheat_settings[PATH_MAX_LENGTH];
       char path_font[PATH_MAX_LENGTH];
+      char path_shader[PATH_MAX_LENGTH];
       char path_rgui_theme_preset[PATH_MAX_LENGTH];
 
       char directory_audio_filter[PATH_MAX_LENGTH];
diff --git a/retroarch.c b/retroarch.c
index d6ae484ca2..308c6e97ad 100644
--- a/retroarch.c
+++ b/retroarch.c
@@ -26359,6 +26359,7 @@ static bool retroarch_load_shader_preset_internal(
 {
    unsigned i;
    char *shader_path = (char*)malloc(PATH_MAX_LENGTH);
+   settings_t *settings = configuration_settings;
 
    static enum rarch_shader_type types[] =
    {
@@ -26386,11 +26387,13 @@ static bool retroarch_load_shader_preset_internal(
          if (string_is_empty(special_name))
             break;
 
-         fill_pathname_join(shader_path, shader_directory, special_name, PATH_MAX_LENGTH);
-         strlcat(shader_path,
-               video_shader_get_preset_extension(types[i]),
-               PATH_MAX_LENGTH);
-      }
+         if (strcmp(special_name, "config")!=0) {
+            fill_pathname_join(shader_path, shader_directory, special_name, PATH_MAX_LENGTH);
+            strlcat(shader_path, video_shader_get_preset_extension(types[i]), PATH_MAX_LENGTH);
+         } else {
+             strlcpy(shader_path, settings->paths.path_shader, PATH_MAX_LENGTH);
+         }
+       }
 
       if (!path_is_valid(shader_path))
          continue;
@@ -26414,6 +26417,7 @@ static bool retroarch_load_shader_preset_internal(
  * Tries to load a supported core-, game-, folder-specific or global
  * shader preset from its respective location:
  *
+ * config:          preset from the configuration file
  * global:          $SHADER_DIR/presets/global.$PRESET_EXT
  * core-specific:   $SHADER_DIR/presets/$CORE_NAME/$CORE_NAME.$PRESET_EXT
  * folder-specific: $SHADER_DIR/presets/$CORE_NAME/$FOLDER_NAME.$PRESET_EXT
@@ -26487,6 +26491,13 @@ static bool retroarch_load_shader_preset(void)
       goto success;
    }
 
+   if (retroarch_load_shader_preset_internal(shader_directory, NULL,
+         "config"))
+   {
+      RARCH_LOG("[Shaders]: configuration file shader preset found.\n");
+      goto success;
+   }
+
    free(shader_directory);
    return false;
 
