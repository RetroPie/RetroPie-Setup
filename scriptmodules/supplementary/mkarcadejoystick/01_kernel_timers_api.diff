diff --git a/mk_arcade_joystick_rpi.c b/mk_arcade_joystick_rpi.c
index 5a50d8f..13f88e2 100755
--- a/mk_arcade_joystick_rpi.c
+++ b/mk_arcade_joystick_rpi.c
@@ -35,6 +35,7 @@
 #include <linux/slab.h>
 
 #include <linux/ioport.h>
+#include <linux/version.h>
 #include <asm/io.h>
 
 
@@ -108,6 +109,10 @@ MODULE_LICENSE("GPL");
 
 #define CLEAR_STATUS	BSC_S_CLKT|BSC_S_ERR|BSC_S_DONE
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,15,0)
+#define HAVE_TIMER_SETUP
+#endif
+
 static volatile unsigned *gpio;
 static volatile unsigned *bsc1;
 
@@ -365,9 +370,13 @@ static void mk_process_packet(struct mk *mk) {
 /*
  * mk_timer() initiates reads of console pads data.
  */
-
+#ifdef HAVE_TIMER_SETUP
+static void mk_timer(struct timer_list *t) {
+    struct mk *mk = from_timer(mk, t, timer);
+#else
 static void mk_timer(unsigned long private) {
     struct mk *mk = (void *) private;
+#endif
     mk_process_packet(mk);
     mod_timer(&mk->timer, jiffies + MK_REFRESH_TIME);
 }
@@ -545,7 +554,11 @@ static struct mk __init *mk_probe(int *pads, int n_pads) {
     }
 
     mutex_init(&mk->mutex);
+    #ifdef HAVE_TIMER_SETUP
+    timer_setup(&mk->timer, mk_timer, 0);
+    #else
     setup_timer(&mk->timer, mk_timer, (long) mk);
+    #endif
 
     for (i = 0; i < n_pads && i < MK_MAX_DEVICES; i++) {
         if (!pads[i])
