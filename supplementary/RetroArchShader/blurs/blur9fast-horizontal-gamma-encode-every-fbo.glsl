// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _blur_dxdy;
COMPAT_VARYING     vec2 _tex_uv1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec2 _tex_uv1;
    vec2 _blur_dxdy;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _dxdy_scale;
    vec2 _dxdy;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _dxdy_scale = InputSize/OutputSize;
    _dxdy = _dxdy_scale/TextureSize;
    _OUT._blur_dxdy = vec2(_dxdy.x, 0.00000000E+00);
    _ret_0._position1 = _r0006;
    _ret_0._tex_uv1 = TexCoord.xy;
    _ret_0._blur_dxdy = _OUT._blur_dxdy;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    TEX1.xy = _OUT._blur_dxdy;
    return;
    TEX0.xy = _ret_0._tex_uv1;
    TEX1.xy = _ret_0._blur_dxdy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _blur_dxdy;
COMPAT_VARYING     vec2 _tex_uv1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _tex_uv1;
    vec2 _blur_dxdy;
};
vec4 _ret_0;
vec3 _TMP1;
float _TMP9;
float _TMP8;
float _TMP7;
vec4 _TMP10;
vec3 _TMP12;
uniform sampler2D Texture;
vec3 _TMP19;
float _weight_sum_inv0022;
float _w120022;
float _w340022;
float _w12_ratio0022;
float _w34_ratio0022;
vec3 _sum0022;
float _TMP23;
float _TMP27;
float _TMP31;
float _TMP35;
vec4 _TMP39;
vec2 _tex_coords0040;
vec4 _TMP57;
vec2 _tex_coords0058;
vec4 _TMP75;
vec4 _TMP93;
vec2 _tex_coords0094;
vec4 _TMP111;
vec2 _tex_coords0112;
vec4 _color0130;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _TMP23 = pow(2.71828198E+00, -1.62647530E-01);
    _TMP27 = pow(2.71828198E+00, -6.50590122E-01);
    _TMP31 = pow(2.71828198E+00, -1.46382773E+00);
    _TMP35 = pow(2.71828198E+00, -2.60236049E+00);
    _weight_sum_inv0022 = 1.00000000E+00/(1.00000000E+00 + 2.00000000E+00*(_TMP23 + _TMP27 + _TMP31 + _TMP35));
    _w120022 = _TMP23 + _TMP27;
    _w340022 = _TMP31 + _TMP35;
    _w12_ratio0022 = _TMP27/_w120022;
    _w34_ratio0022 = _TMP35/_w340022;
    _tex_coords0040 = TEX0.xy - (3.00000000E+00 + _w34_ratio0022)*TEX1.xy;
    _TMP10 = COMPAT_TEXTURE(Texture, _tex_coords0040);
    _TMP7 = pow(_TMP10.x, 2.20000005E+00);
    _TMP8 = pow(_TMP10.y, 2.20000005E+00);
    _TMP9 = pow(_TMP10.z, 2.20000005E+00);
    _TMP12 = vec3(_TMP7, _TMP8, _TMP9);
    _TMP39 = vec4(_TMP12.x, _TMP12.y, _TMP12.z, _TMP10.w);
    _sum0022 = _w340022*_TMP39.xyz;
    _tex_coords0058 = TEX0.xy - (1.00000000E+00 + _w12_ratio0022)*TEX1.xy;
    _TMP10 = COMPAT_TEXTURE(Texture, _tex_coords0058);
    _TMP7 = pow(_TMP10.x, 2.20000005E+00);
    _TMP8 = pow(_TMP10.y, 2.20000005E+00);
    _TMP9 = pow(_TMP10.z, 2.20000005E+00);
    _TMP12 = vec3(_TMP7, _TMP8, _TMP9);
    _TMP57 = vec4(_TMP12.x, _TMP12.y, _TMP12.z, _TMP10.w);
    _sum0022 = _sum0022 + _w120022*_TMP57.xyz;
    _TMP10 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP7 = pow(_TMP10.x, 2.20000005E+00);
    _TMP8 = pow(_TMP10.y, 2.20000005E+00);
    _TMP9 = pow(_TMP10.z, 2.20000005E+00);
    _TMP12 = vec3(_TMP7, _TMP8, _TMP9);
    _TMP75 = vec4(_TMP12.x, _TMP12.y, _TMP12.z, _TMP10.w);
    _sum0022 = _sum0022 + _TMP75.xyz;
    _tex_coords0094 = TEX0.xy + (1.00000000E+00 + _w12_ratio0022)*TEX1.xy;
    _TMP10 = COMPAT_TEXTURE(Texture, _tex_coords0094);
    _TMP7 = pow(_TMP10.x, 2.20000005E+00);
    _TMP8 = pow(_TMP10.y, 2.20000005E+00);
    _TMP9 = pow(_TMP10.z, 2.20000005E+00);
    _TMP12 = vec3(_TMP7, _TMP8, _TMP9);
    _TMP93 = vec4(_TMP12.x, _TMP12.y, _TMP12.z, _TMP10.w);
    _sum0022 = _sum0022 + _w120022*_TMP93.xyz;
    _tex_coords0112 = TEX0.xy + (3.00000000E+00 + _w34_ratio0022)*TEX1.xy;
    _TMP10 = COMPAT_TEXTURE(Texture, _tex_coords0112);
    _TMP7 = pow(_TMP10.x, 2.20000005E+00);
    _TMP8 = pow(_TMP10.y, 2.20000005E+00);
    _TMP9 = pow(_TMP10.z, 2.20000005E+00);
    _TMP12 = vec3(_TMP7, _TMP8, _TMP9);
    _TMP111 = vec4(_TMP12.x, _TMP12.y, _TMP12.z, _TMP10.w);
    _sum0022 = _sum0022 + _w340022*_TMP111.xyz;
    _TMP19 = _sum0022*_weight_sum_inv0022;
    _color0130 = vec4(_TMP19.x, _TMP19.y, _TMP19.z, 1.00000000E+00);
    _TMP7 = pow(_color0130.x, 4.54545438E-01);
    _TMP8 = pow(_color0130.y, 4.54545438E-01);
    _TMP9 = pow(_color0130.z, 4.54545438E-01);
    _TMP1 = vec3(_TMP7, _TMP8, _TMP9);
    _ret_0 = vec4(_TMP1.x, _TMP1.y, _TMP1.z, _color0130.w);
    FragColor = _ret_0;
    return;
} 
#endif
