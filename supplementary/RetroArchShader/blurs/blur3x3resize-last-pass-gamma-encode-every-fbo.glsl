// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _blur_dxdy;
COMPAT_VARYING     vec2 _tex_uv1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec2 _tex_uv1;
    vec2 _blur_dxdy;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _dxdy_scale;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _dxdy_scale = InputSize/OutputSize;
    _OUT._blur_dxdy = _dxdy_scale/TextureSize;
    _ret_0._position1 = _r0006;
    _ret_0._tex_uv1 = TexCoord.xy;
    _ret_0._blur_dxdy = _OUT._blur_dxdy;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    TEX1.xy = _OUT._blur_dxdy;
    return;
    TEX0.xy = _ret_0._tex_uv1;
    TEX1.xy = _ret_0._blur_dxdy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _blur_dxdy;
COMPAT_VARYING     vec2 _tex_uv1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _tex_uv1;
    vec2 _blur_dxdy;
};
vec4 _ret_0;
vec3 _TMP1;
float _TMP15;
float _TMP14;
float _TMP13;
float _TMP12;
float _TMP11;
vec4 _TMP16;
vec3 _TMP18;
uniform sampler2D Texture;
vec3 _TMP25;
vec2 _dx0028;
vec2 _dy0028;
vec2 _sample1_uv0028;
vec2 _sample7_uv0028;
float _weight_sum_inv0028;
vec3 _sum0028;
vec4 _TMP29;
vec2 _tex_coords0030;
vec4 _TMP47;
vec4 _TMP65;
vec2 _tex_coords0066;
vec4 _TMP83;
vec2 _tex_coords0084;
vec4 _TMP101;
vec4 _TMP119;
vec2 _tex_coords0120;
vec4 _TMP137;
vec2 _tex_coords0138;
vec4 _TMP155;
vec4 _TMP173;
vec2 _tex_coords0174;
float _TMP193;
float _x0194;
float _TMP199;
float _x0200;
vec4 _color0204;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _dx0028 = vec2(TEX1.x, 0.00000000E+00);
    _dy0028 = vec2(0.00000000E+00, TEX1.y);
    _sample1_uv0028 = TEX0.xy - _dy0028;
    _sample7_uv0028 = TEX0.xy + _dy0028;
    _tex_coords0030 = _sample1_uv0028 - _dx0028;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0030);
    _TMP13 = pow(_TMP16.x, 2.20000005E+00);
    _TMP14 = pow(_TMP16.y, 2.20000005E+00);
    _TMP15 = pow(_TMP16.z, 2.20000005E+00);
    _TMP18 = vec3(_TMP13, _TMP14, _TMP15);
    _TMP29 = vec4(_TMP18.x, _TMP18.y, _TMP18.z, _TMP16.w);
    _TMP16 = COMPAT_TEXTURE(Texture, _sample1_uv0028);
    _TMP13 = pow(_TMP16.x, 2.20000005E+00);
    _TMP14 = pow(_TMP16.y, 2.20000005E+00);
    _TMP15 = pow(_TMP16.z, 2.20000005E+00);
    _TMP18 = vec3(_TMP13, _TMP14, _TMP15);
    _TMP47 = vec4(_TMP18.x, _TMP18.y, _TMP18.z, _TMP16.w);
    _tex_coords0066 = _sample1_uv0028 + _dx0028;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0066);
    _TMP13 = pow(_TMP16.x, 2.20000005E+00);
    _TMP14 = pow(_TMP16.y, 2.20000005E+00);
    _TMP15 = pow(_TMP16.z, 2.20000005E+00);
    _TMP18 = vec3(_TMP13, _TMP14, _TMP15);
    _TMP65 = vec4(_TMP18.x, _TMP18.y, _TMP18.z, _TMP16.w);
    _tex_coords0084 = TEX0.xy - _dx0028;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0084);
    _TMP13 = pow(_TMP16.x, 2.20000005E+00);
    _TMP14 = pow(_TMP16.y, 2.20000005E+00);
    _TMP15 = pow(_TMP16.z, 2.20000005E+00);
    _TMP18 = vec3(_TMP13, _TMP14, _TMP15);
    _TMP83 = vec4(_TMP18.x, _TMP18.y, _TMP18.z, _TMP16.w);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP13 = pow(_TMP16.x, 2.20000005E+00);
    _TMP14 = pow(_TMP16.y, 2.20000005E+00);
    _TMP15 = pow(_TMP16.z, 2.20000005E+00);
    _TMP18 = vec3(_TMP13, _TMP14, _TMP15);
    _TMP101 = vec4(_TMP18.x, _TMP18.y, _TMP18.z, _TMP16.w);
    _tex_coords0120 = TEX0.xy + _dx0028;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0120);
    _TMP13 = pow(_TMP16.x, 2.20000005E+00);
    _TMP14 = pow(_TMP16.y, 2.20000005E+00);
    _TMP15 = pow(_TMP16.z, 2.20000005E+00);
    _TMP18 = vec3(_TMP13, _TMP14, _TMP15);
    _TMP119 = vec4(_TMP18.x, _TMP18.y, _TMP18.z, _TMP16.w);
    _tex_coords0138 = _sample7_uv0028 - _dx0028;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0138);
    _TMP13 = pow(_TMP16.x, 2.20000005E+00);
    _TMP14 = pow(_TMP16.y, 2.20000005E+00);
    _TMP15 = pow(_TMP16.z, 2.20000005E+00);
    _TMP18 = vec3(_TMP13, _TMP14, _TMP15);
    _TMP137 = vec4(_TMP18.x, _TMP18.y, _TMP18.z, _TMP16.w);
    _TMP16 = COMPAT_TEXTURE(Texture, _sample7_uv0028);
    _TMP13 = pow(_TMP16.x, 2.20000005E+00);
    _TMP14 = pow(_TMP16.y, 2.20000005E+00);
    _TMP15 = pow(_TMP16.z, 2.20000005E+00);
    _TMP18 = vec3(_TMP13, _TMP14, _TMP15);
    _TMP155 = vec4(_TMP18.x, _TMP18.y, _TMP18.z, _TMP16.w);
    _tex_coords0174 = _sample7_uv0028 + _dx0028;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0174);
    _TMP13 = pow(_TMP16.x, 2.20000005E+00);
    _TMP14 = pow(_TMP16.y, 2.20000005E+00);
    _TMP15 = pow(_TMP16.z, 2.20000005E+00);
    _TMP18 = vec3(_TMP13, _TMP14, _TMP15);
    _TMP173 = vec4(_TMP18.x, _TMP18.y, _TMP18.z, _TMP16.w);
    _TMP11 = dot(vec2( 1.00000000E+00, 0.00000000E+00), vec2( 1.00000000E+00, 0.00000000E+00));
    _x0194 = -_TMP11*1.27322698E+00;
    _TMP193 = pow(2.71828198E+00, _x0194);
    _TMP12 = dot(vec2( 1.00000000E+00, 1.00000000E+00), vec2( 1.00000000E+00, 1.00000000E+00));
    _x0200 = -_TMP12*1.27322698E+00;
    _TMP199 = pow(2.71828198E+00, _x0200);
    _weight_sum_inv0028 = 1.00000000E+00/(1.00000000E+00 + 4.00000000E+00*(_TMP193 + _TMP199));
    _sum0028 = _TMP101.xyz + _TMP193*(_TMP47.xyz + _TMP83.xyz + _TMP119.xyz + _TMP155.xyz) + _TMP199*(_TMP29.xyz + _TMP65.xyz + _TMP137.xyz + _TMP173.xyz);
    _TMP25 = _sum0028*_weight_sum_inv0028;
    _color0204 = vec4(_TMP25.x, _TMP25.y, _TMP25.z, 1.00000000E+00);
    _TMP13 = pow(_color0204.x, 4.54545438E-01);
    _TMP14 = pow(_color0204.y, 4.54545438E-01);
    _TMP15 = pow(_color0204.z, 4.54545438E-01);
    _TMP1 = vec3(_TMP13, _TMP14, _TMP15);
    _ret_0 = vec4(_TMP1.x, _TMP1.y, _TMP1.z, _color0204.w);
    FragColor = _ret_0;
    return;
} 
#endif
