// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _blur_dxdy;
COMPAT_VARYING     vec2 _tex_uv1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec2 _tex_uv1;
    vec2 _blur_dxdy;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _dxdy_scale;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _dxdy_scale = InputSize/OutputSize;
    _OUT._blur_dxdy = _dxdy_scale/TextureSize;
    _ret_0._position1 = _r0006;
    _ret_0._tex_uv1 = TexCoord.xy;
    _ret_0._blur_dxdy = _OUT._blur_dxdy;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    TEX1.xy = _OUT._blur_dxdy;
    return;
    TEX0.xy = _ret_0._tex_uv1;
    TEX1.xy = _ret_0._blur_dxdy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _blur_dxdy;
COMPAT_VARYING     vec2 _tex_uv1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _tex_uv1;
    vec2 _blur_dxdy;
};
vec4 _ret_0;
vec3 _TMP1;
float _TMP15;
float _TMP14;
float _TMP13;
float _TMP12;
float _TMP11;
vec4 _TMP16;
uniform sampler2D Texture;
vec3 _TMP22;
vec2 _dx0025;
vec2 _dy0025;
vec2 _sample1_uv0025;
vec2 _sample7_uv0025;
vec3 _sample00025;
vec3 _sample10025;
vec3 _sample20025;
vec3 _sample30025;
vec3 _sample40025;
vec3 _sample50025;
vec3 _sample60025;
vec3 _sample70025;
float _weight_sum_inv0025;
vec3 _sum0025;
vec2 _tex_coords0027;
vec2 _tex_coords0039;
vec2 _tex_coords0045;
vec2 _tex_coords0057;
vec2 _tex_coords0063;
vec2 _tex_coords0075;
float _TMP82;
float _x0083;
float _TMP88;
float _x0089;
vec4 _color0093;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _dx0025 = vec2(TEX1.x, 0.00000000E+00);
    _dy0025 = vec2(0.00000000E+00, TEX1.y);
    _sample1_uv0025 = TEX0.xy - _dy0025;
    _sample7_uv0025 = TEX0.xy + _dy0025;
    _tex_coords0027 = _sample1_uv0025 - _dx0025;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0027);
    _sample00025 = _TMP16.xyz;
    _TMP16 = COMPAT_TEXTURE(Texture, _sample1_uv0025);
    _sample10025 = _TMP16.xyz;
    _tex_coords0039 = _sample1_uv0025 + _dx0025;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0039);
    _sample20025 = _TMP16.xyz;
    _tex_coords0045 = TEX0.xy - _dx0025;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0045);
    _sample30025 = _TMP16.xyz;
    _TMP16 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _sample40025 = _TMP16.xyz;
    _tex_coords0057 = TEX0.xy + _dx0025;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0057);
    _sample50025 = _TMP16.xyz;
    _tex_coords0063 = _sample7_uv0025 - _dx0025;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0063);
    _sample60025 = _TMP16.xyz;
    _TMP16 = COMPAT_TEXTURE(Texture, _sample7_uv0025);
    _sample70025 = _TMP16.xyz;
    _tex_coords0075 = _sample7_uv0025 + _dx0025;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0075);
    _TMP11 = dot(vec2( 1.00000000E+00, 0.00000000E+00), vec2( 1.00000000E+00, 0.00000000E+00));
    _x0083 = -_TMP11*1.27322698E+00;
    _TMP82 = pow(2.71828198E+00, _x0083);
    _TMP12 = dot(vec2( 1.00000000E+00, 1.00000000E+00), vec2( 1.00000000E+00, 1.00000000E+00));
    _x0089 = -_TMP12*1.27322698E+00;
    _TMP88 = pow(2.71828198E+00, _x0089);
    _weight_sum_inv0025 = 1.00000000E+00/(1.00000000E+00 + 4.00000000E+00*(_TMP82 + _TMP88));
    _sum0025 = _sample40025 + _TMP82*(_sample10025 + _sample30025 + _sample50025 + _sample70025) + _TMP88*(_sample00025 + _sample20025 + _sample60025 + _TMP16.xyz);
    _TMP22 = _sum0025*_weight_sum_inv0025;
    _color0093 = vec4(_TMP22.x, _TMP22.y, _TMP22.z, 1.00000000E+00);
    _TMP13 = pow(_color0093.x, 4.54545438E-01);
    _TMP14 = pow(_color0093.y, 4.54545438E-01);
    _TMP15 = pow(_color0093.z, 4.54545438E-01);
    _TMP1 = vec3(_TMP13, _TMP14, _TMP15);
    _ret_0 = vec4(_TMP1.x, _TMP1.y, _TMP1.z, _color0093.w);
    FragColor = _ret_0;
    return;
} 
#endif
