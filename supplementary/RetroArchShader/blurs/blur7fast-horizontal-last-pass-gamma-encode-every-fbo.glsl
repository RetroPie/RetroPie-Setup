// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _blur_dxdy;
COMPAT_VARYING     vec2 _tex_uv1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec2 _tex_uv1;
    vec2 _blur_dxdy;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _dxdy_scale;
    vec2 _dxdy;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _dxdy_scale = InputSize/OutputSize;
    _dxdy = _dxdy_scale/TextureSize;
    _OUT._blur_dxdy = vec2(_dxdy.x, 0.00000000E+00);
    _ret_0._position1 = _r0006;
    _ret_0._tex_uv1 = TexCoord.xy;
    _ret_0._blur_dxdy = _OUT._blur_dxdy;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    TEX1.xy = _OUT._blur_dxdy;
    return;
    TEX0.xy = _ret_0._tex_uv1;
    TEX1.xy = _ret_0._blur_dxdy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _blur_dxdy;
COMPAT_VARYING     vec2 _tex_uv1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _tex_uv1;
    vec2 _blur_dxdy;
};
vec4 _ret_0;
vec3 _TMP1;
float _TMP8;
float _TMP7;
float _TMP6;
vec4 _TMP9;
vec3 _TMP11;
uniform sampler2D Texture;
vec3 _TMP18;
float _weight_sum_inv0021;
float _w010021;
float _w230021;
float _w01_ratio0021;
float _w23_ratio0021;
vec3 _sum0021;
float _TMP22;
float _TMP26;
float _TMP30;
vec4 _TMP34;
vec2 _tex_coords0035;
vec4 _TMP52;
vec2 _tex_coords0053;
vec4 _TMP70;
vec2 _tex_coords0071;
vec4 _TMP88;
vec2 _tex_coords0089;
vec4 _color0107;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _TMP22 = pow(2.71828198E+00, -2.69917697E-01);
    _TMP26 = pow(2.71828198E+00, -1.07967079E+00);
    _TMP30 = pow(2.71828198E+00, -2.42925930E+00);
    _weight_sum_inv0021 = 1.00000000E+00/(1.00000000E+00 + 2.00000000E+00*(_TMP22 + _TMP26 + _TMP30));
    _w010021 = 5.00000000E-01 + _TMP22;
    _w230021 = _TMP26 + _TMP30;
    _w01_ratio0021 = _TMP22/_w010021;
    _w23_ratio0021 = _TMP30/_w230021;
    _tex_coords0035 = TEX0.xy - (2.00000000E+00 + _w23_ratio0021)*TEX1.xy;
    _TMP9 = COMPAT_TEXTURE(Texture, _tex_coords0035);
    _TMP6 = pow(_TMP9.x, 2.20000005E+00);
    _TMP7 = pow(_TMP9.y, 2.20000005E+00);
    _TMP8 = pow(_TMP9.z, 2.20000005E+00);
    _TMP11 = vec3(_TMP6, _TMP7, _TMP8);
    _TMP34 = vec4(_TMP11.x, _TMP11.y, _TMP11.z, _TMP9.w);
    _sum0021 = _w230021*_TMP34.xyz;
    _tex_coords0053 = TEX0.xy - _w01_ratio0021*TEX1.xy;
    _TMP9 = COMPAT_TEXTURE(Texture, _tex_coords0053);
    _TMP6 = pow(_TMP9.x, 2.20000005E+00);
    _TMP7 = pow(_TMP9.y, 2.20000005E+00);
    _TMP8 = pow(_TMP9.z, 2.20000005E+00);
    _TMP11 = vec3(_TMP6, _TMP7, _TMP8);
    _TMP52 = vec4(_TMP11.x, _TMP11.y, _TMP11.z, _TMP9.w);
    _sum0021 = _sum0021 + _w010021*_TMP52.xyz;
    _tex_coords0071 = TEX0.xy + _w01_ratio0021*TEX1.xy;
    _TMP9 = COMPAT_TEXTURE(Texture, _tex_coords0071);
    _TMP6 = pow(_TMP9.x, 2.20000005E+00);
    _TMP7 = pow(_TMP9.y, 2.20000005E+00);
    _TMP8 = pow(_TMP9.z, 2.20000005E+00);
    _TMP11 = vec3(_TMP6, _TMP7, _TMP8);
    _TMP70 = vec4(_TMP11.x, _TMP11.y, _TMP11.z, _TMP9.w);
    _sum0021 = _sum0021 + _w010021*_TMP70.xyz;
    _tex_coords0089 = TEX0.xy + (2.00000000E+00 + _w23_ratio0021)*TEX1.xy;
    _TMP9 = COMPAT_TEXTURE(Texture, _tex_coords0089);
    _TMP6 = pow(_TMP9.x, 2.20000005E+00);
    _TMP7 = pow(_TMP9.y, 2.20000005E+00);
    _TMP8 = pow(_TMP9.z, 2.20000005E+00);
    _TMP11 = vec3(_TMP6, _TMP7, _TMP8);
    _TMP88 = vec4(_TMP11.x, _TMP11.y, _TMP11.z, _TMP9.w);
    _sum0021 = _sum0021 + _w230021*_TMP88.xyz;
    _TMP18 = _sum0021*_weight_sum_inv0021;
    _color0107 = vec4(_TMP18.x, _TMP18.y, _TMP18.z, 1.00000000E+00);
    _TMP6 = pow(_color0107.x, 4.54545438E-01);
    _TMP7 = pow(_color0107.y, 4.54545438E-01);
    _TMP8 = pow(_color0107.z, 4.54545438E-01);
    _TMP1 = vec3(_TMP6, _TMP7, _TMP8);
    _ret_0 = vec4(_TMP1.x, _TMP1.y, _TMP1.z, _color0107.w);
    FragColor = _ret_0;
    return;
} 
#endif
