// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _blur_dxdy;
COMPAT_VARYING     vec2 _tex_uv1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec2 _tex_uv1;
    vec2 _blur_dxdy;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _dxdy_scale;
    vec2 _dxdy;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _dxdy_scale = InputSize/OutputSize;
    _dxdy = _dxdy_scale/TextureSize;
    _OUT._blur_dxdy = vec2(_dxdy.x, 0.00000000E+00);
    _ret_0._position1 = _r0006;
    _ret_0._tex_uv1 = TexCoord.xy;
    _ret_0._blur_dxdy = _OUT._blur_dxdy;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    TEX1.xy = _OUT._blur_dxdy;
    return;
    TEX0.xy = _ret_0._tex_uv1;
    TEX1.xy = _ret_0._blur_dxdy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _blur_dxdy;
COMPAT_VARYING     vec2 _tex_uv1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _tex_uv1;
    vec2 _blur_dxdy;
};
vec4 _ret_0;
vec3 _TMP1;
float _TMP15;
float _TMP14;
float _TMP13;
vec4 _TMP16;
uniform sampler2D Texture;
vec3 _TMP22;
float _weight_sum_inv0025;
vec3 _sum0025;
float _TMP26;
float _TMP30;
float _TMP34;
float _TMP38;
float _TMP42;
vec2 _tex_coords0047;
vec2 _tex_coords0053;
vec2 _tex_coords0059;
vec2 _tex_coords0065;
vec2 _tex_coords0071;
vec2 _tex_coords0083;
vec2 _tex_coords0089;
vec2 _tex_coords0095;
vec2 _tex_coords0101;
vec2 _tex_coords0107;
vec4 _color0113;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _TMP26 = pow(2.71828198E+00, -1.07180931E-01);
    _TMP30 = pow(2.71828198E+00, -4.28723723E-01);
    _TMP34 = pow(2.71828198E+00, -9.64628398E-01);
    _TMP38 = pow(2.71828198E+00, -1.71489489E+00);
    _TMP42 = pow(2.71828198E+00, -2.67952323E+00);
    _weight_sum_inv0025 = 1.00000000E+00/(1.00000000E+00 + 2.00000000E+00*(_TMP26 + _TMP30 + _TMP34 + _TMP38 + _TMP42));
    _tex_coords0047 = TEX0.xy - 5.00000000E+00*TEX1.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0047);
    _sum0025 = _TMP42*_TMP16.xyz;
    _tex_coords0053 = TEX0.xy - 4.00000000E+00*TEX1.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0053);
    _sum0025 = _sum0025 + _TMP38*_TMP16.xyz;
    _tex_coords0059 = TEX0.xy - 3.00000000E+00*TEX1.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0059);
    _sum0025 = _sum0025 + _TMP34*_TMP16.xyz;
    _tex_coords0065 = TEX0.xy - 2.00000000E+00*TEX1.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0065);
    _sum0025 = _sum0025 + _TMP30*_TMP16.xyz;
    _tex_coords0071 = TEX0.xy - TEX1.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0071);
    _sum0025 = _sum0025 + _TMP26*_TMP16.xyz;
    _TMP16 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _sum0025 = _sum0025 + _TMP16.xyz;
    _tex_coords0083 = TEX0.xy + TEX1.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0083);
    _sum0025 = _sum0025 + _TMP26*_TMP16.xyz;
    _tex_coords0089 = TEX0.xy + 2.00000000E+00*TEX1.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0089);
    _sum0025 = _sum0025 + _TMP30*_TMP16.xyz;
    _tex_coords0095 = TEX0.xy + 3.00000000E+00*TEX1.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0095);
    _sum0025 = _sum0025 + _TMP34*_TMP16.xyz;
    _tex_coords0101 = TEX0.xy + 4.00000000E+00*TEX1.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0101);
    _sum0025 = _sum0025 + _TMP38*_TMP16.xyz;
    _tex_coords0107 = TEX0.xy + 5.00000000E+00*TEX1.xy;
    _TMP16 = COMPAT_TEXTURE(Texture, _tex_coords0107);
    _sum0025 = _sum0025 + _TMP42*_TMP16.xyz;
    _TMP22 = _sum0025*_weight_sum_inv0025;
    _color0113 = vec4(_TMP22.x, _TMP22.y, _TMP22.z, 1.00000000E+00);
    _TMP13 = pow(_color0113.x, 4.54545438E-01);
    _TMP14 = pow(_color0113.y, 4.54545438E-01);
    _TMP15 = pow(_color0113.z, 4.54545438E-01);
    _TMP1 = vec3(_TMP13, _TMP14, _TMP15);
    _ret_0 = vec4(_TMP1.x, _TMP1.y, _TMP1.z, _color0113.w);
    FragColor = _ret_0;
    return;
} 
#endif
