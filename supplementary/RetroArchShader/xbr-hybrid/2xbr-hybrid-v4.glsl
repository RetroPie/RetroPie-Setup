// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
float _TMP59;
float _TMP58;
float _TMP57;
vec3 _TMP56;
vec3 _TMP55;
vec3 _TMP54;
vec3 _TMP53;
vec3 _TMP52;
vec3 _TMP51;
vec3 _TMP50;
vec3 _TMP49;
vec4 _TMP48;
float _TMP47;
float _TMP46;
float _TMP45;
vec3 _TMP66;
vec3 _TMP43;
vec3 _TMP42;
vec3 _TMP41;
vec3 _TMP40;
vec4 _TMP33;
vec4 _TMP32;
vec4 _TMP67;
bvec4 _TMP31;
bvec4 _TMP30;
bvec4 _TMP29;
bvec4 _TMP28;
bvec4 _TMP27;
bvec4 _TMP26;
bvec4 _TMP25;
bvec4 _TMP24;
bvec4 _TMP23;
bvec4 _TMP22;
bvec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0080;
vec4 _r0124;
vec4 _r0134;
vec4 _r0144;
vec4 _r0154;
vec4 _r0164;
vec4 _r0174;
vec4 _TMP185;
vec4 _a0188;
vec4 _TMP191;
vec4 _a0194;
vec4 _TMP197;
vec4 _a0200;
vec4 _TMP203;
vec4 _a0206;
vec4 _TMP209;
vec4 _a0212;
vec4 _TMP215;
vec4 _a0218;
vec4 _TMP221;
vec4 _a0224;
vec4 _TMP227;
vec4 _a0230;
vec4 _TMP233;
vec4 _a0236;
vec4 _TMP239;
vec4 _a0242;
vec4 _TMP245;
vec4 _a0248;
vec4 _x0252;
vec4 _TMP253;
vec4 _x0262;
vec4 _TMP263;
vec4 _x0272;
vec4 _TMP273;
vec4 _TMP281;
vec4 _a0284;
vec4 _TMP285;
vec4 _a0288;
vec4 _TMP289;
vec4 _a0292;
vec4 _TMP293;
vec4 _a0296;
vec4 _TMP297;
vec4 _a0300;
vec4 _TMP303;
vec4 _a0306;
vec4 _TMP307;
vec4 _a0310;
vec4 _TMP311;
vec4 _a0314;
vec4 _TMP315;
vec4 _a0318;
vec4 _TMP319;
vec4 _a0322;
vec4 _TMP323;
vec4 _a0326;
vec4 _TMP327;
vec4 _a0330;
vec4 _TMP331;
vec4 _a0334;
vec4 _TMP335;
vec4 _a0338;
vec4 _TMP339;
vec4 _a0342;
vec4 _TMP343;
vec4 _a0346;
vec3 _b0350;
vec3 _b0354;
vec3 _TMP355;
vec3 _a0356;
vec3 _b0364;
vec3 _b0368;
vec3 _TMP369;
vec3 _a0370;
vec4 _a0376;
vec4 _a0378;
vec4 _a0380;
vec3 _df0390;
vec3 _a0392;
vec3 _df0394;
vec3 _a0396;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    bvec4 _nc;
    bvec4 _nc30;
    bvec4 _nc60;
    bvec4 _nc45;
    vec4 _fx;
    vec4 _fx_left;
    vec4 _fx_up;
    vec3 _res1;
    vec3 _res2;
    vec3 _pix1;
    vec3 _pix2;
    float _blend1;
    float _blend2;
    vec2 _fp;
    vec4 _fx45;
    vec4 _fx30;
    vec4 _fx60;
    vec3 _res;
    vec3 _aa;
    vec3 _bb;
    vec3 _cc;
    vec3 _dd;
    vec3 _t;
    vec3 _m;
    vec3 _s1;
    vec3 _s0;
    vec4 _maximo;
    _x0080 = TEX0.xy*TextureSize;
    _fp = fract(_x0080);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _r0124.x = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0124.y = dot(_TMP6.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0124.z = dot(_TMP10.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0124.w = dot(_TMP8.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0134.x = dot(_TMP5.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0134.y = dot(_TMP3.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0134.z = dot(_TMP9.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0134.w = dot(_TMP11.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0144.x = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0144.y = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0144.z = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0144.w = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0154.x = dot(_TMP20.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0154.y = dot(_TMP2.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0154.z = dot(_TMP15.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0154.w = dot(_TMP12.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0164.x = dot(_TMP14.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0164.y = dot(_TMP18.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0164.z = dot(_TMP0.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0164.w = dot(_TMP17.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0174.x = dot(_TMP13.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0174.y = dot(_TMP19.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0174.z = dot(_TMP1.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0174.w = dot(_TMP16.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _fx = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x;
    _fx_left = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x;
    _fx_up = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x;
    _a0188 = _r0124.wxyz - _r0124;
    _TMP185 = abs(_a0188);
    _TMP21 = bvec4(_TMP185.x < 1.50000000E+01, _TMP185.y < 1.50000000E+01, _TMP185.z < 1.50000000E+01, _TMP185.w < 1.50000000E+01);
    _a0194 = _r0124.wxyz - _r0134;
    _TMP191 = abs(_a0194);
    _TMP22 = bvec4(_TMP191.x < 1.50000000E+01, _TMP191.y < 1.50000000E+01, _TMP191.z < 1.50000000E+01, _TMP191.w < 1.50000000E+01);
    _a0200 = _r0124.zwxy - _r0124.yzwx;
    _TMP197 = abs(_a0200);
    _TMP23 = bvec4(_TMP197.x < 1.50000000E+01, _TMP197.y < 1.50000000E+01, _TMP197.z < 1.50000000E+01, _TMP197.w < 1.50000000E+01);
    _a0206 = _r0124.zwxy - _r0134.zwxy;
    _TMP203 = abs(_a0206);
    _TMP24 = bvec4(_TMP203.x < 1.50000000E+01, _TMP203.y < 1.50000000E+01, _TMP203.z < 1.50000000E+01, _TMP203.w < 1.50000000E+01);
    _a0212 = _r0144 - _r0134.wxyz;
    _TMP209 = abs(_a0212);
    _TMP25 = bvec4(_TMP209.x < 1.50000000E+01, _TMP209.y < 1.50000000E+01, _TMP209.z < 1.50000000E+01, _TMP209.w < 1.50000000E+01);
    _a0218 = _r0124.wxyz - _r0174.yzwx;
    _TMP215 = abs(_a0218);
    _TMP26 = bvec4(_TMP215.x < 1.50000000E+01, _TMP215.y < 1.50000000E+01, _TMP215.z < 1.50000000E+01, _TMP215.w < 1.50000000E+01);
    _a0224 = _r0124.wxyz - _r0154;
    _TMP221 = abs(_a0224);
    _TMP27 = bvec4(_TMP221.x < 1.50000000E+01, _TMP221.y < 1.50000000E+01, _TMP221.z < 1.50000000E+01, _TMP221.w < 1.50000000E+01);
    _a0230 = _r0124.zwxy - _r0174;
    _TMP227 = abs(_a0230);
    _TMP28 = bvec4(_TMP227.x < 1.50000000E+01, _TMP227.y < 1.50000000E+01, _TMP227.z < 1.50000000E+01, _TMP227.w < 1.50000000E+01);
    _a0236 = _r0124.zwxy - _r0164;
    _TMP233 = abs(_a0236);
    _TMP29 = bvec4(_TMP233.x < 1.50000000E+01, _TMP233.y < 1.50000000E+01, _TMP233.z < 1.50000000E+01, _TMP233.w < 1.50000000E+01);
    _a0242 = _r0144 - _r0134.zwxy;
    _TMP239 = abs(_a0242);
    _TMP30 = bvec4(_TMP239.x < 1.50000000E+01, _TMP239.y < 1.50000000E+01, _TMP239.z < 1.50000000E+01, _TMP239.w < 1.50000000E+01);
    _a0248 = _r0144 - _r0134;
    _TMP245 = abs(_a0248);
    _TMP31 = bvec4(_TMP245.x < 1.50000000E+01, _TMP245.y < 1.50000000E+01, _TMP245.z < 1.50000000E+01, _TMP245.w < 1.50000000E+01);
    _interp_restriction_lv1 = bvec4(_r0144.x != _r0124.w && _r0144.x != _r0124.z && (!_TMP21.x && !_TMP22.x || !_TMP23.x && !_TMP24.x || _TMP25.x && (!_TMP26.x && !_TMP27.x || !_TMP28.x && !_TMP29.x) || _TMP30.x || _TMP31.x), _r0144.y != _r0124.x && _r0144.y != _r0124.w && (!_TMP21.y && !_TMP22.y || !_TMP23.y && !_TMP24.y || _TMP25.y && (!_TMP26.y && !_TMP27.y || !_TMP28.y && !_TMP29.y) || _TMP30.y || _TMP31.y), _r0144.z != _r0124.y && _r0144.z != _r0124.x && (!_TMP21.z && !_TMP22.z || !_TMP23.z && !_TMP24.z || _TMP25.z && (!_TMP26.z && !_TMP27.z || !_TMP28.z && !_TMP29.z) || _TMP30.z || _TMP31.z), _r0144.w != _r0124.z && _r0144.w != _r0124.y && (!_TMP21.w && !_TMP22.w || !_TMP23.w && !_TMP24.w || _TMP25.w && (!_TMP26.w && !_TMP27.w || !_TMP28.w && !_TMP29.w) || _TMP30.w || _TMP31.w));
    _interp_restriction_lv2_left = bvec4(_r0144.x != _r0134.z && _r0124.y != _r0134.z, _r0144.y != _r0134.w && _r0124.z != _r0134.w, _r0144.z != _r0134.x && _r0124.w != _r0134.x, _r0144.w != _r0134.y && _r0124.x != _r0134.y);
    _interp_restriction_lv2_up = bvec4(_r0144.x != _r0134.x && _r0124.x != _r0134.x, _r0144.y != _r0134.y && _r0124.y != _r0134.y, _r0144.z != _r0134.z && _r0124.z != _r0134.z, _r0144.w != _r0134.w && _r0124.w != _r0134.w);
    _x0252 = _fx - vec4( 1.00000000E+00, 0.00000000E+00, -1.00000000E+00, 0.00000000E+00);
    _TMP67 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0252);
    _TMP253 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP67);
    _fx45 = _TMP253*_TMP253*(3.00000000E+00 - 2.00000000E+00*_TMP253);
    _x0262 = _fx_left - vec4( 5.00000000E-01, 5.00000000E-01, -1.00000000E+00, -5.00000000E-01);
    _TMP67 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0262);
    _TMP263 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP67);
    _fx30 = _TMP263*_TMP263*(3.00000000E+00 - 2.00000000E+00*_TMP263);
    _x0272 = _fx_up - vec4( 1.50000000E+00, -5.00000000E-01, -1.50000000E+00, 0.00000000E+00);
    _TMP67 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0272);
    _TMP273 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP67);
    _fx60 = _TMP273*_TMP273*(3.00000000E+00 - 2.00000000E+00*_TMP273);
    _a0284 = _r0144 - _r0134;
    _TMP281 = abs(_a0284);
    _a0288 = _r0144 - _r0134.zwxy;
    _TMP285 = abs(_a0288);
    _a0292 = _r0134.wxyz - _r0174;
    _TMP289 = abs(_a0292);
    _a0296 = _r0134.wxyz - _r0174.yzwx;
    _TMP293 = abs(_a0296);
    _a0300 = _r0124.zwxy - _r0124.wxyz;
    _TMP297 = abs(_a0300);
    _TMP32 = _TMP281 + _TMP285 + _TMP289 + _TMP293 + 4.00000000E+00*_TMP297;
    _a0306 = _r0124.zwxy - _r0124.yzwx;
    _TMP303 = abs(_a0306);
    _a0310 = _r0124.zwxy - _r0164;
    _TMP307 = abs(_a0310);
    _a0314 = _r0124.wxyz - _r0154;
    _TMP311 = abs(_a0314);
    _a0318 = _r0124.wxyz - _r0124;
    _TMP315 = abs(_a0318);
    _a0322 = _r0144 - _r0134.wxyz;
    _TMP319 = abs(_a0322);
    _TMP33 = _TMP303 + _TMP307 + _TMP311 + _TMP315 + 4.00000000E+00*_TMP319;
    _edr = bvec4((_TMP32 + 3.50000000E+00).x < _TMP33.x && _interp_restriction_lv1.x, (_TMP32 + 3.50000000E+00).y < _TMP33.y && _interp_restriction_lv1.y, (_TMP32 + 3.50000000E+00).z < _TMP33.z && _interp_restriction_lv1.z, (_TMP32 + 3.50000000E+00).w < _TMP33.w && _interp_restriction_lv1.w);
    _a0326 = _r0124.wxyz - _r0134.zwxy;
    _TMP323 = abs(_a0326);
    _a0330 = _r0124.zwxy - _r0134;
    _TMP327 = abs(_a0330);
    _edr_left = bvec4((2.00000000E+00*_TMP323).x <= _TMP327.x && _interp_restriction_lv2_left.x, (2.00000000E+00*_TMP323).y <= _TMP327.y && _interp_restriction_lv2_left.y, (2.00000000E+00*_TMP323).z <= _TMP327.z && _interp_restriction_lv2_left.z, (2.00000000E+00*_TMP323).w <= _TMP327.w && _interp_restriction_lv2_left.w);
    _a0334 = _r0124.wxyz - _r0134.zwxy;
    _TMP331 = abs(_a0334);
    _a0338 = _r0124.zwxy - _r0134;
    _TMP335 = abs(_a0338);
    _edr_up = bvec4(_TMP331.x >= (2.00000000E+00*_TMP335).x && _interp_restriction_lv2_up.x, _TMP331.y >= (2.00000000E+00*_TMP335).y && _interp_restriction_lv2_up.y, _TMP331.z >= (2.00000000E+00*_TMP335).z && _interp_restriction_lv2_up.z, _TMP331.w >= (2.00000000E+00*_TMP335).w && _interp_restriction_lv2_up.w);
    _nc45 = bvec4(_edr.x && bool(_fx45.x), _edr.y && bool(_fx45.y), _edr.z && bool(_fx45.z), _edr.w && bool(_fx45.w));
    _nc30 = bvec4(_edr.x && _edr_left.x && bool(_fx30.x), _edr.y && _edr_left.y && bool(_fx30.y), _edr.z && _edr_left.z && bool(_fx30.z), _edr.w && _edr_left.w && bool(_fx30.w));
    _nc60 = bvec4(_edr.x && _edr_up.x && bool(_fx60.x), _edr.y && _edr_up.y && bool(_fx60.y), _edr.z && _edr_up.z && bool(_fx60.z), _edr.w && _edr_up.w && bool(_fx60.w));
    _a0342 = _r0144 - _r0124.wxyz;
    _TMP339 = abs(_a0342);
    _a0346 = _r0144 - _r0124.zwxy;
    _TMP343 = abs(_a0346);
    _px = bvec4(_TMP339.x <= _TMP343.x, _TMP339.y <= _TMP343.y, _TMP339.z <= _TMP343.z, _TMP339.w <= _TMP343.w);
    _aa = _TMP4.xyz - _TMP1.xyz;
    _bb = _TMP7.xyz - _TMP4.xyz;
    _cc = _TMP10.xyz - _TMP7.xyz;
    _dd = _TMP13.xyz - _TMP10.xyz;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_TMP7.x < 5.00000000E-01 ? (2.00000000E+00*_TMP7.xyz).x : (2.00000000E+00*(1.00000000E+00 - _TMP7.xyz)).x, _TMP7.y < 5.00000000E-01 ? (2.00000000E+00*_TMP7.xyz).y : (2.00000000E+00*(1.00000000E+00 - _TMP7.xyz)).y, _TMP7.z < 5.00000000E-01 ? (2.00000000E+00*_TMP7.xyz).z : (2.00000000E+00*(1.00000000E+00 - _TMP7.xyz)).z);
    _TMP40 = abs(_bb);
    _b0350 = 6.49999976E-01*_TMP40;
    _m = min(_m, _b0350);
    _TMP41 = abs(_cc);
    _b0354 = 6.49999976E-01*_TMP41;
    _m = min(_m, _b0354);
    _a0356 = -_m;
    _TMP66 = min(_m, _t);
    _TMP355 = max(_a0356, _TMP66);
    _s1 = (2.00000000E+00*_fp.y - 1.00000000E+00)*_TMP355 + _TMP7.xyz;
    _aa = _TMP6.xyz - _TMP16.xyz;
    _bb = _s1 - _TMP6.xyz;
    _cc = _TMP8.xyz - _s1;
    _dd = _TMP19.xyz - _TMP8.xyz;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_s1.x < 5.00000000E-01 ? (2.00000000E+00*_s1).x : (2.00000000E+00*(1.00000000E+00 - _s1)).x, _s1.y < 5.00000000E-01 ? (2.00000000E+00*_s1).y : (2.00000000E+00*(1.00000000E+00 - _s1)).y, _s1.z < 5.00000000E-01 ? (2.00000000E+00*_s1).z : (2.00000000E+00*(1.00000000E+00 - _s1)).z);
    _TMP42 = abs(_bb);
    _b0364 = 6.49999976E-01*_TMP42;
    _m = min(_m, _b0364);
    _TMP43 = abs(_cc);
    _b0368 = 6.49999976E-01*_TMP43;
    _m = min(_m, _b0368);
    _a0370 = -_m;
    _TMP66 = min(_m, _t);
    _TMP369 = max(_a0370, _TMP66);
    _s0 = (2.00000000E+00*_fp.x - 1.00000000E+00)*_TMP369 + _s1;
    _nc = bvec4(_nc30.x || _nc60.x || _nc45.x, _nc30.y || _nc60.y || _nc45.y, _nc30.z || _nc60.z || _nc45.z, _nc30.w || _nc60.w || _nc45.w);
    _blend2 = 0.00000000E+00;
    _blend1 = 0.00000000E+00;
    _a0376 = vec4(float(_nc45.x), float(_nc45.y), float(_nc45.z), float(_nc45.w));
    _TMP45 = dot(_a0376, _fx45);
    _a0378 = vec4(float(_nc30.x), float(_nc30.y), float(_nc30.z), float(_nc30.w));
    _TMP46 = dot(_a0378, _fx30);
    _a0380 = vec4(float(_nc60.x), float(_nc60.y), float(_nc60.z), float(_nc60.w));
    _TMP47 = dot(_a0380, _fx60);
    _TMP48 = max(vec4(_TMP46, _TMP46, _TMP46, _TMP46), vec4(_TMP47, _TMP47, _TMP47, _TMP47));
    _maximo = max(_TMP48, vec4(_TMP45, _TMP45, _TMP45, _TMP45));
    if (_nc.x) { 
        if (_px.x) { 
            _TMP49 = _TMP8.xyz;
        } else {
            _TMP49 = _TMP10.xyz;
        } 
        _pix1 = _TMP49;
        _blend1 = _maximo.x;
    } else {
        if (_nc.y) { 
            if (_px.y) { 
                _TMP50 = _TMP4.xyz;
            } else {
                _TMP50 = _TMP8.xyz;
            } 
            _pix1 = _TMP50;
            _blend1 = _maximo.y;
        } else {
            if (_nc.z) { 
                if (_px.z) { 
                    _TMP51 = _TMP6.xyz;
                } else {
                    _TMP51 = _TMP4.xyz;
                } 
                _pix1 = _TMP51;
                _blend1 = _maximo.z;
            } else {
                if (_nc.w) { 
                    if (_px.w) { 
                        _TMP52 = _TMP10.xyz;
                    } else {
                        _TMP52 = _TMP6.xyz;
                    } 
                    _pix1 = _TMP52;
                    _blend1 = _maximo.w;
                } 
            } 
        } 
    } 
    if (_nc.w) { 
        if (_px.w) { 
            _TMP53 = _TMP10.xyz;
        } else {
            _TMP53 = _TMP6.xyz;
        } 
        _pix2 = _TMP53;
        _blend2 = _maximo.w;
    } else {
        if (_nc.z) { 
            if (_px.z) { 
                _TMP54 = _TMP6.xyz;
            } else {
                _TMP54 = _TMP4.xyz;
            } 
            _pix2 = _TMP54;
            _blend2 = _maximo.z;
        } else {
            if (_nc.y) { 
                if (_px.y) { 
                    _TMP55 = _TMP4.xyz;
                } else {
                    _TMP55 = _TMP8.xyz;
                } 
                _pix2 = _TMP55;
                _blend2 = _maximo.y;
            } else {
                if (_nc.x) { 
                    if (_px.x) { 
                        _TMP56 = _TMP8.xyz;
                    } else {
                        _TMP56 = _TMP10.xyz;
                    } 
                    _pix2 = _TMP56;
                    _blend2 = _maximo.x;
                } 
            } 
        } 
    } 
    _res1 = _s0 + _blend1*(_pix1 - _s0);
    _res2 = _s0 + _blend2*(_pix2 - _s0);
    _a0392 = _TMP7.xyz - _res1;
    _df0390 = abs(_a0392);
    _TMP57 = _df0390.x + _df0390.y + _df0390.z;
    _a0396 = _TMP7.xyz - _res2;
    _df0394 = abs(_a0396);
    _TMP58 = _df0394.x + _df0394.y + _df0394.z;
    _TMP59 = float((_TMP58 >= _TMP57));
    _res = _res1 + _TMP59*(_res2 - _res1);
    _ret_0 = vec4(_res.x, _res.y, _res.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
