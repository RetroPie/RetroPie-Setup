// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
bool _TMP57;
bool _TMP56;
vec3 _TMP64;
vec3 _TMP55;
vec3 _TMP54;
vec3 _TMP53;
vec3 _TMP52;
vec3 _TMP51;
vec3 _TMP50;
vec3 _TMP49;
vec3 _TMP48;
vec3 _TMP47;
vec3 _TMP46;
vec3 _TMP45;
vec3 _TMP44;
vec3 _TMP43;
vec3 _TMP42;
vec3 _TMP41;
vec3 _TMP40;
vec4 _TMP33;
vec4 _TMP32;
bvec4 _TMP31;
bvec4 _TMP30;
bvec4 _TMP29;
bvec4 _TMP28;
bvec4 _TMP27;
bvec4 _TMP26;
bvec4 _TMP25;
bvec4 _TMP24;
bvec4 _TMP23;
bvec4 _TMP22;
bvec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0078;
vec4 _r0122;
vec4 _r0132;
vec4 _r0142;
vec4 _r0152;
vec4 _r0162;
vec4 _r0172;
vec4 _TMP183;
vec4 _a0186;
vec4 _TMP189;
vec4 _a0192;
vec4 _TMP195;
vec4 _a0198;
vec4 _TMP201;
vec4 _a0204;
vec4 _TMP207;
vec4 _a0210;
vec4 _TMP213;
vec4 _a0216;
vec4 _TMP219;
vec4 _a0222;
vec4 _TMP225;
vec4 _a0228;
vec4 _TMP231;
vec4 _a0234;
vec4 _TMP237;
vec4 _a0240;
vec4 _TMP243;
vec4 _a0246;
vec4 _TMP249;
vec4 _a0252;
vec4 _TMP253;
vec4 _a0256;
vec4 _TMP257;
vec4 _a0260;
vec4 _TMP261;
vec4 _a0264;
vec4 _TMP265;
vec4 _a0268;
vec4 _TMP271;
vec4 _a0274;
vec4 _TMP275;
vec4 _a0278;
vec4 _TMP279;
vec4 _a0282;
vec4 _TMP283;
vec4 _a0286;
vec4 _TMP287;
vec4 _a0290;
vec4 _TMP291;
vec4 _a0294;
vec4 _TMP295;
vec4 _a0298;
vec4 _TMP299;
vec4 _a0302;
vec4 _TMP303;
vec4 _a0306;
vec4 _TMP307;
vec4 _a0310;
vec4 _TMP311;
vec4 _a0314;
vec3 _b0318;
vec3 _b0322;
vec3 _TMP331;
vec3 _a0332;
vec3 _b0340;
vec3 _b0344;
vec3 _TMP353;
vec3 _a0354;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    vec2 _fp;
    vec3 _res;
    vec3 _aa;
    vec3 _bb;
    vec3 _cc;
    vec3 _dd;
    bvec3 _sim1;
    bvec3 _sim2;
    vec3 _t;
    vec3 _m;
    vec3 _s1;
    vec3 _s0;
    _x0078 = TEX0.xy*TextureSize;
    _fp = fract(_x0078);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _r0122.x = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0122.y = dot(_TMP6.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0122.z = dot(_TMP10.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0122.w = dot(_TMP8.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0132.x = dot(_TMP5.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0132.y = dot(_TMP3.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0132.z = dot(_TMP9.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0132.w = dot(_TMP11.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0142.x = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0142.y = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0142.z = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0142.w = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0152.x = dot(_TMP20.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0152.y = dot(_TMP2.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0152.z = dot(_TMP15.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0152.w = dot(_TMP12.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0162.x = dot(_TMP14.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0162.y = dot(_TMP18.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0162.z = dot(_TMP0.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0162.w = dot(_TMP17.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0172.x = dot(_TMP13.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0172.y = dot(_TMP19.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0172.z = dot(_TMP1.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0172.w = dot(_TMP16.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _a0186 = _r0122.wxyz - _r0122;
    _TMP183 = abs(_a0186);
    _TMP21 = bvec4(_TMP183.x < 1.50000000E+01, _TMP183.y < 1.50000000E+01, _TMP183.z < 1.50000000E+01, _TMP183.w < 1.50000000E+01);
    _a0192 = _r0122.wxyz - _r0132;
    _TMP189 = abs(_a0192);
    _TMP22 = bvec4(_TMP189.x < 1.50000000E+01, _TMP189.y < 1.50000000E+01, _TMP189.z < 1.50000000E+01, _TMP189.w < 1.50000000E+01);
    _a0198 = _r0122.zwxy - _r0122.yzwx;
    _TMP195 = abs(_a0198);
    _TMP23 = bvec4(_TMP195.x < 1.50000000E+01, _TMP195.y < 1.50000000E+01, _TMP195.z < 1.50000000E+01, _TMP195.w < 1.50000000E+01);
    _a0204 = _r0122.zwxy - _r0132.zwxy;
    _TMP201 = abs(_a0204);
    _TMP24 = bvec4(_TMP201.x < 1.50000000E+01, _TMP201.y < 1.50000000E+01, _TMP201.z < 1.50000000E+01, _TMP201.w < 1.50000000E+01);
    _a0210 = _r0142 - _r0132.wxyz;
    _TMP207 = abs(_a0210);
    _TMP25 = bvec4(_TMP207.x < 1.50000000E+01, _TMP207.y < 1.50000000E+01, _TMP207.z < 1.50000000E+01, _TMP207.w < 1.50000000E+01);
    _a0216 = _r0122.wxyz - _r0172.yzwx;
    _TMP213 = abs(_a0216);
    _TMP26 = bvec4(_TMP213.x < 1.50000000E+01, _TMP213.y < 1.50000000E+01, _TMP213.z < 1.50000000E+01, _TMP213.w < 1.50000000E+01);
    _a0222 = _r0122.wxyz - _r0152;
    _TMP219 = abs(_a0222);
    _TMP27 = bvec4(_TMP219.x < 1.50000000E+01, _TMP219.y < 1.50000000E+01, _TMP219.z < 1.50000000E+01, _TMP219.w < 1.50000000E+01);
    _a0228 = _r0122.zwxy - _r0172;
    _TMP225 = abs(_a0228);
    _TMP28 = bvec4(_TMP225.x < 1.50000000E+01, _TMP225.y < 1.50000000E+01, _TMP225.z < 1.50000000E+01, _TMP225.w < 1.50000000E+01);
    _a0234 = _r0122.zwxy - _r0162;
    _TMP231 = abs(_a0234);
    _TMP29 = bvec4(_TMP231.x < 1.50000000E+01, _TMP231.y < 1.50000000E+01, _TMP231.z < 1.50000000E+01, _TMP231.w < 1.50000000E+01);
    _a0240 = _r0142 - _r0132.zwxy;
    _TMP237 = abs(_a0240);
    _TMP30 = bvec4(_TMP237.x < 1.50000000E+01, _TMP237.y < 1.50000000E+01, _TMP237.z < 1.50000000E+01, _TMP237.w < 1.50000000E+01);
    _a0246 = _r0142 - _r0132;
    _TMP243 = abs(_a0246);
    _TMP31 = bvec4(_TMP243.x < 1.50000000E+01, _TMP243.y < 1.50000000E+01, _TMP243.z < 1.50000000E+01, _TMP243.w < 1.50000000E+01);
    _interp_restriction_lv1 = bvec4(_r0142.x != _r0122.w && _r0142.x != _r0122.z && (!_TMP21.x && !_TMP22.x || !_TMP23.x && !_TMP24.x || _TMP25.x && (!_TMP26.x && !_TMP27.x || !_TMP28.x && !_TMP29.x) || _TMP30.x || _TMP31.x), _r0142.y != _r0122.x && _r0142.y != _r0122.w && (!_TMP21.y && !_TMP22.y || !_TMP23.y && !_TMP24.y || _TMP25.y && (!_TMP26.y && !_TMP27.y || !_TMP28.y && !_TMP29.y) || _TMP30.y || _TMP31.y), _r0142.z != _r0122.y && _r0142.z != _r0122.x && (!_TMP21.z && !_TMP22.z || !_TMP23.z && !_TMP24.z || _TMP25.z && (!_TMP26.z && !_TMP27.z || !_TMP28.z && !_TMP29.z) || _TMP30.z || _TMP31.z), _r0142.w != _r0122.z && _r0142.w != _r0122.y && (!_TMP21.w && !_TMP22.w || !_TMP23.w && !_TMP24.w || _TMP25.w && (!_TMP26.w && !_TMP27.w || !_TMP28.w && !_TMP29.w) || _TMP30.w || _TMP31.w));
    _interp_restriction_lv2_left = bvec4(_r0142.x != _r0132.z && _r0122.y != _r0132.z, _r0142.y != _r0132.w && _r0122.z != _r0132.w, _r0142.z != _r0132.x && _r0122.w != _r0132.x, _r0142.w != _r0132.y && _r0122.x != _r0132.y);
    _interp_restriction_lv2_up = bvec4(_r0142.x != _r0132.x && _r0122.x != _r0132.x, _r0142.y != _r0132.y && _r0122.y != _r0132.y, _r0142.z != _r0132.z && _r0122.z != _r0132.z, _r0142.w != _r0132.w && _r0122.w != _r0132.w);
    _a0252 = _r0142 - _r0132;
    _TMP249 = abs(_a0252);
    _a0256 = _r0142 - _r0132.zwxy;
    _TMP253 = abs(_a0256);
    _a0260 = _r0132.wxyz - _r0172;
    _TMP257 = abs(_a0260);
    _a0264 = _r0132.wxyz - _r0172.yzwx;
    _TMP261 = abs(_a0264);
    _a0268 = _r0122.zwxy - _r0122.wxyz;
    _TMP265 = abs(_a0268);
    _TMP32 = _TMP249 + _TMP253 + _TMP257 + _TMP261 + 4.00000000E+00*_TMP265;
    _a0274 = _r0122.zwxy - _r0122.yzwx;
    _TMP271 = abs(_a0274);
    _a0278 = _r0122.zwxy - _r0162;
    _TMP275 = abs(_a0278);
    _a0282 = _r0122.wxyz - _r0152;
    _TMP279 = abs(_a0282);
    _a0286 = _r0122.wxyz - _r0122;
    _TMP283 = abs(_a0286);
    _a0290 = _r0142 - _r0132.wxyz;
    _TMP287 = abs(_a0290);
    _TMP33 = _TMP271 + _TMP275 + _TMP279 + _TMP283 + 4.00000000E+00*_TMP287;
    _edr = bvec4(_TMP32.x < _TMP33.x && _interp_restriction_lv1.x, _TMP32.y < _TMP33.y && _interp_restriction_lv1.y, _TMP32.z < _TMP33.z && _interp_restriction_lv1.z, _TMP32.w < _TMP33.w && _interp_restriction_lv1.w);
    _a0294 = _r0122.wxyz - _r0132.zwxy;
    _TMP291 = abs(_a0294);
    _a0298 = _r0122.zwxy - _r0132;
    _TMP295 = abs(_a0298);
    _edr_left = bvec4((2.00000000E+00*_TMP291).x <= _TMP295.x && _interp_restriction_lv2_left.x, (2.00000000E+00*_TMP291).y <= _TMP295.y && _interp_restriction_lv2_left.y, (2.00000000E+00*_TMP291).z <= _TMP295.z && _interp_restriction_lv2_left.z, (2.00000000E+00*_TMP291).w <= _TMP295.w && _interp_restriction_lv2_left.w);
    _a0302 = _r0122.wxyz - _r0132.zwxy;
    _TMP299 = abs(_a0302);
    _a0306 = _r0122.zwxy - _r0132;
    _TMP303 = abs(_a0306);
    _edr_up = bvec4(_TMP299.x >= (2.00000000E+00*_TMP303).x && _interp_restriction_lv2_up.x, _TMP299.y >= (2.00000000E+00*_TMP303).y && _interp_restriction_lv2_up.y, _TMP299.z >= (2.00000000E+00*_TMP303).z && _interp_restriction_lv2_up.z, _TMP299.w >= (2.00000000E+00*_TMP303).w && _interp_restriction_lv2_up.w);
    _a0310 = _r0142 - _r0122.wxyz;
    _TMP307 = abs(_a0310);
    _a0314 = _r0142 - _r0122.zwxy;
    _TMP311 = abs(_a0314);
    _px = bvec4(_TMP307.x <= _TMP311.x, _TMP307.y <= _TMP311.y, _TMP307.z <= _TMP311.z, _TMP307.w <= _TMP311.w);
    if (_px.x) { 
        _TMP40 = _TMP8.xyz;
    } else {
        _TMP40 = _TMP10.xyz;
    } 
    if (_px.y) { 
        _TMP41 = _TMP4.xyz;
    } else {
        _TMP41 = _TMP8.xyz;
    } 
    if (_px.z) { 
        _TMP42 = _TMP6.xyz;
    } else {
        _TMP42 = _TMP4.xyz;
    } 
    if (_px.w) { 
        _TMP43 = _TMP10.xyz;
    } else {
        _TMP43 = _TMP6.xyz;
    } 
    _aa = _TMP4.xyz - _TMP1.xyz;
    _bb = _TMP7.xyz - _TMP4.xyz;
    _cc = _TMP10.xyz - _TMP7.xyz;
    _dd = _TMP13.xyz - _TMP10.xyz;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_TMP7.x < 5.00000000E-01 ? (2.00000000E+00*_TMP7.xyz).x : (2.00000000E+00*(1.00000000E+00 - _TMP7.xyz)).x, _TMP7.y < 5.00000000E-01 ? (2.00000000E+00*_TMP7.xyz).y : (2.00000000E+00*(1.00000000E+00 - _TMP7.xyz)).y, _TMP7.z < 5.00000000E-01 ? (2.00000000E+00*_TMP7.xyz).z : (2.00000000E+00*(1.00000000E+00 - _TMP7.xyz)).z);
    _TMP44 = abs(_bb);
    _b0318 = 2.00000000E+00*_TMP44;
    _m = min(_m, _b0318);
    _TMP45 = abs(_cc);
    _b0322 = 2.00000000E+00*_TMP45;
    _m = min(_m, _b0322);
    _TMP46 = abs(_bb);
    _TMP47 = abs(_cc);
    _TMP48 = abs(_bb);
    _TMP49 = abs(_cc);
    _sim1 = bvec3((_TMP46*2.00000000E+00).x > 4.00000006E-01 || (_TMP47*2.00000000E+00).x > 4.00000006E-01 || (_TMP48*2.00000000E+00).x <= 0.00000000E+00 || (_TMP49*2.00000000E+00).x <= 0.00000000E+00, (_TMP46*2.00000000E+00).y > 4.00000006E-01 || (_TMP47*2.00000000E+00).y > 4.00000006E-01 || (_TMP48*2.00000000E+00).y <= 0.00000000E+00 || (_TMP49*2.00000000E+00).y <= 0.00000000E+00, (_TMP46*2.00000000E+00).z > 4.00000006E-01 || (_TMP47*2.00000000E+00).z > 4.00000006E-01 || (_TMP48*2.00000000E+00).z <= 0.00000000E+00 || (_TMP49*2.00000000E+00).z <= 0.00000000E+00);
    _a0332 = -_m;
    _TMP64 = min(_m, _t);
    _TMP331 = max(_a0332, _TMP64);
    _s1 = (2.00000000E+00*_fp.y - 1.00000000E+00)*_TMP331 + _TMP7.xyz;
    _aa = _TMP6.xyz - _TMP16.xyz;
    _bb = _s1 - _TMP6.xyz;
    _cc = _TMP8.xyz - _s1;
    _dd = _TMP19.xyz - _TMP8.xyz;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_s1.x < 5.00000000E-01 ? (2.00000000E+00*_s1).x : (2.00000000E+00*(1.00000000E+00 - _s1)).x, _s1.y < 5.00000000E-01 ? (2.00000000E+00*_s1).y : (2.00000000E+00*(1.00000000E+00 - _s1)).y, _s1.z < 5.00000000E-01 ? (2.00000000E+00*_s1).z : (2.00000000E+00*(1.00000000E+00 - _s1)).z);
    _TMP50 = abs(_bb);
    _b0340 = 2.00000000E+00*_TMP50;
    _m = min(_m, _b0340);
    _TMP51 = abs(_cc);
    _b0344 = 2.00000000E+00*_TMP51;
    _m = min(_m, _b0344);
    _TMP52 = abs(_bb);
    _TMP53 = abs(_cc);
    _TMP54 = abs(_bb);
    _TMP55 = abs(_cc);
    _sim2 = bvec3((_TMP52*2.00000000E+00).x > 4.00000006E-01 || (_TMP53*2.00000000E+00).x > 4.00000006E-01 || (_TMP54*2.00000000E+00).x <= 0.00000000E+00 || (_TMP55*2.00000000E+00).x <= 0.00000000E+00, (_TMP52*2.00000000E+00).y > 4.00000006E-01 || (_TMP53*2.00000000E+00).y > 4.00000006E-01 || (_TMP54*2.00000000E+00).y <= 0.00000000E+00 || (_TMP55*2.00000000E+00).y <= 0.00000000E+00, (_TMP52*2.00000000E+00).z > 4.00000006E-01 || (_TMP53*2.00000000E+00).z > 4.00000006E-01 || (_TMP54*2.00000000E+00).z <= 0.00000000E+00 || (_TMP55*2.00000000E+00).z <= 0.00000000E+00);
    _a0354 = -_m;
    _TMP64 = min(_m, _t);
    _TMP353 = max(_a0354, _TMP64);
    _s0 = (2.00000000E+00*_fp.x - 1.00000000E+00)*_TMP353 + _s1;
    _res = _s0;
    _TMP56 = _sim1.x || _sim1.y || _sim1.z;
    _TMP57 = _sim2.x || _sim2.y || _sim2.z;
    if (_TMP56 && _TMP57) { 
        if (_fp.x >= 5.00000000E-01) { 
            if (_fp.y >= 5.00000000E-01) { 
                if (_edr.x && _edr_left.x && _edr_up.x) { 
                    _res = _TMP7.xyz + 8.33333015E-01*(_TMP40 - _TMP7.xyz);
                } else {
                    if (_edr.x && (_edr_left.x || _edr_up.x)) { 
                        _res = _TMP7.xyz + 7.50000000E-01*(_TMP40 - _TMP7.xyz);
                    } else {
                        if (_edr.y && _edr_left.y && _edr.w && _edr_up.w) { 
                            _res = _TMP7.xyz + 2.50000000E-01*(_TMP43 - _TMP7.xyz);
                        } else {
                            if (_edr.y && _edr_left.y) { 
                                _res = _TMP7.xyz + 2.50000000E-01*(_TMP41 - _TMP7.xyz);
                            } else {
                                if (_edr.w && _edr_up.w) { 
                                    _res = _TMP7.xyz + 2.50000000E-01*(_TMP43 - _TMP7.xyz);
                                } else {
                                    if (_edr.x) { 
                                        _res = _TMP7.xyz + 5.00000000E-01*(_TMP40 - _TMP7.xyz);
                                    } 
                                } 
                            } 
                        } 
                    } 
                } 
            } else {
                if (_edr.y && _edr_left.y && _edr_up.y) { 
                    _res = _TMP7.xyz + 8.33333015E-01*(_TMP41 - _TMP7.xyz);
                } else {
                    if (_edr.y && (_edr_left.y || _edr_up.y)) { 
                        _res = _TMP7.xyz + 7.50000000E-01*(_TMP41 - _TMP7.xyz);
                    } else {
                        if (_edr.z && _edr_left.z && _edr.x && _edr_up.x) { 
                            _res = _TMP7.xyz + 2.50000000E-01*(_TMP40 - _TMP7.xyz);
                        } else {
                            if (_edr.z && _edr_left.z) { 
                                _res = _TMP7.xyz + 2.50000000E-01*(_TMP42 - _TMP7.xyz);
                            } else {
                                if (_edr.x && _edr_up.x) { 
                                    _res = _TMP7.xyz + 2.50000000E-01*(_TMP40 - _TMP7.xyz);
                                } else {
                                    if (_edr.y) { 
                                        _res = _TMP7.xyz + 5.00000000E-01*(_TMP41 - _TMP7.xyz);
                                    } 
                                } 
                            } 
                        } 
                    } 
                } 
            } 
        } else {
            if (_fp.y >= 5.00000000E-01) { 
                if (_edr.w && _edr_left.w && _edr_up.w) { 
                    _res = _TMP7.xyz + 8.33333015E-01*(_TMP43 - _TMP7.xyz);
                } else {
                    if (_edr.w && (_edr_left.w || _edr_up.w)) { 
                        _res = _TMP7.xyz + 7.50000000E-01*(_TMP43 - _TMP7.xyz);
                    } else {
                        if (_edr.x && _edr_left.x && _edr.z && _edr_up.z) { 
                            _res = _TMP7.xyz + 2.50000000E-01*(_TMP42 - _TMP7.xyz);
                        } else {
                            if (_edr.x && _edr_left.x) { 
                                _res = _TMP7.xyz + 2.50000000E-01*(_TMP40 - _TMP7.xyz);
                            } else {
                                if (_edr.z && _edr_up.z) { 
                                    _res = _TMP7.xyz + 2.50000000E-01*(_TMP42 - _TMP7.xyz);
                                } else {
                                    if (_edr.w) { 
                                        _res = _TMP7.xyz + 5.00000000E-01*(_TMP43 - _TMP7.xyz);
                                    } 
                                } 
                            } 
                        } 
                    } 
                } 
            } else {
                if (_edr.z && _edr_left.z && _edr_up.z) { 
                    _res = _TMP7.xyz + 8.33333015E-01*(_TMP42 - _TMP7.xyz);
                } else {
                    if (_edr.z && (_edr_left.z || _edr_up.z)) { 
                        _res = _TMP7.xyz + 7.50000000E-01*(_TMP42 - _TMP7.xyz);
                    } else {
                        if (_edr.w && _edr_left.w && _edr.y && _edr_up.y) { 
                            _res = _TMP7.xyz + 2.50000000E-01*(_TMP41 - _TMP7.xyz);
                        } else {
                            if (_edr.w && _edr_left.w) { 
                                _res = _TMP7.xyz + 2.50000000E-01*(_TMP43 - _TMP7.xyz);
                            } else {
                                if (_edr.y && _edr_up.y) { 
                                    _res = _TMP7.xyz + 2.50000000E-01*(_TMP41 - _TMP7.xyz);
                                } else {
                                    if (_edr.z) { 
                                        _res = _TMP7.xyz + 5.00000000E-01*(_TMP42 - _TMP7.xyz);
                                    } 
                                } 
                            } 
                        } 
                    } 
                } 
            } 
        } 
    } 
    _ret_0 = vec4(_res.x, _res.y, _res.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
