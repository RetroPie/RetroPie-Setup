// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
vec3 _TMP58;
vec3 _TMP72;
float _TMP71;
float _TMP70;
float _TMP69;
vec3 _TMP56;
vec3 _TMP54;
vec3 _TMP52;
vec3 _TMP50;
vec4 _TMP49;
bvec4 _TMP48;
vec4 _TMP47;
bvec4 _TMP44;
vec3 _TMP66;
vec3 _TMP43;
vec3 _TMP42;
vec3 _TMP41;
vec3 _TMP40;
vec4 _TMP33;
vec4 _TMP32;
vec4 _TMP73;
bvec4 _TMP31;
bvec4 _TMP30;
bvec4 _TMP29;
bvec4 _TMP28;
bvec4 _TMP27;
bvec4 _TMP26;
bvec4 _TMP25;
bvec4 _TMP24;
bvec4 _TMP23;
bvec4 _TMP22;
bvec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0087;
vec4 _r0131;
vec4 _r0141;
vec4 _r0151;
vec4 _r0161;
vec4 _r0171;
vec4 _r0181;
vec4 _TMP192;
vec4 _a0195;
vec4 _TMP198;
vec4 _a0201;
vec4 _TMP204;
vec4 _a0207;
vec4 _TMP210;
vec4 _a0213;
vec4 _TMP216;
vec4 _a0219;
vec4 _TMP222;
vec4 _a0225;
vec4 _TMP228;
vec4 _a0231;
vec4 _TMP234;
vec4 _a0237;
vec4 _TMP240;
vec4 _a0243;
vec4 _TMP246;
vec4 _a0249;
vec4 _TMP252;
vec4 _a0255;
vec4 _x0259;
vec4 _TMP260;
vec4 _x0269;
vec4 _TMP270;
vec4 _x0279;
vec4 _TMP280;
vec4 _TMP288;
vec4 _a0291;
vec4 _TMP292;
vec4 _a0295;
vec4 _TMP296;
vec4 _a0299;
vec4 _TMP300;
vec4 _a0303;
vec4 _TMP304;
vec4 _a0307;
vec4 _TMP310;
vec4 _a0313;
vec4 _TMP314;
vec4 _a0317;
vec4 _TMP318;
vec4 _a0321;
vec4 _TMP322;
vec4 _a0325;
vec4 _TMP326;
vec4 _a0329;
vec4 _TMP330;
vec4 _a0333;
vec4 _TMP334;
vec4 _a0337;
vec4 _TMP338;
vec4 _a0341;
vec4 _TMP342;
vec4 _a0345;
vec4 _TMP346;
vec4 _a0349;
vec4 _TMP350;
vec4 _a0353;
vec3 _b0357;
vec3 _b0361;
vec3 _TMP362;
vec3 _a0363;
vec3 _b0371;
vec3 _b0375;
vec3 _TMP376;
vec3 _a0377;
vec4 _t0383;
vec4 _TMP386;
vec4 _a0389;
vec4 _t0393;
vec4 _TMP396;
vec4 _a0399;
vec3 _TMP430;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    bvec4 _nc;
    bvec4 _nc30;
    bvec4 _nc60;
    bvec4 _nc45;
    vec4 _fx;
    vec4 _fx_left;
    vec4 _fx_up;
    vec2 _fp;
    vec4 _fx45;
    vec4 _fx30;
    vec4 _fx60;
    vec3 _res;
    vec3 _aa;
    vec3 _bb;
    vec3 _cc;
    vec3 _dd;
    vec3 _t;
    vec3 _m;
    vec3 _s1;
    vec3 _s0;
    float _blend;
    vec3 _pix;
    vec4 _r1;
    bool _yeseq3;
    bvec4 _yes;
    vec4 _final45;
    vec4 _final30;
    vec4 _final60;
    vec4 _maximo;
    _x0087 = TEX0.xy*TextureSize;
    _fp = fract(_x0087);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _r0131.x = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0131.y = dot(_TMP6.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0131.z = dot(_TMP10.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0131.w = dot(_TMP8.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0141.x = dot(_TMP5.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0141.y = dot(_TMP3.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0141.z = dot(_TMP9.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0141.w = dot(_TMP11.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0151.x = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0151.y = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0151.z = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0151.w = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0161.x = dot(_TMP20.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0161.y = dot(_TMP2.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0161.z = dot(_TMP15.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0161.w = dot(_TMP12.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0171.x = dot(_TMP14.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0171.y = dot(_TMP18.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0171.z = dot(_TMP0.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0171.w = dot(_TMP17.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0181.x = dot(_TMP13.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0181.y = dot(_TMP19.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0181.z = dot(_TMP1.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0181.w = dot(_TMP16.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _fx = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x;
    _fx_left = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x;
    _fx_up = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x;
    _a0195 = _r0131.wxyz - _r0131;
    _TMP192 = abs(_a0195);
    _TMP21 = bvec4(_TMP192.x < 1.50000000E+01, _TMP192.y < 1.50000000E+01, _TMP192.z < 1.50000000E+01, _TMP192.w < 1.50000000E+01);
    _a0201 = _r0131.wxyz - _r0141;
    _TMP198 = abs(_a0201);
    _TMP22 = bvec4(_TMP198.x < 1.50000000E+01, _TMP198.y < 1.50000000E+01, _TMP198.z < 1.50000000E+01, _TMP198.w < 1.50000000E+01);
    _a0207 = _r0131.zwxy - _r0131.yzwx;
    _TMP204 = abs(_a0207);
    _TMP23 = bvec4(_TMP204.x < 1.50000000E+01, _TMP204.y < 1.50000000E+01, _TMP204.z < 1.50000000E+01, _TMP204.w < 1.50000000E+01);
    _a0213 = _r0131.zwxy - _r0141.zwxy;
    _TMP210 = abs(_a0213);
    _TMP24 = bvec4(_TMP210.x < 1.50000000E+01, _TMP210.y < 1.50000000E+01, _TMP210.z < 1.50000000E+01, _TMP210.w < 1.50000000E+01);
    _a0219 = _r0151 - _r0141.wxyz;
    _TMP216 = abs(_a0219);
    _TMP25 = bvec4(_TMP216.x < 1.50000000E+01, _TMP216.y < 1.50000000E+01, _TMP216.z < 1.50000000E+01, _TMP216.w < 1.50000000E+01);
    _a0225 = _r0131.wxyz - _r0181.yzwx;
    _TMP222 = abs(_a0225);
    _TMP26 = bvec4(_TMP222.x < 1.50000000E+01, _TMP222.y < 1.50000000E+01, _TMP222.z < 1.50000000E+01, _TMP222.w < 1.50000000E+01);
    _a0231 = _r0131.wxyz - _r0161;
    _TMP228 = abs(_a0231);
    _TMP27 = bvec4(_TMP228.x < 1.50000000E+01, _TMP228.y < 1.50000000E+01, _TMP228.z < 1.50000000E+01, _TMP228.w < 1.50000000E+01);
    _a0237 = _r0131.zwxy - _r0181;
    _TMP234 = abs(_a0237);
    _TMP28 = bvec4(_TMP234.x < 1.50000000E+01, _TMP234.y < 1.50000000E+01, _TMP234.z < 1.50000000E+01, _TMP234.w < 1.50000000E+01);
    _a0243 = _r0131.zwxy - _r0171;
    _TMP240 = abs(_a0243);
    _TMP29 = bvec4(_TMP240.x < 1.50000000E+01, _TMP240.y < 1.50000000E+01, _TMP240.z < 1.50000000E+01, _TMP240.w < 1.50000000E+01);
    _a0249 = _r0151 - _r0141.zwxy;
    _TMP246 = abs(_a0249);
    _TMP30 = bvec4(_TMP246.x < 1.50000000E+01, _TMP246.y < 1.50000000E+01, _TMP246.z < 1.50000000E+01, _TMP246.w < 1.50000000E+01);
    _a0255 = _r0151 - _r0141;
    _TMP252 = abs(_a0255);
    _TMP31 = bvec4(_TMP252.x < 1.50000000E+01, _TMP252.y < 1.50000000E+01, _TMP252.z < 1.50000000E+01, _TMP252.w < 1.50000000E+01);
    _interp_restriction_lv1 = bvec4(_r0151.x != _r0131.w && _r0151.x != _r0131.z && (!_TMP21.x && !_TMP22.x || !_TMP23.x && !_TMP24.x || _TMP25.x && (!_TMP26.x && !_TMP27.x || !_TMP28.x && !_TMP29.x) || _TMP30.x || _TMP31.x), _r0151.y != _r0131.x && _r0151.y != _r0131.w && (!_TMP21.y && !_TMP22.y || !_TMP23.y && !_TMP24.y || _TMP25.y && (!_TMP26.y && !_TMP27.y || !_TMP28.y && !_TMP29.y) || _TMP30.y || _TMP31.y), _r0151.z != _r0131.y && _r0151.z != _r0131.x && (!_TMP21.z && !_TMP22.z || !_TMP23.z && !_TMP24.z || _TMP25.z && (!_TMP26.z && !_TMP27.z || !_TMP28.z && !_TMP29.z) || _TMP30.z || _TMP31.z), _r0151.w != _r0131.z && _r0151.w != _r0131.y && (!_TMP21.w && !_TMP22.w || !_TMP23.w && !_TMP24.w || _TMP25.w && (!_TMP26.w && !_TMP27.w || !_TMP28.w && !_TMP29.w) || _TMP30.w || _TMP31.w));
    _interp_restriction_lv2_left = bvec4(_r0151.x != _r0141.z && _r0131.y != _r0141.z, _r0151.y != _r0141.w && _r0131.z != _r0141.w, _r0151.z != _r0141.x && _r0131.w != _r0141.x, _r0151.w != _r0141.y && _r0131.x != _r0141.y);
    _interp_restriction_lv2_up = bvec4(_r0151.x != _r0141.x && _r0131.x != _r0141.x, _r0151.y != _r0141.y && _r0131.y != _r0141.y, _r0151.z != _r0141.z && _r0131.z != _r0141.z, _r0151.w != _r0141.w && _r0131.w != _r0141.w);
    _x0259 = _fx - vec4( 1.00000000E+00, 0.00000000E+00, -1.00000000E+00, 0.00000000E+00);
    _TMP73 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0259);
    _TMP260 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP73);
    _fx45 = _TMP260*_TMP260*(3.00000000E+00 - 2.00000000E+00*_TMP260);
    _x0269 = _fx_left - vec4( 5.00000000E-01, 5.00000000E-01, -1.00000000E+00, -5.00000000E-01);
    _TMP73 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0269);
    _TMP270 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP73);
    _fx30 = _TMP270*_TMP270*(3.00000000E+00 - 2.00000000E+00*_TMP270);
    _x0279 = _fx_up - vec4( 1.50000000E+00, -5.00000000E-01, -1.50000000E+00, 0.00000000E+00);
    _TMP73 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0279);
    _TMP280 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP73);
    _fx60 = _TMP280*_TMP280*(3.00000000E+00 - 2.00000000E+00*_TMP280);
    _a0291 = _r0151 - _r0141;
    _TMP288 = abs(_a0291);
    _a0295 = _r0151 - _r0141.zwxy;
    _TMP292 = abs(_a0295);
    _a0299 = _r0141.wxyz - _r0181;
    _TMP296 = abs(_a0299);
    _a0303 = _r0141.wxyz - _r0181.yzwx;
    _TMP300 = abs(_a0303);
    _a0307 = _r0131.zwxy - _r0131.wxyz;
    _TMP304 = abs(_a0307);
    _TMP32 = _TMP288 + _TMP292 + _TMP296 + _TMP300 + 4.00000000E+00*_TMP304;
    _a0313 = _r0131.zwxy - _r0131.yzwx;
    _TMP310 = abs(_a0313);
    _a0317 = _r0131.zwxy - _r0171;
    _TMP314 = abs(_a0317);
    _a0321 = _r0131.wxyz - _r0161;
    _TMP318 = abs(_a0321);
    _a0325 = _r0131.wxyz - _r0131;
    _TMP322 = abs(_a0325);
    _a0329 = _r0151 - _r0141.wxyz;
    _TMP326 = abs(_a0329);
    _TMP33 = _TMP310 + _TMP314 + _TMP318 + _TMP322 + 4.00000000E+00*_TMP326;
    _edr = bvec4((_TMP32 + 3.50000000E+00).x < _TMP33.x && _interp_restriction_lv1.x, (_TMP32 + 3.50000000E+00).y < _TMP33.y && _interp_restriction_lv1.y, (_TMP32 + 3.50000000E+00).z < _TMP33.z && _interp_restriction_lv1.z, (_TMP32 + 3.50000000E+00).w < _TMP33.w && _interp_restriction_lv1.w);
    _a0333 = _r0131.wxyz - _r0141.zwxy;
    _TMP330 = abs(_a0333);
    _a0337 = _r0131.zwxy - _r0141;
    _TMP334 = abs(_a0337);
    _edr_left = bvec4((2.00000000E+00*_TMP330).x <= _TMP334.x && _interp_restriction_lv2_left.x, (2.00000000E+00*_TMP330).y <= _TMP334.y && _interp_restriction_lv2_left.y, (2.00000000E+00*_TMP330).z <= _TMP334.z && _interp_restriction_lv2_left.z, (2.00000000E+00*_TMP330).w <= _TMP334.w && _interp_restriction_lv2_left.w);
    _a0341 = _r0131.wxyz - _r0141.zwxy;
    _TMP338 = abs(_a0341);
    _a0345 = _r0131.zwxy - _r0141;
    _TMP342 = abs(_a0345);
    _edr_up = bvec4(_TMP338.x >= (2.00000000E+00*_TMP342).x && _interp_restriction_lv2_up.x, _TMP338.y >= (2.00000000E+00*_TMP342).y && _interp_restriction_lv2_up.y, _TMP338.z >= (2.00000000E+00*_TMP342).z && _interp_restriction_lv2_up.z, _TMP338.w >= (2.00000000E+00*_TMP342).w && _interp_restriction_lv2_up.w);
    _nc45 = bvec4(_edr.x && bool(_fx45.x), _edr.y && bool(_fx45.y), _edr.z && bool(_fx45.z), _edr.w && bool(_fx45.w));
    _nc30 = bvec4(_edr.x && _edr_left.x && bool(_fx30.x), _edr.y && _edr_left.y && bool(_fx30.y), _edr.z && _edr_left.z && bool(_fx30.z), _edr.w && _edr_left.w && bool(_fx30.w));
    _nc60 = bvec4(_edr.x && _edr_up.x && bool(_fx60.x), _edr.y && _edr_up.y && bool(_fx60.y), _edr.z && _edr_up.z && bool(_fx60.z), _edr.w && _edr_up.w && bool(_fx60.w));
    _a0349 = _r0151 - _r0131.wxyz;
    _TMP346 = abs(_a0349);
    _a0353 = _r0151 - _r0131.zwxy;
    _TMP350 = abs(_a0353);
    _px = bvec4(_TMP346.x <= _TMP350.x, _TMP346.y <= _TMP350.y, _TMP346.z <= _TMP350.z, _TMP346.w <= _TMP350.w);
    _aa = _TMP4.xyz - _TMP1.xyz;
    _bb = _TMP7.xyz - _TMP4.xyz;
    _cc = _TMP10.xyz - _TMP7.xyz;
    _dd = _TMP13.xyz - _TMP10.xyz;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_TMP7.x < 5.00000000E-01 ? (2.00000000E+00*_TMP7.xyz).x : (2.00000000E+00*(1.00000000E+00 - _TMP7.xyz)).x, _TMP7.y < 5.00000000E-01 ? (2.00000000E+00*_TMP7.xyz).y : (2.00000000E+00*(1.00000000E+00 - _TMP7.xyz)).y, _TMP7.z < 5.00000000E-01 ? (2.00000000E+00*_TMP7.xyz).z : (2.00000000E+00*(1.00000000E+00 - _TMP7.xyz)).z);
    _TMP40 = abs(_bb);
    _b0357 = 6.49999976E-01*_TMP40;
    _m = min(_m, _b0357);
    _TMP41 = abs(_cc);
    _b0361 = 6.49999976E-01*_TMP41;
    _m = min(_m, _b0361);
    _a0363 = -_m;
    _TMP66 = min(_m, _t);
    _TMP362 = max(_a0363, _TMP66);
    _s1 = (2.00000000E+00*_fp.y - 1.00000000E+00)*_TMP362 + _TMP7.xyz;
    _aa = _TMP6.xyz - _TMP16.xyz;
    _bb = _s1 - _TMP6.xyz;
    _cc = _TMP8.xyz - _s1;
    _dd = _TMP19.xyz - _TMP8.xyz;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_s1.x < 5.00000000E-01 ? (2.00000000E+00*_s1).x : (2.00000000E+00*(1.00000000E+00 - _s1)).x, _s1.y < 5.00000000E-01 ? (2.00000000E+00*_s1).y : (2.00000000E+00*(1.00000000E+00 - _s1)).y, _s1.z < 5.00000000E-01 ? (2.00000000E+00*_s1).z : (2.00000000E+00*(1.00000000E+00 - _s1)).z);
    _TMP42 = abs(_bb);
    _b0371 = 6.49999976E-01*_TMP42;
    _m = min(_m, _b0371);
    _TMP43 = abs(_cc);
    _b0375 = 6.49999976E-01*_TMP43;
    _m = min(_m, _b0375);
    _a0377 = -_m;
    _TMP66 = min(_m, _t);
    _TMP376 = max(_a0377, _TMP66);
    _s0 = (2.00000000E+00*_fp.x - 1.00000000E+00)*_TMP376 + _s1;
    _nc = bvec4(_nc30.x || _nc60.x || _nc45.x, _nc30.y || _nc60.y || _nc45.y, _nc30.z || _nc60.z || _nc45.z, _nc30.w || _nc60.w || _nc45.w);
    _blend = 0.00000000E+00;
    _t0383 = vec4(float(_edr.x), float(_edr.y), float(_edr.z), float(_edr.w));
    _r1 = _r0151 + _t0383*(_r0131.wxyz - _r0151);
    _yeseq3 = false;
    _a0389 = _r1 - _r0151;
    _TMP386 = abs(_a0389);
    _TMP44 = bvec4(_TMP386.x < 5.00000000E+00, _TMP386.y < 5.00000000E+00, _TMP386.z < 5.00000000E+00, _TMP386.w < 5.00000000E+00);
    if (_TMP44.x && _TMP44.y && _TMP44.z && _TMP44.w) { 
        _yeseq3 = true;
        _res = _s0;
        _pix = _s0;
    } else {
        _res = _TMP7.xyz;
        _pix = _TMP7.xyz;
    } 
    _t0393 = vec4(float(_px.x), float(_px.y), float(_px.z), float(_px.w));
    _TMP47 = _r0131.wxyz + _t0393*(_r0131.zwxy - _r0131.wxyz);
    _a0399 = _r0151 - _TMP47;
    _TMP396 = abs(_a0399);
    _TMP48 = bvec4(_TMP396.x < 2.00000000E+00, _TMP396.y < 2.00000000E+00, _TMP396.z < 2.00000000E+00, _TMP396.w < 2.00000000E+00);
    _yes = bvec4(_yeseq3 && _TMP48.x, _yeseq3 && _TMP48.y, _yeseq3 && _TMP48.z, _yeseq3 && _TMP48.w);
    _final45 = vec4(float(_nc45.x), float(_nc45.y), float(_nc45.z), float(_nc45.w))*_fx45;
    _final30 = vec4(float(_nc30.x), float(_nc30.y), float(_nc30.z), float(_nc30.w))*_fx30;
    _final60 = vec4(float(_nc60.x), float(_nc60.y), float(_nc60.z), float(_nc60.w))*_fx60;
    _TMP49 = max(_final30, _final60);
    _maximo = max(_TMP49, _final45);
    if (_nc.x) { 
        if (_px.x) { 
            _TMP50 = _TMP8.xyz;
        } else {
            _TMP50 = _TMP10.xyz;
        } 
        _pix = _TMP50;
        _blend = _maximo.x;
        if (_yes.x) { 
            _res = _s0;
            _pix = _s0;
        } else {
            _res = _TMP7.xyz;
        } 
    } else {
        if (_nc.y) { 
            if (_px.y) { 
                _TMP52 = _TMP4.xyz;
            } else {
                _TMP52 = _TMP8.xyz;
            } 
            _pix = _TMP52;
            _blend = _maximo.y;
            if (_yes.y) { 
                _res = _s0;
                _pix = _s0;
            } else {
                _res = _TMP7.xyz;
            } 
        } else {
            if (_nc.z) { 
                if (_px.z) { 
                    _TMP54 = _TMP6.xyz;
                } else {
                    _TMP54 = _TMP4.xyz;
                } 
                _pix = _TMP54;
                _blend = _maximo.z;
                if (_yes.z) { 
                    _res = _s0;
                    _pix = _s0;
                } else {
                    _res = _TMP7.xyz;
                } 
            } else {
                if (_nc.w) { 
                    if (_px.w) { 
                        _TMP56 = _TMP10.xyz;
                    } else {
                        _TMP56 = _TMP6.xyz;
                    } 
                    _pix = _TMP56;
                    _blend = _maximo.w;
                    if (_yes.w) { 
                        _res = _s0;
                        _pix = _s0;
                    } else {
                        _res = _TMP7.xyz;
                    } 
                } 
            } 
        } 
    } 
    _TMP69 = pow(_res.x, 2.40000010E+00);
    _TMP70 = pow(_res.y, 2.40000010E+00);
    _TMP71 = pow(_res.z, 2.40000010E+00);
    _res = vec3(_TMP69, _TMP70, _TMP71);
    _TMP69 = pow(_pix.x, 2.40000010E+00);
    _TMP70 = pow(_pix.y, 2.40000010E+00);
    _TMP71 = pow(_pix.z, 2.40000010E+00);
    _pix = vec3(_TMP69, _TMP70, _TMP71);
    _res = _res + _blend*(_pix - _res);
    _TMP69 = pow(_res.x, 4.54545438E-01);
    _TMP70 = pow(_res.y, 4.54545438E-01);
    _TMP71 = pow(_res.z, 4.54545438E-01);
    _TMP58 = vec3(_TMP69, _TMP70, _TMP71);
    _TMP72 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _TMP58);
    _TMP430 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP72);
    _ret_0 = vec4(_TMP430.x, _TMP430.y, _TMP430.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
