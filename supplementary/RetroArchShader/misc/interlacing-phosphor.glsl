// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     float _frame_rotation1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct orig {
    vec2 _video_size1;
    vec2 _texture_size1;
    vec2 _output_dummy_size1;
    float _frame_count1;
    float _frame_direction1;
    float _frame_rotation1;
    vec2 _texCoord1;
};
vec4 _oPosition1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_VARYING vec4 COL0;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _oColor;
    vec2 _oTexCoord;
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0007;
    _oColor = COLOR;
    _oTexCoord = TexCoord.xy;
    gl_Position = _r0007;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     float _frame_rotation1;
struct input_dummy {
    vec2 _video_size1;
    vec2 _texture_size1;
    vec2 _output_dummy_size1;
    float _frame_count1;
    float _frame_direction1;
    float _frame_rotation1;
};
struct orig {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
    vec2 _texCoord1;
};
vec4 _ret_0;
float _TMP15;
float _TMP14;
float _TMP13;
float _TMP12;
float _TMP11;
vec3 _TMP8;
float _TMP7;
vec2 _TMP4;
vec4 _TMP2;
vec4 _TMP0;
uniform sampler2D Texture;
orig _ORIG1;
input_dummy _IN1;
vec2 _c0025;
vec3 _r0029;
vec2 _c0037;
vec3 _r0041;
vec2 _x0049;
vec2 _pos0051;
vec3 _mask0051;
float _TMP52;
float _x0053;
float _a0057;
float _c0057;
float _a0059;
float _c0069;
float _a0071;
float _TMP76;
float _x0077;
COMPAT_VARYING vec4 TEX0;
 
uniform COMPAT_PRECISION vec2 OrigTextureSize;
uniform COMPAT_PRECISION vec2 OrigInputSize;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _res;
    float _y;
    vec4 _lineblank;
    vec4 _lotte_mask;
    vec4 _dotMaskWeights;
    _res = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0025 = TEX0.xy + vec2(5.00000000E-01*(1.00000000E+00/TextureSize).x, 0.00000000E+00);
    _TMP0 = COMPAT_TEXTURE(Texture, _c0025);
    _r0029.x = dot(vec3( 2.98900008E-01, 5.87000012E-01, 1.14000000E-01), _TMP0.xyz);
    _c0037 = TEX0.xy - vec2(5.00000000E-01*(1.00000000E+00/TextureSize).x, 0.00000000E+00);
    _TMP2 = COMPAT_TEXTURE(Texture, _c0037);
    _r0041.x = dot(vec3( 2.98900008E-01, 5.87000012E-01, 1.14000000E-01), _TMP2.xyz);
    _lineblank = vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00);
    _x0049 = TEX0.xy*(TextureSize.xy/InputSize.xy)*OutputSize.xy;
    _TMP4 = floor(_x0049);
    _pos0051 = _TMP4 + vec2( 5.00000000E-01, 5.00000000E-01);
    _pos0051.x = _pos0051.x + _pos0051.y*3.00000000E+00;
    _mask0051 = vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00);
    _x0053 = _pos0051.x/6.00000000E+00;
    _TMP52 = fract(_x0053);
    if (_TMP52 < 3.33000004E-01) { 
        _mask0051.x = 1.00000000E+00;
    } else {
        if (_TMP52 < 6.66000009E-01) { 
            _mask0051.y = 1.00000000E+00;
        } else {
            _mask0051.z = 1.00000000E+00;
        } 
    } 
    _lotte_mask = vec4(_mask0051.x, _mask0051.y, _mask0051.z, 1.00000000E+00);
    _a0057 = (TEX0.x*TextureSize.x*OutputSize.x)/InputSize.x;
    _a0059 = _a0057/2.00000000E+00;
    _TMP11 = abs(_a0059);
    _TMP12 = fract(_TMP11);
    _TMP13 = abs(2.00000000E+00);
    _c0057 = _TMP12*_TMP13;
    if (_a0057 < 0.00000000E+00) { 
        _TMP14 = -_c0057;
    } else {
        _TMP14 = _c0057;
    } 
    _TMP7 = floor(_TMP14);
    _TMP8 = vec3( 1.00000000E+00, 6.99999988E-01, 1.00000000E+00) + _TMP7*vec3( -3.00000012E-01, 3.00000012E-01, -3.00000012E-01);
    _dotMaskWeights = vec4(_TMP8.x, _TMP8.y, _TMP8.z, 1.00000000E+00);
    if (OrigInputSize.y > 4.00000000E+02) { 
        _y = OrigTextureSize.y*TEX0.y + float(FrameCount);
        _lineblank = vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);
        _res = _res*1.10000002E+00;
    } else {
        _y = 2.00000000E+00*OrigTextureSize.y*TEX0.y;
    } 
    _a0071 = _y/2.00000000E+00;
    _TMP11 = abs(_a0071);
    _TMP12 = fract(_TMP11);
    _TMP13 = abs(2.00000000E+00);
    _c0069 = _TMP12*_TMP13;
    if (_y < 0.00000000E+00) { 
        _TMP14 = -_c0069;
    } else {
        _TMP14 = _c0069;
    } 
    if (_TMP14 > 9.99989986E-01) { 
        _ret_0 = (_res*_dotMaskWeights*_lotte_mask)*1.14999998E+00;
        FragColor = _ret_0;
        return;
    } else {
        _x0077 = (_r0029.x + _r0041.x)/2.00000000E+00;
        _TMP15 = min(6.99999988E-01, _x0077);
        _TMP76 = max(0.00000000E+00, _TMP15);
        _ret_0 = (vec4(_TMP76, _TMP76, _TMP76, _TMP76)*_lineblank*_res*_dotMaskWeights*_lotte_mask)*1.14999998E+00;
        FragColor = _ret_0;
        return;
    } 
    FragColor = _ret_0;
} 
#endif
