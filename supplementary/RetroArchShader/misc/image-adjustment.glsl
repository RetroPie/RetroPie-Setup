// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct output_dummy {
    vec4 _color1;
};
vec4 _oPosition1;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _oColor;
    vec2 _otexCoord;
    vec2 _shift;
    vec2 _overscan_coord;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0006;
    _oColor = COLOR;
    _shift = (5.00000000E-01*InputSize)/TextureSize;
    _overscan_coord = (TexCoord.xy - _shift) + _shift;
    _otexCoord = _overscan_coord;
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = _overscan_coord;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _color;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct output_dummy {
    vec4 _color;
};
vec4 _ret_0;
vec3 _TMP5;
float _TMP4;
float _TMP3;
float _TMP2;
float _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
vec3 _TMP29;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec3 _satColor;
    vec3 _conColor;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP1 = dot(_TMP0.xyz, vec3( 2.12599993E-01, 7.15200007E-01, 7.22000003E-02));
    _satColor = vec3(_TMP1, _TMP1, _TMP1) + (_TMP0.xyz - vec3(_TMP1, _TMP1, _TMP1));
    _conColor = vec3( 5.00000000E-01, 5.00000000E-01, 5.00000000E-01) + (_satColor - vec3( 5.00000000E-01, 5.00000000E-01, 5.00000000E-01));
    _TMP2 = pow(_conColor.x, 1.09090912E+00);
    _TMP3 = pow(_conColor.y, 1.09090912E+00);
    _TMP4 = pow(_conColor.z, 1.09090912E+00);
    _conColor = vec3(_TMP2, _TMP3, _TMP4);
    _TMP5 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _conColor);
    _TMP29 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP5);
    _ret_0 = vec4(_TMP29.x, _TMP29.y, _TMP29.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
