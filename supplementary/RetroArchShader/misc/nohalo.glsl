// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec2 _t6;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0018;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _ps;
    out_vertex _TMP14;
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _r0018 = VertexCoord.x*MVPMatrix[0];
    _r0018 = _r0018 + VertexCoord.y*MVPMatrix[1];
    _r0018 = _r0018 + VertexCoord.z*MVPMatrix[2];
    _r0018 = _r0018 + VertexCoord.w*MVPMatrix[3];
    _TMP14._t1 = vec4(TexCoord.x, TexCoord.y, TexCoord.x, TexCoord.y) + vec4(0.00000000E+00, -_ps.y, _ps.x, -_ps.y);
    _TMP14._t2 = vec4(TexCoord.x, TexCoord.y, TexCoord.x, TexCoord.y) + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _TMP14._t3 = vec4(TexCoord.x, TexCoord.y, TexCoord.x, TexCoord.y) + vec4(2.00000000E+00*_ps.x, 0.00000000E+00, -_ps.x, _ps.y);
    _TMP14._t4 = vec4(TexCoord.x, TexCoord.y, TexCoord.x, TexCoord.y) + vec4(0.00000000E+00, _ps.y, _ps.x, _ps.y);
    _TMP14._t5 = vec4(TexCoord.x, TexCoord.y, TexCoord.x, TexCoord.y) + vec4(2.00000000E+00*_ps.x, _ps.y, 0.00000000E+00, 2.00000000E+00*_ps.y);
    _TMP14._t6 = TexCoord.xy + vec2(_ps.x, 2.00000000E+00*_ps.y);
    _ret_0._position1 = _r0018;
    _ret_0._texCoord = TexCoord.xy;
    _ret_0._t1 = _TMP14._t1;
    _ret_0._t2 = _TMP14._t2;
    _ret_0._t3 = _TMP14._t3;
    _ret_0._t4 = _TMP14._t4;
    _ret_0._t5 = _TMP14._t5;
    _ret_0._t6 = _TMP14._t6;
    gl_Position = _r0018;
    TEX0.xy = TexCoord.xy;
    TEX1 = _TMP14._t1;
    TEX2 = _TMP14._t2;
    TEX3 = _TMP14._t3;
    TEX4 = _TMP14._t4;
    TEX5 = _TMP14._t5;
    TEX6.xy = _TMP14._t6;
    return;
    TEX0.xy = _ret_0._texCoord;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6.xy = _ret_0._t6;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec2 _t6;
};
vec4 _ret_0;
vec3 _TMP20;
vec3 _TMP19;
vec3 _TMP18;
vec3 _TMP24;
vec3 _TMP23;
vec3 _TMP22;
vec3 _TMP21;
vec3 _TMP17;
vec3 _TMP16;
vec3 _TMP15;
vec3 _TMP14;
vec3 _TMP13;
vec3 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0030;
vec3 _a10056;
vec3 _a20056;
vec3 _a30056;
vec3 _a40056;
vec3 _val0064;
vec3 _val0066;
vec3 _a10068;
vec3 _a20068;
vec3 _a30068;
vec3 _a40068;
vec3 _val0076;
vec3 _val0078;
vec3 _a10080;
vec3 _a20080;
vec3 _a30080;
vec3 _a40080;
vec3 _val0088;
vec3 _val0090;
vec3 _a10092;
vec3 _a20092;
vec3 _a30092;
vec3 _a40092;
vec3 _val0100;
vec3 _val0102;
vec3 _a10104;
vec3 _a20104;
vec3 _a30104;
vec3 _a40104;
vec3 _val0112;
vec3 _val0114;
vec3 _a10116;
vec3 _a20116;
vec3 _a30116;
vec3 _a40116;
vec3 _val0124;
vec3 _val0126;
vec3 _a10128;
vec3 _a20128;
vec3 _a30128;
vec3 _a40128;
vec3 _val0136;
vec3 _val0138;
vec3 _a10140;
vec3 _a20140;
vec3 _a30140;
vec3 _a40140;
vec3 _val0148;
vec3 _val0150;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _coord;
    vec3 _Varc3;
    vec3 _Varc4;
    vec3 _Varc7;
    vec3 _Varc8;
    vec3 _Varc34;
    vec3 _Varc78;
    _x0030 = TEX0.xy*TextureSize;
    _coord = fract(_x0030);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xy);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX2.xy);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX3.xy);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX4.xy);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX5.xy);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _a10056 = _TMP3.xyz - _TMP2.xyz;
    _a20056 = _TMP4.xyz - _TMP3.xyz;
    _TMP21 = abs(_a10056);
    _TMP22 = abs(_a20056);
    _a30056 = min(_TMP21, _TMP22);
    _val0064 = vec3(float((_a10056.x > 0.00000000E+00)), float((_a10056.y > 0.00000000E+00)), float((_a10056.z > 0.00000000E+00)));
    _TMP23 = _val0064 - vec3(float((_a10056.x < 0.00000000E+00)), float((_a10056.y < 0.00000000E+00)), float((_a10056.z < 0.00000000E+00)));
    _val0066 = vec3(float((_a20056.x > 0.00000000E+00)), float((_a20056.y > 0.00000000E+00)), float((_a20056.z > 0.00000000E+00)));
    _TMP24 = _val0066 - vec3(float((_a20056.x < 0.00000000E+00)), float((_a20056.y < 0.00000000E+00)), float((_a20056.z < 0.00000000E+00)));
    _a40056 = (_TMP23 + _TMP24)*5.00000000E-01;
    _TMP12 = _a30056*_a40056;
    _a10068 = _TMP3.xyz - _TMP0.xyz;
    _a20068 = _TMP7.xyz - _TMP3.xyz;
    _TMP21 = abs(_a10068);
    _TMP22 = abs(_a20068);
    _a30068 = min(_TMP21, _TMP22);
    _val0076 = vec3(float((_a10068.x > 0.00000000E+00)), float((_a10068.y > 0.00000000E+00)), float((_a10068.z > 0.00000000E+00)));
    _TMP23 = _val0076 - vec3(float((_a10068.x < 0.00000000E+00)), float((_a10068.y < 0.00000000E+00)), float((_a10068.z < 0.00000000E+00)));
    _val0078 = vec3(float((_a20068.x > 0.00000000E+00)), float((_a20068.y > 0.00000000E+00)), float((_a20068.z > 0.00000000E+00)));
    _TMP24 = _val0078 - vec3(float((_a20068.x < 0.00000000E+00)), float((_a20068.y < 0.00000000E+00)), float((_a20068.z < 0.00000000E+00)));
    _a40068 = (_TMP23 + _TMP24)*5.00000000E-01;
    _TMP13 = _a30068*_a40068;
    _Varc3 = _TMP3.xyz + _TMP12*_coord.x + _TMP13*_coord.y;
    _a10080 = _TMP4.xyz - _TMP3.xyz;
    _a20080 = _TMP5.xyz - _TMP4.xyz;
    _TMP21 = abs(_a10080);
    _TMP22 = abs(_a20080);
    _a30080 = min(_TMP21, _TMP22);
    _val0088 = vec3(float((_a10080.x > 0.00000000E+00)), float((_a10080.y > 0.00000000E+00)), float((_a10080.z > 0.00000000E+00)));
    _TMP23 = _val0088 - vec3(float((_a10080.x < 0.00000000E+00)), float((_a10080.y < 0.00000000E+00)), float((_a10080.z < 0.00000000E+00)));
    _val0090 = vec3(float((_a20080.x > 0.00000000E+00)), float((_a20080.y > 0.00000000E+00)), float((_a20080.z > 0.00000000E+00)));
    _TMP24 = _val0090 - vec3(float((_a20080.x < 0.00000000E+00)), float((_a20080.y < 0.00000000E+00)), float((_a20080.z < 0.00000000E+00)));
    _a40080 = (_TMP23 + _TMP24)*5.00000000E-01;
    _TMP14 = _a30080*_a40080;
    _a10092 = _TMP4.xyz - _TMP1.xyz;
    _a20092 = _TMP8.xyz - _TMP4.xyz;
    _TMP21 = abs(_a10092);
    _TMP22 = abs(_a20092);
    _a30092 = min(_TMP21, _TMP22);
    _val0100 = vec3(float((_a10092.x > 0.00000000E+00)), float((_a10092.y > 0.00000000E+00)), float((_a10092.z > 0.00000000E+00)));
    _TMP23 = _val0100 - vec3(float((_a10092.x < 0.00000000E+00)), float((_a10092.y < 0.00000000E+00)), float((_a10092.z < 0.00000000E+00)));
    _val0102 = vec3(float((_a20092.x > 0.00000000E+00)), float((_a20092.y > 0.00000000E+00)), float((_a20092.z > 0.00000000E+00)));
    _TMP24 = _val0102 - vec3(float((_a20092.x < 0.00000000E+00)), float((_a20092.y < 0.00000000E+00)), float((_a20092.z < 0.00000000E+00)));
    _a40092 = (_TMP23 + _TMP24)*5.00000000E-01;
    _TMP15 = _a30092*_a40092;
    _Varc4 = _TMP4.xyz + _TMP14*(_coord.x - 1.00000000E+00) + _TMP15*_coord.y;
    _a10104 = _TMP7.xyz - _TMP6.xyz;
    _a20104 = _TMP8.xyz - _TMP7.xyz;
    _TMP21 = abs(_a10104);
    _TMP22 = abs(_a20104);
    _a30104 = min(_TMP21, _TMP22);
    _val0112 = vec3(float((_a10104.x > 0.00000000E+00)), float((_a10104.y > 0.00000000E+00)), float((_a10104.z > 0.00000000E+00)));
    _TMP23 = _val0112 - vec3(float((_a10104.x < 0.00000000E+00)), float((_a10104.y < 0.00000000E+00)), float((_a10104.z < 0.00000000E+00)));
    _val0114 = vec3(float((_a20104.x > 0.00000000E+00)), float((_a20104.y > 0.00000000E+00)), float((_a20104.z > 0.00000000E+00)));
    _TMP24 = _val0114 - vec3(float((_a20104.x < 0.00000000E+00)), float((_a20104.y < 0.00000000E+00)), float((_a20104.z < 0.00000000E+00)));
    _a40104 = (_TMP23 + _TMP24)*5.00000000E-01;
    _TMP16 = _a30104*_a40104;
    _a10116 = _TMP7.xyz - _TMP3.xyz;
    _a20116 = _TMP10.xyz - _TMP7.xyz;
    _TMP21 = abs(_a10116);
    _TMP22 = abs(_a20116);
    _a30116 = min(_TMP21, _TMP22);
    _val0124 = vec3(float((_a10116.x > 0.00000000E+00)), float((_a10116.y > 0.00000000E+00)), float((_a10116.z > 0.00000000E+00)));
    _TMP23 = _val0124 - vec3(float((_a10116.x < 0.00000000E+00)), float((_a10116.y < 0.00000000E+00)), float((_a10116.z < 0.00000000E+00)));
    _val0126 = vec3(float((_a20116.x > 0.00000000E+00)), float((_a20116.y > 0.00000000E+00)), float((_a20116.z > 0.00000000E+00)));
    _TMP24 = _val0126 - vec3(float((_a20116.x < 0.00000000E+00)), float((_a20116.y < 0.00000000E+00)), float((_a20116.z < 0.00000000E+00)));
    _a40116 = (_TMP23 + _TMP24)*5.00000000E-01;
    _TMP17 = _a30116*_a40116;
    _Varc7 = _TMP7.xyz + _TMP16*_coord.x + _TMP17*(_coord.y - 1.00000000E+00);
    _a10128 = _TMP8.xyz - _TMP7.xyz;
    _a20128 = _TMP9.xyz - _TMP8.xyz;
    _TMP21 = abs(_a10128);
    _TMP22 = abs(_a20128);
    _a30128 = min(_TMP21, _TMP22);
    _val0136 = vec3(float((_a10128.x > 0.00000000E+00)), float((_a10128.y > 0.00000000E+00)), float((_a10128.z > 0.00000000E+00)));
    _TMP23 = _val0136 - vec3(float((_a10128.x < 0.00000000E+00)), float((_a10128.y < 0.00000000E+00)), float((_a10128.z < 0.00000000E+00)));
    _val0138 = vec3(float((_a20128.x > 0.00000000E+00)), float((_a20128.y > 0.00000000E+00)), float((_a20128.z > 0.00000000E+00)));
    _TMP24 = _val0138 - vec3(float((_a20128.x < 0.00000000E+00)), float((_a20128.y < 0.00000000E+00)), float((_a20128.z < 0.00000000E+00)));
    _a40128 = (_TMP23 + _TMP24)*5.00000000E-01;
    _TMP18 = _a30128*_a40128;
    _a10140 = _TMP8.xyz - _TMP4.xyz;
    _a20140 = _TMP11.xyz - _TMP8.xyz;
    _TMP21 = abs(_a10140);
    _TMP22 = abs(_a20140);
    _a30140 = min(_TMP21, _TMP22);
    _val0148 = vec3(float((_a10140.x > 0.00000000E+00)), float((_a10140.y > 0.00000000E+00)), float((_a10140.z > 0.00000000E+00)));
    _TMP23 = _val0148 - vec3(float((_a10140.x < 0.00000000E+00)), float((_a10140.y < 0.00000000E+00)), float((_a10140.z < 0.00000000E+00)));
    _val0150 = vec3(float((_a20140.x > 0.00000000E+00)), float((_a20140.y > 0.00000000E+00)), float((_a20140.z > 0.00000000E+00)));
    _TMP24 = _val0150 - vec3(float((_a20140.x < 0.00000000E+00)), float((_a20140.y < 0.00000000E+00)), float((_a20140.z < 0.00000000E+00)));
    _a40140 = (_TMP23 + _TMP24)*5.00000000E-01;
    _TMP19 = _a30140*_a40140;
    _Varc8 = _TMP8.xyz + _TMP18*(_coord.x - 1.00000000E+00) + _TMP19*(_coord.y - 1.00000000E+00);
    _Varc34 = _Varc3 + _coord.x*(_Varc4 - _Varc3);
    _Varc78 = _Varc7 + _coord.x*(_Varc8 - _Varc7);
    _TMP20 = _Varc34 + _coord.y*(_Varc78 - _Varc34);
    _ret_0 = vec4(_TMP20.x, _TMP20.y, _TMP20.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
