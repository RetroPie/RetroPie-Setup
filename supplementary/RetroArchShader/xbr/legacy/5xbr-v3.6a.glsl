// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
    vec4 _t1;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _OUT._t1.xy = vec2(_ps.x, 0.00000000E+00);
    _OUT._t1.zw = vec2(0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 _t1;
};
vec4 _ret_0;
vec3 _TMP29;
vec3 _TMP31;
vec3 _TMP33;
vec3 _TMP35;
vec3 _TMP36;
vec3 _TMP34;
vec3 _TMP32;
vec3 _TMP30;
vec4 _TMP22;
vec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0055;
vec2 _c0057;
vec2 _c0059;
vec2 _c0061;
vec2 _c0063;
vec2 _c0067;
vec2 _c0069;
vec2 _c0071;
vec2 _c0073;
vec2 _c0075;
vec2 _c0077;
vec2 _c0079;
vec2 _c0081;
vec2 _c0083;
vec2 _c0085;
vec2 _c0087;
vec2 _c0089;
vec2 _c0091;
vec2 _c0093;
vec2 _c0095;
vec2 _c0097;
vec4 _r0099;
vec4 _r0109;
vec4 _r0119;
vec4 _r0129;
vec4 _r0139;
vec4 _r0149;
vec4 _TMP160;
vec4 _a0163;
vec4 _TMP164;
vec4 _a0167;
vec4 _TMP168;
vec4 _a0171;
vec4 _TMP172;
vec4 _a0175;
vec4 _TMP176;
vec4 _a0179;
vec4 _TMP182;
vec4 _a0185;
vec4 _TMP186;
vec4 _a0189;
vec4 _TMP190;
vec4 _a0193;
vec4 _TMP194;
vec4 _a0197;
vec4 _TMP198;
vec4 _a0201;
vec4 _TMP202;
vec4 _a0205;
vec4 _TMP206;
vec4 _a0209;
vec4 _TMP210;
vec4 _a0213;
vec4 _TMP214;
vec4 _a0217;
vec4 _TMP218;
vec4 _a0221;
vec4 _TMP222;
vec4 _a0225;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    bvec4 _nc;
    bvec4 _fx;
    bvec4 _fx_left;
    bvec4 _fx_up;
    vec2 _fp;
    _x0055 = TEX0.xy*TextureSize;
    _fp = fract(_x0055);
    _c0057 = (TEX0.xy - TEX1.xy) - TEX1.zw;
    _TMP0 = COMPAT_TEXTURE(Texture, _c0057);
    _c0059 = TEX0.xy - TEX1.zw;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0059);
    _c0061 = (TEX0.xy + TEX1.xy) - TEX1.zw;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0061);
    _c0063 = TEX0.xy - TEX1.xy;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0063);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0067 = TEX0.xy + TEX1.xy;
    _TMP5 = COMPAT_TEXTURE(Texture, _c0067);
    _c0069 = (TEX0.xy - TEX1.xy) + TEX1.zw;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0069);
    _c0071 = TEX0.xy + TEX1.zw;
    _TMP7 = COMPAT_TEXTURE(Texture, _c0071);
    _c0073 = TEX0.xy + TEX1.xy + TEX1.zw;
    _TMP8 = COMPAT_TEXTURE(Texture, _c0073);
    _c0075 = (TEX0.xy - TEX1.xy) - 2.00000000E+00*TEX1.zw;
    _TMP9 = COMPAT_TEXTURE(Texture, _c0075);
    _c0077 = (TEX0.xy + TEX1.xy) - 2.00000000E+00*TEX1.zw;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0077);
    _c0079 = (TEX0.xy - 2.00000000E+00*TEX1.xy) - TEX1.zw;
    _TMP11 = COMPAT_TEXTURE(Texture, _c0079);
    _c0081 = (TEX0.xy - 2.00000000E+00*TEX1.xy) + TEX1.zw;
    _TMP12 = COMPAT_TEXTURE(Texture, _c0081);
    _c0083 = (TEX0.xy + 2.00000000E+00*TEX1.xy) - TEX1.zw;
    _TMP13 = COMPAT_TEXTURE(Texture, _c0083);
    _c0085 = TEX0.xy + 2.00000000E+00*TEX1.xy + TEX1.zw;
    _TMP14 = COMPAT_TEXTURE(Texture, _c0085);
    _c0087 = (TEX0.xy - TEX1.xy) + 2.00000000E+00*TEX1.zw;
    _TMP15 = COMPAT_TEXTURE(Texture, _c0087);
    _c0089 = TEX0.xy + TEX1.xy + 2.00000000E+00*TEX1.zw;
    _TMP16 = COMPAT_TEXTURE(Texture, _c0089);
    _c0091 = TEX0.xy - 2.00000000E+00*TEX1.zw;
    _TMP17 = COMPAT_TEXTURE(Texture, _c0091);
    _c0093 = TEX0.xy - 2.00000000E+00*TEX1.xy;
    _TMP18 = COMPAT_TEXTURE(Texture, _c0093);
    _c0095 = TEX0.xy + 2.00000000E+00*TEX1.zw;
    _TMP19 = COMPAT_TEXTURE(Texture, _c0095);
    _c0097 = TEX0.xy + 2.00000000E+00*TEX1.xy;
    _TMP20 = COMPAT_TEXTURE(Texture, _c0097);
    _r0099.x = dot(_TMP1.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0099.y = dot(_TMP3.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0099.z = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0099.w = dot(_TMP5.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0109.x = dot(_TMP2.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0109.y = dot(_TMP0.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0109.z = dot(_TMP6.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0109.w = dot(_TMP8.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0119.x = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0119.y = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0119.z = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0119.w = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0129.x = dot(_TMP14.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0129.y = dot(_TMP10.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0129.z = dot(_TMP11.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0129.w = dot(_TMP15.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0139.x = dot(_TMP16.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0139.y = dot(_TMP13.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0139.z = dot(_TMP9.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0139.w = dot(_TMP12.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0149.x = dot(_TMP19.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0149.y = dot(_TMP20.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0149.z = dot(_TMP17.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0149.w = dot(_TMP18.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _fx = bvec4((vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).x > 1.50000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).y > 5.00000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).z > -5.00000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).w > 5.00000000E-01);
    _fx_left = bvec4((vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).x > 1.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).y > 1.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).z > -5.00000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).w > 0.00000000E+00);
    _fx_up = bvec4((vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).x > 2.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).y > 0.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).z > -1.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).w > 5.00000000E-01);
    _interp_restriction_lv1 = bvec4(_r0119.x != _r0099.w && _r0119.x != _r0099.z, _r0119.y != _r0099.x && _r0119.y != _r0099.w, _r0119.z != _r0099.y && _r0119.z != _r0099.x, _r0119.w != _r0099.z && _r0119.w != _r0099.y);
    _interp_restriction_lv2_left = bvec4(_r0119.x != _r0109.z && _r0099.y != _r0109.z, _r0119.y != _r0109.w && _r0099.z != _r0109.w, _r0119.z != _r0109.x && _r0099.w != _r0109.x, _r0119.w != _r0109.y && _r0099.x != _r0109.y);
    _interp_restriction_lv2_up = bvec4(_r0119.x != _r0109.x && _r0099.x != _r0109.x, _r0119.y != _r0109.y && _r0099.y != _r0109.y, _r0119.z != _r0109.z && _r0099.z != _r0109.z, _r0119.w != _r0109.w && _r0099.w != _r0109.w);
    _a0163 = _r0119 - _r0109;
    _TMP160 = abs(_a0163);
    _a0167 = _r0119 - _r0109.zwxy;
    _TMP164 = abs(_a0167);
    _a0171 = _r0109.wxyz - _r0149;
    _TMP168 = abs(_a0171);
    _a0175 = _r0109.wxyz - _r0149.yzwx;
    _TMP172 = abs(_a0175);
    _a0179 = _r0099.zwxy - _r0099.wxyz;
    _TMP176 = abs(_a0179);
    _TMP21 = _TMP160 + _TMP164 + _TMP168 + _TMP172 + 4.00000000E+00*_TMP176;
    _a0185 = _r0099.zwxy - _r0099.yzwx;
    _TMP182 = abs(_a0185);
    _a0189 = _r0099.zwxy - _r0139;
    _TMP186 = abs(_a0189);
    _a0193 = _r0099.wxyz - _r0129;
    _TMP190 = abs(_a0193);
    _a0197 = _r0099.wxyz - _r0099;
    _TMP194 = abs(_a0197);
    _a0201 = _r0119 - _r0109.wxyz;
    _TMP198 = abs(_a0201);
    _TMP22 = _TMP182 + _TMP186 + _TMP190 + _TMP194 + 4.00000000E+00*_TMP198;
    _edr = bvec4(_TMP21.x < _TMP22.x && _interp_restriction_lv1.x, _TMP21.y < _TMP22.y && _interp_restriction_lv1.y, _TMP21.z < _TMP22.z && _interp_restriction_lv1.z, _TMP21.w < _TMP22.w && _interp_restriction_lv1.w);
    _a0205 = _r0099.wxyz - _r0109.zwxy;
    _TMP202 = abs(_a0205);
    _a0209 = _r0099.zwxy - _r0109;
    _TMP206 = abs(_a0209);
    _edr_left = bvec4((2.00000000E+00*_TMP202).x <= _TMP206.x && _interp_restriction_lv2_left.x, (2.00000000E+00*_TMP202).y <= _TMP206.y && _interp_restriction_lv2_left.y, (2.00000000E+00*_TMP202).z <= _TMP206.z && _interp_restriction_lv2_left.z, (2.00000000E+00*_TMP202).w <= _TMP206.w && _interp_restriction_lv2_left.w);
    _a0213 = _r0099.wxyz - _r0109.zwxy;
    _TMP210 = abs(_a0213);
    _a0217 = _r0099.zwxy - _r0109;
    _TMP214 = abs(_a0217);
    _edr_up = bvec4(_TMP210.x >= (2.00000000E+00*_TMP214).x && _interp_restriction_lv2_up.x, _TMP210.y >= (2.00000000E+00*_TMP214).y && _interp_restriction_lv2_up.y, _TMP210.z >= (2.00000000E+00*_TMP214).z && _interp_restriction_lv2_up.z, _TMP210.w >= (2.00000000E+00*_TMP214).w && _interp_restriction_lv2_up.w);
    _nc = bvec4(_edr.x && (_fx.x || _edr_left.x && _fx_left.x || _edr_up.x && _fx_up.x), _edr.y && (_fx.y || _edr_left.y && _fx_left.y || _edr_up.y && _fx_up.y), _edr.z && (_fx.z || _edr_left.z && _fx_left.z || _edr_up.z && _fx_up.z), _edr.w && (_fx.w || _edr_left.w && _fx_left.w || _edr_up.w && _fx_up.w));
    _a0221 = _r0119 - _r0099.wxyz;
    _TMP218 = abs(_a0221);
    _a0225 = _r0119 - _r0099.zwxy;
    _TMP222 = abs(_a0225);
    _px = bvec4(_TMP218.x <= _TMP222.x, _TMP218.y <= _TMP222.y, _TMP218.z <= _TMP222.z, _TMP218.w <= _TMP222.w);
    if (_nc.x) { 
        if (_px.x) { 
            _TMP30 = _TMP5.xyz;
        } else {
            _TMP30 = _TMP7.xyz;
        } 
        _TMP29 = _TMP30;
    } else {
        if (_nc.y) { 
            if (_px.y) { 
                _TMP32 = _TMP1.xyz;
            } else {
                _TMP32 = _TMP5.xyz;
            } 
            _TMP31 = _TMP32;
        } else {
            if (_nc.z) { 
                if (_px.z) { 
                    _TMP34 = _TMP3.xyz;
                } else {
                    _TMP34 = _TMP1.xyz;
                } 
                _TMP33 = _TMP34;
            } else {
                if (_nc.w) { 
                    if (_px.w) { 
                        _TMP36 = _TMP7.xyz;
                    } else {
                        _TMP36 = _TMP3.xyz;
                    } 
                    _TMP35 = _TMP36;
                } else {
                    _TMP35 = _TMP4.xyz;
                } 
                _TMP33 = _TMP35;
            } 
            _TMP31 = _TMP33;
        } 
        _TMP29 = _TMP31;
    } 
    _ret_0 = vec4(_TMP29.x, _TMP29.y, _TMP29.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
