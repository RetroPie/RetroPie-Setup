// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
float _TMP55;
float _TMP54;
float _TMP53;
vec3 _TMP52;
vec3 _TMP51;
vec3 _TMP50;
vec3 _TMP49;
vec3 _TMP48;
vec3 _TMP47;
vec3 _TMP46;
vec3 _TMP45;
vec4 _TMP44;
vec4 _TMP43;
vec4 _TMP42;
vec4 _TMP35;
vec4 _TMP34;
vec4 _TMP63;
bvec4 _TMP33;
bvec4 _TMP32;
bvec4 _TMP31;
bvec4 _TMP30;
bvec4 _TMP29;
bvec4 _TMP28;
bvec4 _TMP27;
bvec4 _TMP26;
bvec4 _TMP25;
bvec4 _TMP24;
bvec4 _TMP23;
bvec4 _TMP22;
bvec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0077;
vec4 _r0121;
vec4 _r0131;
vec4 _r0141;
vec4 _r0151;
vec4 _r0161;
vec4 _r0171;
vec4 _TMP182;
vec4 _a0185;
vec4 _TMP188;
vec4 _a0191;
vec4 _TMP194;
vec4 _a0197;
vec4 _TMP200;
vec4 _a0203;
vec4 _TMP206;
vec4 _a0209;
vec4 _TMP212;
vec4 _a0215;
vec4 _TMP218;
vec4 _a0221;
vec4 _TMP224;
vec4 _a0227;
vec4 _TMP230;
vec4 _a0233;
vec4 _TMP236;
vec4 _a0239;
vec4 _TMP242;
vec4 _a0245;
vec4 _TMP248;
vec4 _a0251;
vec4 _TMP254;
vec4 _a0257;
vec4 _x0261;
vec4 _TMP262;
vec4 _x0271;
vec4 _TMP272;
vec4 _x0281;
vec4 _TMP282;
vec4 _x0291;
vec4 _TMP292;
vec4 _x0301;
vec4 _TMP302;
vec4 _TMP310;
vec4 _a0313;
vec4 _TMP314;
vec4 _a0317;
vec4 _TMP318;
vec4 _a0321;
vec4 _TMP322;
vec4 _a0325;
vec4 _TMP326;
vec4 _a0329;
vec4 _TMP332;
vec4 _a0335;
vec4 _TMP336;
vec4 _a0339;
vec4 _TMP340;
vec4 _a0343;
vec4 _TMP344;
vec4 _a0347;
vec4 _TMP348;
vec4 _a0351;
vec4 _TMP352;
vec4 _a0355;
vec4 _TMP356;
vec4 _a0359;
vec4 _TMP360;
vec4 _a0363;
vec4 _TMP364;
vec4 _a0367;
vec4 _TMP368;
vec4 _a0371;
vec4 _TMP372;
vec4 _a0375;
vec3 _df0389;
vec3 _a0391;
vec3 _df0393;
vec3 _a0395;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    bvec4 _interp_restriction_lv3_left;
    bvec4 _interp_restriction_lv3_up;
    bvec4 _nc;
    bvec4 _nc30;
    bvec4 _nc60;
    bvec4 _nc45;
    bvec4 _nc15;
    bvec4 _nc75;
    vec4 _fx;
    vec4 _fx_left;
    vec4 _fx_up;
    vec4 _fx3_left;
    vec4 _fx3_up;
    vec3 _res1;
    vec3 _res2;
    vec3 _pix1;
    vec3 _pix2;
    float _blend1;
    float _blend2;
    vec2 _fp;
    vec4 _fx45;
    vec4 _fx30;
    vec4 _fx60;
    vec4 _fx15;
    vec4 _fx75;
    vec4 _final45;
    vec4 _final30;
    vec4 _final60;
    vec4 _final15;
    vec4 _final75;
    vec4 _maximo;
    vec3 _res;
    _x0077 = TEX0.xy*TextureSize;
    _fp = fract(_x0077);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _r0121.x = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0121.y = dot(_TMP6.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0121.z = dot(_TMP10.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0121.w = dot(_TMP8.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0131.x = dot(_TMP5.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0131.y = dot(_TMP3.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0131.z = dot(_TMP9.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0131.w = dot(_TMP11.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0141.x = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0141.y = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0141.z = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0141.w = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0151.x = dot(_TMP20.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0151.y = dot(_TMP2.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0151.z = dot(_TMP15.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0151.w = dot(_TMP12.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0161.x = dot(_TMP14.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0161.y = dot(_TMP18.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0161.z = dot(_TMP0.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0161.w = dot(_TMP17.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0171.x = dot(_TMP13.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0171.y = dot(_TMP19.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0171.z = dot(_TMP1.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0171.w = dot(_TMP16.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _fx = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x;
    _fx_left = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x;
    _fx_up = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x;
    _fx3_left = vec4( 6.00000000E+00, -2.00000000E+00, -6.00000000E+00, 2.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 6.00000000E+00, -2.00000000E+00, -6.00000000E+00)*_fp.x;
    _fx3_up = vec4( 2.00000000E+00, -6.00000000E+00, -2.00000000E+00, 6.00000000E+00)*_fp.y + vec4( 6.00000000E+00, 2.00000000E+00, -6.00000000E+00, -2.00000000E+00)*_fp.x;
    _a0185 = _r0121.wxyz - _r0121;
    _TMP182 = abs(_a0185);
    _TMP21 = bvec4(_TMP182.x < 1.00000000E+01, _TMP182.y < 1.00000000E+01, _TMP182.z < 1.00000000E+01, _TMP182.w < 1.00000000E+01);
    _a0191 = _r0121.zwxy - _r0121.yzwx;
    _TMP188 = abs(_a0191);
    _TMP22 = bvec4(_TMP188.x < 1.00000000E+01, _TMP188.y < 1.00000000E+01, _TMP188.z < 1.00000000E+01, _TMP188.w < 1.00000000E+01);
    _a0197 = _r0141 - _r0131.wxyz;
    _TMP194 = abs(_a0197);
    _TMP23 = bvec4(_TMP194.x < 1.00000000E+01, _TMP194.y < 1.00000000E+01, _TMP194.z < 1.00000000E+01, _TMP194.w < 1.00000000E+01);
    _a0203 = _r0121.wxyz - _r0151;
    _TMP200 = abs(_a0203);
    _TMP24 = bvec4(_TMP200.x < 1.00000000E+01, _TMP200.y < 1.00000000E+01, _TMP200.z < 1.00000000E+01, _TMP200.w < 1.00000000E+01);
    _a0209 = _r0121.zwxy - _r0161;
    _TMP206 = abs(_a0209);
    _TMP25 = bvec4(_TMP206.x < 1.00000000E+01, _TMP206.y < 1.00000000E+01, _TMP206.z < 1.00000000E+01, _TMP206.w < 1.00000000E+01);
    _a0215 = _r0141 - _r0131.zwxy;
    _TMP212 = abs(_a0215);
    _TMP26 = bvec4(_TMP212.x < 1.00000000E+01, _TMP212.y < 1.00000000E+01, _TMP212.z < 1.00000000E+01, _TMP212.w < 1.00000000E+01);
    _a0221 = _r0141 - _r0131;
    _TMP218 = abs(_a0221);
    _TMP27 = bvec4(_TMP218.x < 1.00000000E+01, _TMP218.y < 1.00000000E+01, _TMP218.z < 1.00000000E+01, _TMP218.w < 1.00000000E+01);
    _a0227 = _r0121 - _r0151.yzwx;
    _TMP224 = abs(_a0227);
    _TMP28 = bvec4(_TMP224.x < 1.00000000E+01, _TMP224.y < 1.00000000E+01, _TMP224.z < 1.00000000E+01, _TMP224.w < 1.00000000E+01);
    _a0233 = _r0121.yzwx - _r0161.wxyz;
    _TMP230 = abs(_a0233);
    _TMP29 = bvec4(_TMP230.x < 1.00000000E+01, _TMP230.y < 1.00000000E+01, _TMP230.z < 1.00000000E+01, _TMP230.w < 1.00000000E+01);
    _interp_restriction_lv1 = bvec4(_r0141.x != _r0121.w && _r0141.x != _r0121.z && (!_TMP21.x && !_TMP22.x || _TMP23.x && !_TMP24.x && !_TMP25.x || _TMP26.x || _TMP27.x) && (_r0121.w != _r0171.y && _r0121.w != _r0131.w || _r0121.z != _r0171.x && _r0121.z != _r0131.w || _r0121.z != _r0131.z || _r0121.w != _r0131.x || _TMP28.x && _TMP29.x), _r0141.y != _r0121.x && _r0141.y != _r0121.w && (!_TMP21.y && !_TMP22.y || _TMP23.y && !_TMP24.y && !_TMP25.y || _TMP26.y || _TMP27.y) && (_r0121.x != _r0171.z && _r0121.x != _r0131.x || _r0121.w != _r0171.y && _r0121.w != _r0131.x || _r0121.w != _r0131.w || _r0121.x != _r0131.y || _TMP28.y && _TMP29.y), _r0141.z != _r0121.y && _r0141.z != _r0121.x && (!_TMP21.z && !_TMP22.z || _TMP23.z && !_TMP24.z && !_TMP25.z || _TMP26.z || _TMP27.z) && (_r0121.y != _r0171.w && _r0121.y != _r0131.y || _r0121.x != _r0171.z && _r0121.x != _r0131.y || _r0121.x != _r0131.x || _r0121.y != _r0131.z || _TMP28.z && _TMP29.z), _r0141.w != _r0121.z && _r0141.w != _r0121.y && (!_TMP21.w && !_TMP22.w || _TMP23.w && !_TMP24.w && !_TMP25.w || _TMP26.w || _TMP27.w) && (_r0121.z != _r0171.x && _r0121.z != _r0131.z || _r0121.y != _r0171.w && _r0121.y != _r0131.z || _r0121.y != _r0131.y || _r0121.z != _r0131.w || _TMP28.w && _TMP29.w));
    _interp_restriction_lv2_left = bvec4(_r0141.x != _r0131.z && _r0121.y != _r0131.z, _r0141.y != _r0131.w && _r0121.z != _r0131.w, _r0141.z != _r0131.x && _r0121.w != _r0131.x, _r0141.w != _r0131.y && _r0121.x != _r0131.y);
    _interp_restriction_lv2_up = bvec4(_r0141.x != _r0131.x && _r0121.x != _r0131.x, _r0141.y != _r0131.y && _r0121.y != _r0131.y, _r0141.z != _r0131.z && _r0121.z != _r0131.z, _r0141.w != _r0131.w && _r0121.w != _r0131.w);
    _a0239 = _r0131.zwxy - _r0161.wxyz;
    _TMP236 = abs(_a0239);
    _TMP30 = bvec4(_TMP236.x < 2.00000000E+00, _TMP236.y < 2.00000000E+00, _TMP236.z < 2.00000000E+00, _TMP236.w < 2.00000000E+00);
    _a0245 = _r0171.wxyz - _r0161.wxyz;
    _TMP242 = abs(_a0245);
    _TMP31 = bvec4(_TMP242.x < 2.00000000E+00, _TMP242.y < 2.00000000E+00, _TMP242.z < 2.00000000E+00, _TMP242.w < 2.00000000E+00);
    _interp_restriction_lv3_left = bvec4(_TMP30.x && !_TMP31.x, _TMP30.y && !_TMP31.y, _TMP30.z && !_TMP31.z, _TMP30.w && !_TMP31.w);
    _a0251 = _r0131 - _r0151.yzwx;
    _TMP248 = abs(_a0251);
    _TMP32 = bvec4(_TMP248.x < 2.00000000E+00, _TMP248.y < 2.00000000E+00, _TMP248.z < 2.00000000E+00, _TMP248.w < 2.00000000E+00);
    _a0257 = _r0171.zwxy - _r0151.yzwx;
    _TMP254 = abs(_a0257);
    _TMP33 = bvec4(_TMP254.x < 2.00000000E+00, _TMP254.y < 2.00000000E+00, _TMP254.z < 2.00000000E+00, _TMP254.w < 2.00000000E+00);
    _interp_restriction_lv3_up = bvec4(_TMP32.x && !_TMP33.x, _TMP32.y && !_TMP33.y, _TMP32.z && !_TMP33.z, _TMP32.w && !_TMP33.w);
    _x0261 = (_fx - vec4( 1.10000002E+00, 9.99999940E-02, -8.99999976E-01, 9.99999940E-02))/vec4( 7.99999952E-01, 7.99999952E-01, 7.99999952E-01, 7.99999952E-01);
    _TMP63 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0261);
    _TMP262 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP63);
    _fx45 = _TMP262*_TMP262*(3.00000000E+00 - 2.00000000E+00*_TMP262);
    _x0271 = (_fx_left - vec4( 6.00000024E-01, 6.00000024E-01, -8.99999976E-01, -4.00000006E-01))/vec4( 7.99999952E-01, 7.99999952E-01, 7.99999952E-01, 8.00000012E-01);
    _TMP63 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0271);
    _TMP272 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP63);
    _fx30 = _TMP272*_TMP272*(3.00000000E+00 - 2.00000000E+00*_TMP272);
    _x0281 = (_fx_up - vec4( 1.60000002E+00, -4.00000006E-01, -1.39999998E+00, 9.99999940E-02))/vec4( 8.00000072E-01, 8.00000012E-01, 7.99999952E-01, 7.99999952E-01);
    _TMP63 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0281);
    _TMP282 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP63);
    _fx60 = _TMP282*_TMP282*(3.00000000E+00 - 2.00000000E+00*_TMP282);
    _x0291 = (_fx3_left - vec4( 4.59999990E+00, 2.59999990E+00, -3.40000010E+00, -1.39999998E+00))/vec4( 8.00000191E-01, 8.00000191E-01, 8.00000191E-01, 7.99999952E-01);
    _TMP63 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0291);
    _TMP292 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP63);
    _fx15 = _TMP292*_TMP292*(3.00000000E+00 - 2.00000000E+00*_TMP292);
    _x0301 = (_fx3_up - vec4( 4.59999990E+00, -1.39999998E+00, -3.40000010E+00, 2.59999990E+00))/vec4( 8.00000191E-01, 7.99999952E-01, 8.00000191E-01, 8.00000191E-01);
    _TMP63 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0301);
    _TMP302 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP63);
    _fx75 = _TMP302*_TMP302*(3.00000000E+00 - 2.00000000E+00*_TMP302);
    _a0313 = _r0141 - _r0131;
    _TMP310 = abs(_a0313);
    _a0317 = _r0141 - _r0131.zwxy;
    _TMP314 = abs(_a0317);
    _a0321 = _r0131.wxyz - _r0171;
    _TMP318 = abs(_a0321);
    _a0325 = _r0131.wxyz - _r0171.yzwx;
    _TMP322 = abs(_a0325);
    _a0329 = _r0121.zwxy - _r0121.wxyz;
    _TMP326 = abs(_a0329);
    _TMP34 = _TMP310 + _TMP314 + _TMP318 + _TMP322 + 4.00000000E+00*_TMP326;
    _a0335 = _r0121.zwxy - _r0121.yzwx;
    _TMP332 = abs(_a0335);
    _a0339 = _r0121.zwxy - _r0161;
    _TMP336 = abs(_a0339);
    _a0343 = _r0121.wxyz - _r0151;
    _TMP340 = abs(_a0343);
    _a0347 = _r0121.wxyz - _r0121;
    _TMP344 = abs(_a0347);
    _a0351 = _r0141 - _r0131.wxyz;
    _TMP348 = abs(_a0351);
    _TMP35 = _TMP332 + _TMP336 + _TMP340 + _TMP344 + 4.00000000E+00*_TMP348;
    _edr = bvec4(_TMP34.x < _TMP35.x && _interp_restriction_lv1.x, _TMP34.y < _TMP35.y && _interp_restriction_lv1.y, _TMP34.z < _TMP35.z && _interp_restriction_lv1.z, _TMP34.w < _TMP35.w && _interp_restriction_lv1.w);
    _a0355 = _r0121.wxyz - _r0131.zwxy;
    _TMP352 = abs(_a0355);
    _a0359 = _r0121.zwxy - _r0131;
    _TMP356 = abs(_a0359);
    _edr_left = bvec4((2.00000000E+00*_TMP352).x <= _TMP356.x && _interp_restriction_lv2_left.x, (2.00000000E+00*_TMP352).y <= _TMP356.y && _interp_restriction_lv2_left.y, (2.00000000E+00*_TMP352).z <= _TMP356.z && _interp_restriction_lv2_left.z, (2.00000000E+00*_TMP352).w <= _TMP356.w && _interp_restriction_lv2_left.w);
    _a0363 = _r0121.wxyz - _r0131.zwxy;
    _TMP360 = abs(_a0363);
    _a0367 = _r0121.zwxy - _r0131;
    _TMP364 = abs(_a0367);
    _edr_up = bvec4(_TMP360.x >= (2.00000000E+00*_TMP364).x && _interp_restriction_lv2_up.x, _TMP360.y >= (2.00000000E+00*_TMP364).y && _interp_restriction_lv2_up.y, _TMP360.z >= (2.00000000E+00*_TMP364).z && _interp_restriction_lv2_up.z, _TMP360.w >= (2.00000000E+00*_TMP364).w && _interp_restriction_lv2_up.w);
    _nc45 = bvec4(_edr.x && bool(_fx45.x), _edr.y && bool(_fx45.y), _edr.z && bool(_fx45.z), _edr.w && bool(_fx45.w));
    _nc30 = bvec4(_edr.x && _edr_left.x && bool(_fx30.x), _edr.y && _edr_left.y && bool(_fx30.y), _edr.z && _edr_left.z && bool(_fx30.z), _edr.w && _edr_left.w && bool(_fx30.w));
    _nc60 = bvec4(_edr.x && _edr_up.x && bool(_fx60.x), _edr.y && _edr_up.y && bool(_fx60.y), _edr.z && _edr_up.z && bool(_fx60.z), _edr.w && _edr_up.w && bool(_fx60.w));
    _nc15 = bvec4(_edr.x && _edr_left.x && _interp_restriction_lv3_left.x && bool(_fx15.x), _edr.y && _edr_left.y && _interp_restriction_lv3_left.y && bool(_fx15.y), _edr.z && _edr_left.z && _interp_restriction_lv3_left.z && bool(_fx15.z), _edr.w && _edr_left.w && _interp_restriction_lv3_left.w && bool(_fx15.w));
    _nc75 = bvec4(_edr.x && _edr_up.x && _interp_restriction_lv3_up.x && bool(_fx75.x), _edr.y && _edr_up.y && _interp_restriction_lv3_up.y && bool(_fx75.y), _edr.z && _edr_up.z && _interp_restriction_lv3_up.z && bool(_fx75.z), _edr.w && _edr_up.w && _interp_restriction_lv3_up.w && bool(_fx75.w));
    _a0371 = _r0141 - _r0121.wxyz;
    _TMP368 = abs(_a0371);
    _a0375 = _r0141 - _r0121.zwxy;
    _TMP372 = abs(_a0375);
    _px = bvec4(_TMP368.x <= _TMP372.x, _TMP368.y <= _TMP372.y, _TMP368.z <= _TMP372.z, _TMP368.w <= _TMP372.w);
    _nc = bvec4(_nc75.x || _nc15.x || _nc30.x || _nc60.x || _nc45.x, _nc75.y || _nc15.y || _nc30.y || _nc60.y || _nc45.y, _nc75.z || _nc15.z || _nc30.z || _nc60.z || _nc45.z, _nc75.w || _nc15.w || _nc30.w || _nc60.w || _nc45.w);
    _final45 = vec4(float(_nc45.x), float(_nc45.y), float(_nc45.z), float(_nc45.w))*_fx45;
    _final30 = vec4(float(_nc30.x), float(_nc30.y), float(_nc30.z), float(_nc30.w))*_fx30;
    _final60 = vec4(float(_nc60.x), float(_nc60.y), float(_nc60.z), float(_nc60.w))*_fx60;
    _final15 = vec4(float(_nc15.x), float(_nc15.y), float(_nc15.z), float(_nc15.w))*_fx15;
    _final75 = vec4(float(_nc75.x), float(_nc75.y), float(_nc75.z), float(_nc75.w))*_fx75;
    _TMP42 = max(_final15, _final75);
    _TMP43 = max(_final30, _final60);
    _TMP44 = max(_TMP42, _TMP43);
    _maximo = max(_TMP44, _final45);
    if (_nc.x) { 
        if (_px.x) { 
            _TMP45 = _TMP8.xyz;
        } else {
            _TMP45 = _TMP10.xyz;
        } 
        _pix1 = _TMP45;
        _blend1 = _maximo.x;
    } else {
        if (_nc.y) { 
            if (_px.y) { 
                _TMP46 = _TMP4.xyz;
            } else {
                _TMP46 = _TMP8.xyz;
            } 
            _pix1 = _TMP46;
            _blend1 = _maximo.y;
        } else {
            if (_nc.z) { 
                if (_px.z) { 
                    _TMP47 = _TMP6.xyz;
                } else {
                    _TMP47 = _TMP4.xyz;
                } 
                _pix1 = _TMP47;
                _blend1 = _maximo.z;
            } else {
                if (_nc.w) { 
                    if (_px.w) { 
                        _TMP48 = _TMP10.xyz;
                    } else {
                        _TMP48 = _TMP6.xyz;
                    } 
                    _pix1 = _TMP48;
                    _blend1 = _maximo.w;
                } 
            } 
        } 
    } 
    if (_nc.w) { 
        if (_px.w) { 
            _TMP49 = _TMP10.xyz;
        } else {
            _TMP49 = _TMP6.xyz;
        } 
        _pix2 = _TMP49;
        _blend2 = _maximo.w;
    } else {
        if (_nc.z) { 
            if (_px.z) { 
                _TMP50 = _TMP6.xyz;
            } else {
                _TMP50 = _TMP4.xyz;
            } 
            _pix2 = _TMP50;
            _blend2 = _maximo.z;
        } else {
            if (_nc.y) { 
                if (_px.y) { 
                    _TMP51 = _TMP4.xyz;
                } else {
                    _TMP51 = _TMP8.xyz;
                } 
                _pix2 = _TMP51;
                _blend2 = _maximo.y;
            } else {
                if (_nc.x) { 
                    if (_px.x) { 
                        _TMP52 = _TMP8.xyz;
                    } else {
                        _TMP52 = _TMP10.xyz;
                    } 
                    _pix2 = _TMP52;
                    _blend2 = _maximo.x;
                } 
            } 
        } 
    } 
    _res1 = _TMP7.xyz + _blend1*(_pix1 - _TMP7.xyz);
    _res2 = _TMP7.xyz + _blend2*(_pix2 - _TMP7.xyz);
    _a0391 = _TMP7.xyz - _res1;
    _df0389 = abs(_a0391);
    _TMP53 = _df0389.x + _df0389.y + _df0389.z;
    _a0395 = _TMP7.xyz - _res2;
    _df0393 = abs(_a0395);
    _TMP54 = _df0393.x + _df0393.y + _df0393.z;
    _TMP55 = float((_TMP54 >= _TMP53));
    _res = _res1 + _TMP55*(_res2 - _res1);
    _ret_0 = vec4(_res.x, _res.y, _res.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
