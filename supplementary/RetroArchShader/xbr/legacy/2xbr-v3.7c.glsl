// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
vec3 _TMP43;
vec3 _TMP42;
vec3 _TMP41;
vec3 _TMP40;
vec4 _TMP33;
vec4 _TMP32;
bvec4 _TMP31;
bvec4 _TMP30;
bvec4 _TMP29;
bvec4 _TMP28;
bvec4 _TMP27;
bvec4 _TMP26;
bvec4 _TMP25;
bvec4 _TMP24;
bvec4 _TMP23;
bvec4 _TMP22;
bvec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0063;
vec4 _r0107;
vec4 _r0117;
vec4 _r0127;
vec4 _r0137;
vec4 _r0147;
vec4 _r0157;
vec4 _TMP168;
vec4 _a0171;
vec4 _TMP174;
vec4 _a0177;
vec4 _TMP180;
vec4 _a0183;
vec4 _TMP186;
vec4 _a0189;
vec4 _TMP192;
vec4 _a0195;
vec4 _TMP198;
vec4 _a0201;
vec4 _TMP204;
vec4 _a0207;
vec4 _TMP210;
vec4 _a0213;
vec4 _TMP216;
vec4 _a0219;
vec4 _TMP222;
vec4 _a0225;
vec4 _TMP228;
vec4 _a0231;
vec4 _TMP234;
vec4 _a0237;
vec4 _TMP238;
vec4 _a0241;
vec4 _TMP242;
vec4 _a0245;
vec4 _TMP246;
vec4 _a0249;
vec4 _TMP250;
vec4 _a0253;
vec4 _TMP256;
vec4 _a0259;
vec4 _TMP260;
vec4 _a0263;
vec4 _TMP264;
vec4 _a0267;
vec4 _TMP268;
vec4 _a0271;
vec4 _TMP272;
vec4 _a0275;
vec4 _TMP276;
vec4 _a0279;
vec4 _TMP280;
vec4 _a0283;
vec4 _TMP284;
vec4 _a0287;
vec4 _TMP288;
vec4 _a0291;
vec4 _TMP292;
vec4 _a0295;
vec4 _TMP296;
vec4 _a0299;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    vec2 _fp;
    vec3 _res;
    _x0063 = TEX0.xy*TextureSize;
    _fp = fract(_x0063);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _r0107.x = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0107.y = dot(_TMP6.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0107.z = dot(_TMP10.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0107.w = dot(_TMP8.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0117.x = dot(_TMP5.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0117.y = dot(_TMP3.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0117.z = dot(_TMP9.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0117.w = dot(_TMP11.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0127.x = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0127.y = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0127.z = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0127.w = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0137.x = dot(_TMP20.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0137.y = dot(_TMP2.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0137.z = dot(_TMP15.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0137.w = dot(_TMP12.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0147.x = dot(_TMP14.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0147.y = dot(_TMP18.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0147.z = dot(_TMP0.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0147.w = dot(_TMP17.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0157.x = dot(_TMP13.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0157.y = dot(_TMP19.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0157.z = dot(_TMP1.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0157.w = dot(_TMP16.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _a0171 = _r0107.wxyz - _r0107;
    _TMP168 = abs(_a0171);
    _TMP21 = bvec4(_TMP168.x < 1.50000000E+01, _TMP168.y < 1.50000000E+01, _TMP168.z < 1.50000000E+01, _TMP168.w < 1.50000000E+01);
    _a0177 = _r0107.wxyz - _r0117;
    _TMP174 = abs(_a0177);
    _TMP22 = bvec4(_TMP174.x < 1.50000000E+01, _TMP174.y < 1.50000000E+01, _TMP174.z < 1.50000000E+01, _TMP174.w < 1.50000000E+01);
    _a0183 = _r0107.zwxy - _r0107.yzwx;
    _TMP180 = abs(_a0183);
    _TMP23 = bvec4(_TMP180.x < 1.50000000E+01, _TMP180.y < 1.50000000E+01, _TMP180.z < 1.50000000E+01, _TMP180.w < 1.50000000E+01);
    _a0189 = _r0107.zwxy - _r0117.zwxy;
    _TMP186 = abs(_a0189);
    _TMP24 = bvec4(_TMP186.x < 1.50000000E+01, _TMP186.y < 1.50000000E+01, _TMP186.z < 1.50000000E+01, _TMP186.w < 1.50000000E+01);
    _a0195 = _r0127 - _r0117.wxyz;
    _TMP192 = abs(_a0195);
    _TMP25 = bvec4(_TMP192.x < 1.50000000E+01, _TMP192.y < 1.50000000E+01, _TMP192.z < 1.50000000E+01, _TMP192.w < 1.50000000E+01);
    _a0201 = _r0107.wxyz - _r0157.yzwx;
    _TMP198 = abs(_a0201);
    _TMP26 = bvec4(_TMP198.x < 1.50000000E+01, _TMP198.y < 1.50000000E+01, _TMP198.z < 1.50000000E+01, _TMP198.w < 1.50000000E+01);
    _a0207 = _r0107.wxyz - _r0137;
    _TMP204 = abs(_a0207);
    _TMP27 = bvec4(_TMP204.x < 1.50000000E+01, _TMP204.y < 1.50000000E+01, _TMP204.z < 1.50000000E+01, _TMP204.w < 1.50000000E+01);
    _a0213 = _r0107.zwxy - _r0157;
    _TMP210 = abs(_a0213);
    _TMP28 = bvec4(_TMP210.x < 1.50000000E+01, _TMP210.y < 1.50000000E+01, _TMP210.z < 1.50000000E+01, _TMP210.w < 1.50000000E+01);
    _a0219 = _r0107.zwxy - _r0147;
    _TMP216 = abs(_a0219);
    _TMP29 = bvec4(_TMP216.x < 1.50000000E+01, _TMP216.y < 1.50000000E+01, _TMP216.z < 1.50000000E+01, _TMP216.w < 1.50000000E+01);
    _a0225 = _r0127 - _r0117.zwxy;
    _TMP222 = abs(_a0225);
    _TMP30 = bvec4(_TMP222.x < 1.50000000E+01, _TMP222.y < 1.50000000E+01, _TMP222.z < 1.50000000E+01, _TMP222.w < 1.50000000E+01);
    _a0231 = _r0127 - _r0117;
    _TMP228 = abs(_a0231);
    _TMP31 = bvec4(_TMP228.x < 1.50000000E+01, _TMP228.y < 1.50000000E+01, _TMP228.z < 1.50000000E+01, _TMP228.w < 1.50000000E+01);
    _interp_restriction_lv1 = bvec4(_r0127.x != _r0107.w && _r0127.x != _r0107.z && (!_TMP21.x && !_TMP22.x || !_TMP23.x && !_TMP24.x || _TMP25.x && (!_TMP26.x && !_TMP27.x || !_TMP28.x && !_TMP29.x) || _TMP30.x || _TMP31.x), _r0127.y != _r0107.x && _r0127.y != _r0107.w && (!_TMP21.y && !_TMP22.y || !_TMP23.y && !_TMP24.y || _TMP25.y && (!_TMP26.y && !_TMP27.y || !_TMP28.y && !_TMP29.y) || _TMP30.y || _TMP31.y), _r0127.z != _r0107.y && _r0127.z != _r0107.x && (!_TMP21.z && !_TMP22.z || !_TMP23.z && !_TMP24.z || _TMP25.z && (!_TMP26.z && !_TMP27.z || !_TMP28.z && !_TMP29.z) || _TMP30.z || _TMP31.z), _r0127.w != _r0107.z && _r0127.w != _r0107.y && (!_TMP21.w && !_TMP22.w || !_TMP23.w && !_TMP24.w || _TMP25.w && (!_TMP26.w && !_TMP27.w || !_TMP28.w && !_TMP29.w) || _TMP30.w || _TMP31.w));
    _interp_restriction_lv2_left = bvec4(_r0127.x != _r0117.z && _r0107.y != _r0117.z, _r0127.y != _r0117.w && _r0107.z != _r0117.w, _r0127.z != _r0117.x && _r0107.w != _r0117.x, _r0127.w != _r0117.y && _r0107.x != _r0117.y);
    _interp_restriction_lv2_up = bvec4(_r0127.x != _r0117.x && _r0107.x != _r0117.x, _r0127.y != _r0117.y && _r0107.y != _r0117.y, _r0127.z != _r0117.z && _r0107.z != _r0117.z, _r0127.w != _r0117.w && _r0107.w != _r0117.w);
    _a0237 = _r0127 - _r0117;
    _TMP234 = abs(_a0237);
    _a0241 = _r0127 - _r0117.zwxy;
    _TMP238 = abs(_a0241);
    _a0245 = _r0117.wxyz - _r0157;
    _TMP242 = abs(_a0245);
    _a0249 = _r0117.wxyz - _r0157.yzwx;
    _TMP246 = abs(_a0249);
    _a0253 = _r0107.zwxy - _r0107.wxyz;
    _TMP250 = abs(_a0253);
    _TMP32 = _TMP234 + _TMP238 + _TMP242 + _TMP246 + 4.00000000E+00*_TMP250;
    _a0259 = _r0107.zwxy - _r0107.yzwx;
    _TMP256 = abs(_a0259);
    _a0263 = _r0107.zwxy - _r0147;
    _TMP260 = abs(_a0263);
    _a0267 = _r0107.wxyz - _r0137;
    _TMP264 = abs(_a0267);
    _a0271 = _r0107.wxyz - _r0107;
    _TMP268 = abs(_a0271);
    _a0275 = _r0127 - _r0117.wxyz;
    _TMP272 = abs(_a0275);
    _TMP33 = _TMP256 + _TMP260 + _TMP264 + _TMP268 + 4.00000000E+00*_TMP272;
    _edr = bvec4(_TMP32.x < _TMP33.x && _interp_restriction_lv1.x, _TMP32.y < _TMP33.y && _interp_restriction_lv1.y, _TMP32.z < _TMP33.z && _interp_restriction_lv1.z, _TMP32.w < _TMP33.w && _interp_restriction_lv1.w);
    _a0279 = _r0107.wxyz - _r0117.zwxy;
    _TMP276 = abs(_a0279);
    _a0283 = _r0107.zwxy - _r0117;
    _TMP280 = abs(_a0283);
    _edr_left = bvec4((2.00000000E+00*_TMP276).x <= _TMP280.x && _interp_restriction_lv2_left.x, (2.00000000E+00*_TMP276).y <= _TMP280.y && _interp_restriction_lv2_left.y, (2.00000000E+00*_TMP276).z <= _TMP280.z && _interp_restriction_lv2_left.z, (2.00000000E+00*_TMP276).w <= _TMP280.w && _interp_restriction_lv2_left.w);
    _a0287 = _r0107.wxyz - _r0117.zwxy;
    _TMP284 = abs(_a0287);
    _a0291 = _r0107.zwxy - _r0117;
    _TMP288 = abs(_a0291);
    _edr_up = bvec4(_TMP284.x >= (2.00000000E+00*_TMP288).x && _interp_restriction_lv2_up.x, _TMP284.y >= (2.00000000E+00*_TMP288).y && _interp_restriction_lv2_up.y, _TMP284.z >= (2.00000000E+00*_TMP288).z && _interp_restriction_lv2_up.z, _TMP284.w >= (2.00000000E+00*_TMP288).w && _interp_restriction_lv2_up.w);
    _a0295 = _r0127 - _r0107.wxyz;
    _TMP292 = abs(_a0295);
    _a0299 = _r0127 - _r0107.zwxy;
    _TMP296 = abs(_a0299);
    _px = bvec4(_TMP292.x <= _TMP296.x, _TMP292.y <= _TMP296.y, _TMP292.z <= _TMP296.z, _TMP292.w <= _TMP296.w);
    if (_px.x) { 
        _TMP40 = _TMP8.xyz;
    } else {
        _TMP40 = _TMP10.xyz;
    } 
    if (_px.y) { 
        _TMP41 = _TMP4.xyz;
    } else {
        _TMP41 = _TMP8.xyz;
    } 
    if (_px.z) { 
        _TMP42 = _TMP6.xyz;
    } else {
        _TMP42 = _TMP4.xyz;
    } 
    if (_px.w) { 
        _TMP43 = _TMP10.xyz;
    } else {
        _TMP43 = _TMP6.xyz;
    } 
    _res = _TMP7.xyz;
    if (_fp.x >= 5.00000000E-01) { 
        if (_fp.y >= 5.00000000E-01) { 
            if (_edr.x && _edr_left.x && _edr_up.x) { 
                _res = _TMP7.xyz + 8.33333015E-01*(_TMP40 - _TMP7.xyz);
            } else {
                if (_edr.x && (_edr_left.x || _edr_up.x)) { 
                    _res = _TMP7.xyz + 7.50000000E-01*(_TMP40 - _TMP7.xyz);
                } else {
                    if (_edr.y && _edr_left.y && _edr.w && _edr_up.w) { 
                        _res = _TMP7.xyz + 2.50000000E-01*(_TMP43 - _TMP7.xyz);
                    } else {
                        if (_edr.y && _edr_left.y) { 
                            _res = _TMP7.xyz + 2.50000000E-01*(_TMP41 - _TMP7.xyz);
                        } else {
                            if (_edr.w && _edr_up.w) { 
                                _res = _TMP7.xyz + 2.50000000E-01*(_TMP43 - _TMP7.xyz);
                            } else {
                                if (_edr.x) { 
                                    _res = _TMP7.xyz + 5.00000000E-01*(_TMP40 - _TMP7.xyz);
                                } 
                            } 
                        } 
                    } 
                } 
            } 
        } else {
            if (_edr.y && _edr_left.y && _edr_up.y) { 
                _res = _TMP7.xyz + 8.33333015E-01*(_TMP41 - _TMP7.xyz);
            } else {
                if (_edr.y && (_edr_left.y || _edr_up.y)) { 
                    _res = _TMP7.xyz + 7.50000000E-01*(_TMP41 - _TMP7.xyz);
                } else {
                    if (_edr.z && _edr_left.z && _edr.x && _edr_up.x) { 
                        _res = _TMP7.xyz + 2.50000000E-01*(_TMP40 - _TMP7.xyz);
                    } else {
                        if (_edr.z && _edr_left.z) { 
                            _res = _TMP7.xyz + 2.50000000E-01*(_TMP42 - _TMP7.xyz);
                        } else {
                            if (_edr.x && _edr_up.x) { 
                                _res = _TMP7.xyz + 2.50000000E-01*(_TMP40 - _TMP7.xyz);
                            } else {
                                if (_edr.y) { 
                                    _res = _TMP7.xyz + 5.00000000E-01*(_TMP41 - _TMP7.xyz);
                                } 
                            } 
                        } 
                    } 
                } 
            } 
        } 
    } else {
        if (_fp.y >= 5.00000000E-01) { 
            if (_edr.w && _edr_left.w && _edr_up.w) { 
                _res = _TMP7.xyz + 8.33333015E-01*(_TMP43 - _TMP7.xyz);
            } else {
                if (_edr.w && (_edr_left.w || _edr_up.w)) { 
                    _res = _TMP7.xyz + 7.50000000E-01*(_TMP43 - _TMP7.xyz);
                } else {
                    if (_edr.x && _edr_left.x && _edr.z && _edr_up.z) { 
                        _res = _TMP7.xyz + 2.50000000E-01*(_TMP42 - _TMP7.xyz);
                    } else {
                        if (_edr.x && _edr_left.x) { 
                            _res = _TMP7.xyz + 2.50000000E-01*(_TMP40 - _TMP7.xyz);
                        } else {
                            if (_edr.z && _edr_up.z) { 
                                _res = _TMP7.xyz + 2.50000000E-01*(_TMP42 - _TMP7.xyz);
                            } else {
                                if (_edr.w) { 
                                    _res = _TMP7.xyz + 5.00000000E-01*(_TMP43 - _TMP7.xyz);
                                } 
                            } 
                        } 
                    } 
                } 
            } 
        } else {
            if (_edr.z && _edr_left.z && _edr_up.z) { 
                _res = _TMP7.xyz + 8.33333015E-01*(_TMP42 - _TMP7.xyz);
            } else {
                if (_edr.z && (_edr_left.z || _edr_up.z)) { 
                    _res = _TMP7.xyz + 7.50000000E-01*(_TMP42 - _TMP7.xyz);
                } else {
                    if (_edr.w && _edr_left.w && _edr.y && _edr_up.y) { 
                        _res = _TMP7.xyz + 2.50000000E-01*(_TMP41 - _TMP7.xyz);
                    } else {
                        if (_edr.w && _edr_left.w) { 
                            _res = _TMP7.xyz + 2.50000000E-01*(_TMP43 - _TMP7.xyz);
                        } else {
                            if (_edr.y && _edr_up.y) { 
                                _res = _TMP7.xyz + 2.50000000E-01*(_TMP41 - _TMP7.xyz);
                            } else {
                                if (_edr.z) { 
                                    _res = _TMP7.xyz + 5.00000000E-01*(_TMP42 - _TMP7.xyz);
                                } 
                            } 
                        } 
                    } 
                } 
            } 
        } 
    } 
    _ret_0 = vec4(_res.x, _res.y, _res.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
