// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
vec3 _TMP43;
vec3 _TMP53;
float _TMP52;
float _TMP51;
float _TMP50;
float _TMP42;
float _TMP41;
float _TMP40;
vec3 _TMP39;
vec3 _TMP38;
vec3 _TMP37;
vec3 _TMP36;
vec3 _TMP35;
vec3 _TMP34;
vec3 _TMP33;
vec3 _TMP32;
vec3 _TMP31;
vec3 _TMP30;
vec4 _TMP29;
vec4 _TMP22;
vec4 _TMP21;
vec4 _TMP54;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0068;
vec4 _r0112;
vec4 _r0122;
vec4 _r0132;
vec4 _r0142;
vec4 _r0152;
vec4 _r0162;
vec4 _x0174;
vec4 _TMP175;
vec4 _x0184;
vec4 _TMP185;
vec4 _x0194;
vec4 _TMP195;
vec4 _TMP203;
vec4 _a0206;
vec4 _TMP207;
vec4 _a0210;
vec4 _TMP211;
vec4 _a0214;
vec4 _TMP215;
vec4 _a0218;
vec4 _TMP219;
vec4 _a0222;
vec4 _TMP225;
vec4 _a0228;
vec4 _TMP229;
vec4 _a0232;
vec4 _TMP233;
vec4 _a0236;
vec4 _TMP237;
vec4 _a0240;
vec4 _TMP241;
vec4 _a0244;
vec4 _TMP245;
vec4 _a0248;
vec4 _TMP249;
vec4 _a0252;
vec4 _TMP253;
vec4 _a0256;
vec4 _TMP257;
vec4 _a0260;
vec4 _TMP261;
vec4 _a0264;
vec4 _TMP265;
vec4 _a0268;
vec3 _df0302;
vec3 _a0304;
vec3 _df0306;
vec3 _a0308;
vec3 _TMP321;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    bvec4 _nc;
    bvec4 _nc30;
    bvec4 _nc60;
    bvec4 _nc45;
    vec4 _fx;
    vec4 _fx_left;
    vec4 _fx_up;
    vec3 _res1;
    vec3 _res2;
    vec3 _pix1;
    vec3 _pix2;
    float _blend1;
    float _blend2;
    vec2 _fp;
    vec3 _E;
    vec4 _fx45;
    vec4 _fx30;
    vec4 _fx60;
    vec4 _final45;
    vec4 _final30;
    vec4 _final60;
    vec4 _maximo;
    vec3 _res;
    _x0068 = TEX0.xy*TextureSize;
    _fp = fract(_x0068);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _r0112.x = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0112.y = dot(_TMP6.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0112.z = dot(_TMP10.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0112.w = dot(_TMP8.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0122.x = dot(_TMP5.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0122.y = dot(_TMP3.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0122.z = dot(_TMP9.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0122.w = dot(_TMP11.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0132.x = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0132.y = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0132.z = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0132.w = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0142.x = dot(_TMP20.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0142.y = dot(_TMP2.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0142.z = dot(_TMP15.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0142.w = dot(_TMP12.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0152.x = dot(_TMP14.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0152.y = dot(_TMP18.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0152.z = dot(_TMP0.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0152.w = dot(_TMP17.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0162.x = dot(_TMP13.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0162.y = dot(_TMP19.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0162.z = dot(_TMP1.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0162.w = dot(_TMP16.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _fx = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x;
    _fx_left = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x;
    _fx_up = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x;
    _interp_restriction_lv1 = bvec4(_r0132.x != _r0112.w && _r0132.x != _r0112.z, _r0132.y != _r0112.x && _r0132.y != _r0112.w, _r0132.z != _r0112.y && _r0132.z != _r0112.x, _r0132.w != _r0112.z && _r0132.w != _r0112.y);
    _interp_restriction_lv2_left = bvec4(_r0132.x != _r0122.z && _r0112.y != _r0122.z, _r0132.y != _r0122.w && _r0112.z != _r0122.w, _r0132.z != _r0122.x && _r0112.w != _r0122.x, _r0132.w != _r0122.y && _r0112.x != _r0122.y);
    _interp_restriction_lv2_up = bvec4(_r0132.x != _r0122.x && _r0112.x != _r0122.x, _r0132.y != _r0122.y && _r0112.y != _r0122.y, _r0132.z != _r0122.z && _r0112.z != _r0122.z, _r0132.w != _r0122.w && _r0112.w != _r0122.w);
    _x0174 = (_fx - vec4( 1.10000002E+00, 9.99999940E-02, -8.99999976E-01, 9.99999940E-02))/vec4( 7.99999952E-01, 7.99999952E-01, 7.99999952E-01, 7.99999952E-01);
    _TMP54 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0174);
    _TMP175 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP54);
    _fx45 = _TMP175*_TMP175*(3.00000000E+00 - 2.00000000E+00*_TMP175);
    _x0184 = (_fx_left - vec4( 6.00000024E-01, 6.00000024E-01, -8.99999976E-01, -4.00000006E-01))/vec4( 7.99999952E-01, 7.99999952E-01, 7.99999952E-01, 8.00000012E-01);
    _TMP54 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0184);
    _TMP185 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP54);
    _fx30 = _TMP185*_TMP185*(3.00000000E+00 - 2.00000000E+00*_TMP185);
    _x0194 = (_fx_up - vec4( 1.60000002E+00, -4.00000006E-01, -1.39999998E+00, 9.99999940E-02))/vec4( 8.00000072E-01, 8.00000012E-01, 7.99999952E-01, 7.99999952E-01);
    _TMP54 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0194);
    _TMP195 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP54);
    _fx60 = _TMP195*_TMP195*(3.00000000E+00 - 2.00000000E+00*_TMP195);
    _a0206 = _r0132 - _r0122;
    _TMP203 = abs(_a0206);
    _a0210 = _r0132 - _r0122.zwxy;
    _TMP207 = abs(_a0210);
    _a0214 = _r0122.wxyz - _r0162;
    _TMP211 = abs(_a0214);
    _a0218 = _r0122.wxyz - _r0162.yzwx;
    _TMP215 = abs(_a0218);
    _a0222 = _r0112.zwxy - _r0112.wxyz;
    _TMP219 = abs(_a0222);
    _TMP21 = _TMP203 + _TMP207 + _TMP211 + _TMP215 + 4.00000000E+00*_TMP219;
    _a0228 = _r0112.zwxy - _r0112.yzwx;
    _TMP225 = abs(_a0228);
    _a0232 = _r0112.zwxy - _r0152;
    _TMP229 = abs(_a0232);
    _a0236 = _r0112.wxyz - _r0142;
    _TMP233 = abs(_a0236);
    _a0240 = _r0112.wxyz - _r0112;
    _TMP237 = abs(_a0240);
    _a0244 = _r0132 - _r0122.wxyz;
    _TMP241 = abs(_a0244);
    _TMP22 = _TMP225 + _TMP229 + _TMP233 + _TMP237 + 4.00000000E+00*_TMP241;
    _edr = bvec4(_TMP21.x < _TMP22.x && _interp_restriction_lv1.x, _TMP21.y < _TMP22.y && _interp_restriction_lv1.y, _TMP21.z < _TMP22.z && _interp_restriction_lv1.z, _TMP21.w < _TMP22.w && _interp_restriction_lv1.w);
    _a0248 = _r0112.wxyz - _r0122.zwxy;
    _TMP245 = abs(_a0248);
    _a0252 = _r0112.zwxy - _r0122;
    _TMP249 = abs(_a0252);
    _edr_left = bvec4((2.00000000E+00*_TMP245).x <= _TMP249.x && _interp_restriction_lv2_left.x, (2.00000000E+00*_TMP245).y <= _TMP249.y && _interp_restriction_lv2_left.y, (2.00000000E+00*_TMP245).z <= _TMP249.z && _interp_restriction_lv2_left.z, (2.00000000E+00*_TMP245).w <= _TMP249.w && _interp_restriction_lv2_left.w);
    _a0256 = _r0112.wxyz - _r0122.zwxy;
    _TMP253 = abs(_a0256);
    _a0260 = _r0112.zwxy - _r0122;
    _TMP257 = abs(_a0260);
    _edr_up = bvec4(_TMP253.x >= (2.00000000E+00*_TMP257).x && _interp_restriction_lv2_up.x, _TMP253.y >= (2.00000000E+00*_TMP257).y && _interp_restriction_lv2_up.y, _TMP253.z >= (2.00000000E+00*_TMP257).z && _interp_restriction_lv2_up.z, _TMP253.w >= (2.00000000E+00*_TMP257).w && _interp_restriction_lv2_up.w);
    _nc45 = bvec4(_edr.x && bool(_fx45.x), _edr.y && bool(_fx45.y), _edr.z && bool(_fx45.z), _edr.w && bool(_fx45.w));
    _nc30 = bvec4(_edr.x && _edr_left.x && bool(_fx30.x), _edr.y && _edr_left.y && bool(_fx30.y), _edr.z && _edr_left.z && bool(_fx30.z), _edr.w && _edr_left.w && bool(_fx30.w));
    _nc60 = bvec4(_edr.x && _edr_up.x && bool(_fx60.x), _edr.y && _edr_up.y && bool(_fx60.y), _edr.z && _edr_up.z && bool(_fx60.z), _edr.w && _edr_up.w && bool(_fx60.w));
    _a0264 = _r0132 - _r0112.wxyz;
    _TMP261 = abs(_a0264);
    _a0268 = _r0132 - _r0112.zwxy;
    _TMP265 = abs(_a0268);
    _px = bvec4(_TMP261.x <= _TMP265.x, _TMP261.y <= _TMP265.y, _TMP261.z <= _TMP265.z, _TMP261.w <= _TMP265.w);
    _nc = bvec4(_nc30.x || _nc60.x || _nc45.x, _nc30.y || _nc60.y || _nc45.y, _nc30.z || _nc60.z || _nc45.z, _nc30.w || _nc60.w || _nc45.w);
    _final45 = vec4(float(_nc45.x), float(_nc45.y), float(_nc45.z), float(_nc45.w))*_fx45;
    _final30 = vec4(float(_nc30.x), float(_nc30.y), float(_nc30.z), float(_nc30.w))*_fx30;
    _final60 = vec4(float(_nc60.x), float(_nc60.y), float(_nc60.z), float(_nc60.w))*_fx60;
    _TMP29 = max(_final30, _final60);
    _maximo = max(_TMP29, _final45);
    if (_nc.x) { 
        if (_px.x) { 
            _TMP30 = _TMP8.xyz;
        } else {
            _TMP30 = _TMP10.xyz;
        } 
        _pix1 = _TMP30;
        _blend1 = _maximo.x;
    } else {
        if (_nc.y) { 
            if (_px.y) { 
                _TMP31 = _TMP4.xyz;
            } else {
                _TMP31 = _TMP8.xyz;
            } 
            _pix1 = _TMP31;
            _blend1 = _maximo.y;
        } else {
            if (_nc.z) { 
                if (_px.z) { 
                    _TMP32 = _TMP6.xyz;
                } else {
                    _TMP32 = _TMP4.xyz;
                } 
                _pix1 = _TMP32;
                _blend1 = _maximo.z;
            } else {
                if (_nc.w) { 
                    if (_px.w) { 
                        _TMP33 = _TMP10.xyz;
                    } else {
                        _TMP33 = _TMP6.xyz;
                    } 
                    _pix1 = _TMP33;
                    _blend1 = _maximo.w;
                } 
            } 
        } 
    } 
    if (_nc.w) { 
        if (_px.w) { 
            _TMP34 = _TMP10.xyz;
        } else {
            _TMP34 = _TMP6.xyz;
        } 
        _pix2 = _TMP34;
        _blend2 = _maximo.w;
    } else {
        if (_nc.z) { 
            if (_px.z) { 
                _TMP35 = _TMP6.xyz;
            } else {
                _TMP35 = _TMP4.xyz;
            } 
            _pix2 = _TMP35;
            _blend2 = _maximo.z;
        } else {
            if (_nc.y) { 
                if (_px.y) { 
                    _TMP36 = _TMP4.xyz;
                } else {
                    _TMP36 = _TMP8.xyz;
                } 
                _pix2 = _TMP36;
                _blend2 = _maximo.y;
            } else {
                if (_nc.x) { 
                    if (_px.x) { 
                        _TMP37 = _TMP8.xyz;
                    } else {
                        _TMP37 = _TMP10.xyz;
                    } 
                    _pix2 = _TMP37;
                    _blend2 = _maximo.x;
                } 
            } 
        } 
    } 
    _TMP50 = pow(_TMP7.x, 2.40000010E+00);
    _TMP51 = pow(_TMP7.y, 2.40000010E+00);
    _TMP52 = pow(_TMP7.z, 2.40000010E+00);
    _E = vec3(_TMP50, _TMP51, _TMP52);
    _TMP50 = pow(_pix1.x, 2.40000010E+00);
    _TMP51 = pow(_pix1.y, 2.40000010E+00);
    _TMP52 = pow(_pix1.z, 2.40000010E+00);
    _TMP38 = vec3(_TMP50, _TMP51, _TMP52);
    _res1 = _E + _blend1*(_TMP38 - _E);
    _TMP50 = pow(_pix2.x, 2.40000010E+00);
    _TMP51 = pow(_pix2.y, 2.40000010E+00);
    _TMP52 = pow(_pix2.z, 2.40000010E+00);
    _TMP39 = vec3(_TMP50, _TMP51, _TMP52);
    _res2 = _E + _blend2*(_TMP39 - _E);
    _a0304 = _E - _res1;
    _df0302 = abs(_a0304);
    _TMP40 = _df0302.x + _df0302.y + _df0302.z;
    _a0308 = _E - _res2;
    _df0306 = abs(_a0308);
    _TMP41 = _df0306.x + _df0306.y + _df0306.z;
    _TMP42 = float((_TMP41 >= _TMP40));
    _res = _res1 + _TMP42*(_res2 - _res1);
    _TMP50 = pow(_res.x, 4.54545438E-01);
    _TMP51 = pow(_res.y, 4.54545438E-01);
    _TMP52 = pow(_res.z, 4.54545438E-01);
    _TMP43 = vec3(_TMP50, _TMP51, _TMP52);
    _TMP53 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _TMP43);
    _TMP321 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP53);
    _ret_0 = vec4(_TMP321.x, _TMP321.y, _TMP321.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
