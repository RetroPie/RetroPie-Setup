// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec4 _color1;
struct output_dummy {
    vec4 _color1;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _oColor;
    vec2 _otexCoord;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0006;
    _oColor = COLOR;
    _otexCoord = TexCoord.xy;
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec4 _color1;
struct output_dummy {
    vec4 _color1;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec3 _TMP25;
vec3 _TMP27;
vec3 _TMP26;
vec4 _TMP24;
vec4 _TMP23;
vec4 _TMP22;
vec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _c0035;
vec2 _c0037;
vec2 _c0039;
vec2 _c0041;
vec2 _c0045;
vec2 _c0047;
vec2 _c0049;
vec2 _c0051;
vec2 _c0053;
vec2 _c0055;
vec2 _c0057;
vec2 _c0059;
vec2 _c0061;
vec2 _c0063;
vec2 _c0065;
vec2 _c0067;
vec2 _c0069;
vec2 _c0071;
vec2 _c0073;
vec2 _c0075;
vec2 _c0077;
vec2 _c0079;
vec2 _c0081;
vec2 _c0083;
float _TMP84;
float _TMP88;
float _TMP92;
float _TMP96;
float _TMP100;
float _TMP104;
float _TMP108;
float _TMP112;
float _TMP116;
float _TMP120;
float _TMP124;
float _TMP128;
float _TMP132;
float _TMP136;
float _TMP140;
float _TMP144;
float _TMP148;
float _TMP152;
float _TMP156;
float _TMP160;
float _TMP164;
float _TMP168;
float _TMP172;
float _TMP176;
float _TMP180;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _ps;
    vec2 _dx;
    vec2 _dy;
    vec2 _pixcoord;
    vec2 _fp;
    vec2 _d11;
    vec3 _E0;
    vec3 _E1;
    vec3 _E2;
    vec3 _E3;
    output_dummy _OUT;
    _ps = vec2(9.99899983E-01/TextureSize.x, 9.99899983E-01/TextureSize.y);
    _dx = vec2(_ps.x, 0.00000000E+00);
    _dy = vec2(0.00000000E+00, _ps.y);
    _pixcoord = TEX0.xy/_ps;
    _fp = fract(_pixcoord);
    _d11 = TEX0.xy - _fp*_ps;
    _c0035 = (_d11 - _dx) - _dy;
    _TMP0 = COMPAT_TEXTURE(Texture, _c0035);
    _c0037 = _d11 - _dy;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0037);
    _c0039 = (_d11 + _dx) - _dy;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0039);
    _c0041 = _d11 - _dx;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0041);
    _TMP4 = COMPAT_TEXTURE(Texture, _d11);
    _c0045 = _d11 + _dx;
    _TMP5 = COMPAT_TEXTURE(Texture, _c0045);
    _c0047 = (_d11 - _dx) + _dy;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0047);
    _c0049 = _d11 + _dy;
    _TMP7 = COMPAT_TEXTURE(Texture, _c0049);
    _c0051 = _d11 + _dx + _dy;
    _TMP8 = COMPAT_TEXTURE(Texture, _c0051);
    _c0053 = (((_d11 - _dx) - _dx) - _dy) - _dy;
    _TMP9 = COMPAT_TEXTURE(Texture, _c0053);
    _c0055 = ((_d11 + _dx + _dx) - _dy) - _dy;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0055);
    _c0057 = ((_d11 - _dx) - _dx) + _dy + _dy;
    _TMP11 = COMPAT_TEXTURE(Texture, _c0057);
    _c0059 = _d11 + _dx + _dx + _dy + _dy;
    _TMP12 = COMPAT_TEXTURE(Texture, _c0059);
    _c0061 = ((_d11 - _dx) - _dy) - _dy;
    _TMP13 = COMPAT_TEXTURE(Texture, _c0061);
    _c0063 = (_d11 - _dy) - _dy;
    _TMP14 = COMPAT_TEXTURE(Texture, _c0063);
    _c0065 = ((_d11 + _dx) - _dy) - _dy;
    _TMP15 = COMPAT_TEXTURE(Texture, _c0065);
    _c0067 = ((_d11 - _dx) - _dx) - _dy;
    _TMP16 = COMPAT_TEXTURE(Texture, _c0067);
    _c0069 = (_d11 - _dx) - _dx;
    _TMP17 = COMPAT_TEXTURE(Texture, _c0069);
    _c0071 = ((_d11 - _dx) - _dx) + _dy;
    _TMP18 = COMPAT_TEXTURE(Texture, _c0071);
    _c0073 = (_d11 + _dx + _dx) - _dy;
    _TMP19 = COMPAT_TEXTURE(Texture, _c0073);
    _c0075 = _d11 + _dx + _dx;
    _TMP20 = COMPAT_TEXTURE(Texture, _c0075);
    _c0077 = _d11 + _dx + _dx + _dy;
    _TMP21 = COMPAT_TEXTURE(Texture, _c0077);
    _c0079 = (_d11 - _dx) + _dy + _dy;
    _TMP22 = COMPAT_TEXTURE(Texture, _c0079);
    _c0081 = _d11 + _dy + _dy;
    _TMP23 = COMPAT_TEXTURE(Texture, _c0081);
    _c0083 = _d11 + _dx + _dy + _dy;
    _TMP24 = COMPAT_TEXTURE(Texture, _c0083);
    _E0 = _TMP4.xyz;
    _E1 = _TMP4.xyz;
    _E2 = _TMP4.xyz;
    _E3 = _TMP4.xyz;
    _TMP84 = dot(_TMP0.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP88 = dot(_TMP1.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP92 = dot(_TMP2.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP96 = dot(_TMP3.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP100 = dot(_TMP4.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP104 = dot(_TMP5.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP108 = dot(_TMP6.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP112 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP116 = dot(_TMP8.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP120 = dot(_TMP9.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP124 = dot(_TMP10.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP128 = dot(_TMP11.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP132 = dot(_TMP12.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP136 = dot(_TMP13.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP140 = dot(_TMP14.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP144 = dot(_TMP15.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP148 = dot(_TMP16.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP152 = dot(_TMP17.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP156 = dot(_TMP18.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP160 = dot(_TMP19.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP164 = dot(_TMP20.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP168 = dot(_TMP21.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP172 = dot(_TMP22.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP176 = dot(_TMP23.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP180 = dot(_TMP24.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    if (_TMP100 != _TMP112 && _TMP112 == _TMP104 && (_TMP100 != _TMP116 && (_TMP100 != _TMP88 || _TMP100 != _TMP96 || _TMP104 != _TMP88 && _TMP104 != _TMP92 || _TMP112 != _TMP96 && _TMP112 != _TMP108) || _TMP100 == _TMP108 && (_TMP116 == _TMP112 || _TMP100 == _TMP96 || _TMP112 != _TMP96) || _TMP100 == _TMP92 && (_TMP116 == _TMP112 || _TMP100 == _TMP88 || _TMP104 != _TMP88))) { 
        if (_TMP100 == _TMP92 && _TMP100 == _TMP96 && _TMP112 == _TMP108) { 
            if (_TMP96 == _TMP152 && _TMP108 == _TMP156) { 
                _E3 = _TMP4.xyz + 8.33299994E-01*(_TMP7.xyz - _TMP4.xyz);
                _E2 = _TMP4.xyz + 5.00000000E-01*(_TMP7.xyz - _TMP4.xyz);
            } else {
                _E3 = _TMP4.xyz + 7.50000000E-01*(_TMP7.xyz - _TMP4.xyz);
                _E2 = (_TMP4.xyz + _TMP7.xyz) - _E3;
            } 
        } else {
            if (_TMP100 == _TMP108 && _TMP100 == _TMP88 && _TMP104 == _TMP92) { 
                if (_TMP88 == _TMP140 && _TMP92 == _TMP144) { 
                    _E3 = _TMP4.xyz + 8.33299994E-01*(_TMP5.xyz - _TMP4.xyz);
                    _E1 = _TMP4.xyz + 5.00000000E-01*(_TMP5.xyz - _TMP4.xyz);
                } else {
                    _E3 = _TMP4.xyz + 7.50000000E-01*(_TMP5.xyz - _TMP4.xyz);
                    _E1 = (_TMP4.xyz + _TMP5.xyz) - _E3;
                } 
            } else {
                _E3 = _TMP4.xyz + 5.00000000E-01*(_TMP5.xyz - _TMP4.xyz);
            } 
        } 
    } else {
        if (_TMP100 != _TMP112 && _TMP100 != _TMP116 && _TMP100 != _TMP104 && _TMP100 == _TMP108 && _TMP100 == _TMP92) { 
            _E3 = _TMP4.xyz + 5.00000000E-01*(_TMP5.xyz - _TMP4.xyz);
        } else {
            if (_TMP104 != _TMP116 && _TMP116 == _TMP164 && (_TMP104 != _TMP168 || _TMP116 != _TMP132) && _TMP104 == _TMP160 && _TMP104 == _TMP100 && _TMP116 == _TMP112 && _TMP100 == _TMP96 && _TMP112 == _TMP108) { 
                _E3 = _TMP4.xyz + 2.50000000E-01*(_TMP7.xyz - _TMP4.xyz);
            } else {
                if (_TMP112 != _TMP116 && _TMP116 == _TMP176 && (_TMP112 != _TMP180 || _TMP116 != _TMP132) && _TMP112 == _TMP172 && _TMP112 == _TMP100 && _TMP116 == _TMP104 && _TMP100 == _TMP88 && _TMP104 == _TMP92) { 
                    _E3 = _TMP4.xyz + 2.50000000E-01*(_TMP5.xyz - _TMP4.xyz);
                } 
            } 
        } 
    } 
    if (_TMP100 != _TMP104 && _TMP104 == _TMP88 && (_TMP100 != _TMP92 && (_TMP100 != _TMP96 || _TMP100 != _TMP112 || _TMP88 != _TMP96 && _TMP88 != _TMP84 || _TMP104 != _TMP112 && _TMP104 != _TMP116) || _TMP100 == _TMP116 && (_TMP92 == _TMP104 || _TMP100 == _TMP112 || _TMP104 != _TMP112) || _TMP100 == _TMP84 && (_TMP92 == _TMP104 || _TMP100 == _TMP96 || _TMP88 != _TMP96))) { 
        if (_TMP100 == _TMP84 && _TMP100 == _TMP112 && _TMP104 == _TMP116) { 
            if (_TMP112 == _TMP176 && _TMP116 == _TMP180) { 
                _E1 = _E1 + 8.33299994E-01*(_TMP5.xyz - _E1);
                _E3 = _E3 + 5.00000000E-01*(_TMP5.xyz - _E3);
            } else {
                _E1 = _E1 + 7.50000000E-01*(_TMP5.xyz - _E1);
                _E3 = (_E3 + _TMP5.xyz) - _E1;
            } 
        } else {
            if (_TMP100 == _TMP116 && _TMP100 == _TMP96 && _TMP88 == _TMP84) { 
                if (_TMP96 == _TMP152 && _TMP84 == _TMP148) { 
                    _E1 = _E1 + 8.33299994E-01*(_TMP1.xyz - _E1);
                    _E0 = _TMP4.xyz + 5.00000000E-01*(_TMP1.xyz - _TMP4.xyz);
                } else {
                    _E1 = _E1 + 7.50000000E-01*(_TMP1.xyz - _E1);
                    _E0 = (_TMP4.xyz + _TMP1.xyz) - _E1;
                } 
            } else {
                _E1 = _E1 + 5.00000000E-01*(_TMP1.xyz - _E1);
            } 
        } 
    } else {
        if (_TMP100 != _TMP104 && _TMP100 != _TMP92 && _TMP100 != _TMP88 && _TMP100 == _TMP116 && _TMP100 == _TMP84) { 
            _E1 = _E1 + 5.00000000E-01*(_TMP1.xyz - _E1);
        } else {
            if (_TMP88 != _TMP92 && _TMP92 == _TMP140 && (_TMP88 != _TMP144 || _TMP92 != _TMP124) && _TMP88 == _TMP136 && _TMP88 == _TMP100 && _TMP92 == _TMP104 && _TMP100 == _TMP112 && _TMP104 == _TMP116) { 
                _E1 = _E1 + 2.50000000E-01*(_TMP5.xyz - _E1);
            } else {
                if (_TMP104 != _TMP92 && _TMP92 == _TMP164 && (_TMP104 != _TMP160 || _TMP92 != _TMP124) && _TMP104 == _TMP168 && _TMP104 == _TMP100 && _TMP92 == _TMP88 && _TMP100 == _TMP96 && _TMP88 == _TMP84) { 
                    _E1 = _E1 + 2.50000000E-01*(_TMP1.xyz - _E1);
                } 
            } 
        } 
    } 
    if (_TMP100 != _TMP88 && _TMP88 == _TMP96 && (_TMP100 != _TMP84 && (_TMP100 != _TMP112 || _TMP100 != _TMP104 || _TMP96 != _TMP112 && _TMP96 != _TMP108 || _TMP88 != _TMP104 && _TMP88 != _TMP92) || _TMP100 == _TMP92 && (_TMP84 == _TMP88 || _TMP100 == _TMP104 || _TMP88 != _TMP104) || _TMP100 == _TMP108 && (_TMP84 == _TMP88 || _TMP100 == _TMP112 || _TMP96 != _TMP112))) { 
        if (_TMP100 == _TMP108 && _TMP100 == _TMP104 && _TMP88 == _TMP92) { 
            if (_TMP104 == _TMP164 && _TMP92 == _TMP160) { 
                _E0 = _E0 + 8.33299994E-01*(_TMP1.xyz - _E0);
                _E1 = _E1 + 5.00000000E-01*(_TMP1.xyz - _E1);
            } else {
                _E0 = _E0 + 7.50000000E-01*(_TMP1.xyz - _E0);
                _E1 = (_E1 + _TMP1.xyz) - _E0;
            } 
        } else {
            if (_TMP100 == _TMP92 && _TMP100 == _TMP112 && _TMP96 == _TMP108) { 
                if (_TMP112 == _TMP176 && _TMP108 == _TMP172) { 
                    _E0 = _E0 + 8.33299994E-01*(_TMP3.xyz - _E0);
                    _E2 = _E2 + 5.00000000E-01*(_TMP3.xyz - _E2);
                } else {
                    _E0 = _E0 + 7.50000000E-01*(_TMP3.xyz - _E0);
                    _E2 = (_E2 + _TMP3.xyz) - _E0;
                } 
            } else {
                _E0 = _E0 + 5.00000000E-01*(_TMP3.xyz - _E0);
            } 
        } 
    } else {
        if (_TMP100 != _TMP88 && _TMP100 != _TMP84 && _TMP100 != _TMP96 && _TMP100 == _TMP92 && _TMP100 == _TMP108) { 
            _E0 = _E0 + 5.00000000E-01*(_TMP3.xyz - _E0);
        } else {
            if (_TMP96 != _TMP84 && _TMP84 == _TMP152 && (_TMP96 != _TMP148 || _TMP84 != _TMP120) && _TMP96 == _TMP156 && _TMP96 == _TMP100 && _TMP84 == _TMP88 && _TMP100 == _TMP104 && _TMP88 == _TMP92) { 
                _E0 = _E0 + 2.50000000E-01*(_TMP1.xyz - _E0);
            } else {
                if (_TMP88 != _TMP84 && _TMP84 == _TMP140 && (_TMP88 != _TMP136 || _TMP84 != _TMP120) && _TMP88 == _TMP144 && _TMP88 == _TMP100 && _TMP84 == _TMP96 && _TMP100 == _TMP112 && _TMP96 == _TMP108) { 
                    _E0 = _E0 + 2.50000000E-01*(_TMP3.xyz - _E0);
                } 
            } 
        } 
    } 
    if (_TMP100 != _TMP96 && _TMP96 == _TMP112 && (_TMP100 != _TMP108 && (_TMP100 != _TMP104 || _TMP100 != _TMP88 || _TMP112 != _TMP104 && _TMP112 != _TMP116 || _TMP96 != _TMP88 && _TMP96 != _TMP84) || _TMP100 == _TMP84 && (_TMP108 == _TMP96 || _TMP100 == _TMP88 || _TMP96 != _TMP88) || _TMP100 == _TMP116 && (_TMP108 == _TMP96 || _TMP100 == _TMP104 || _TMP112 != _TMP104))) { 
        if (_TMP100 == _TMP116 && _TMP100 == _TMP88 && _TMP96 == _TMP84) { 
            if (_TMP88 == _TMP140 && _TMP84 == _TMP136) { 
                _E2 = _E2 + 8.33299994E-01*(_TMP3.xyz - _E2);
                _E0 = _E0 + 5.00000000E-01*(_TMP3.xyz - _E0);
            } else {
                _E2 = _E2 + 7.50000000E-01*(_TMP3.xyz - _E2);
                _E0 = (_E0 + _TMP3.xyz) - _E2;
            } 
        } else {
            if (_TMP100 == _TMP84 && _TMP100 == _TMP104 && _TMP112 == _TMP116) { 
                if (_TMP104 == _TMP164 && _TMP116 == _TMP168) { 
                    _E2 = _E2 + 8.33299994E-01*(_TMP7.xyz - _E2);
                    _E3 = _E3 + 5.00000000E-01*(_TMP7.xyz - _E3);
                } else {
                    _E2 = _E2 + 7.50000000E-01*(_TMP7.xyz - _E2);
                    _E3 = (_E3 + _TMP7.xyz) - _E2;
                } 
            } else {
                _E2 = _E2 + 5.00000000E-01*(_TMP7.xyz - _E2);
            } 
        } 
    } else {
        if (_TMP100 != _TMP96 && _TMP100 != _TMP108 && _TMP100 != _TMP112 && _TMP100 == _TMP84 && _TMP100 == _TMP116) { 
            _E2 = _E2 + 5.00000000E-01*(_TMP7.xyz - _E2);
        } else {
            if (_TMP112 != _TMP108 && _TMP108 == _TMP176 && (_TMP112 != _TMP172 || _TMP108 != _TMP128) && _TMP112 == _TMP180 && _TMP112 == _TMP100 && _TMP108 == _TMP96 && _TMP100 == _TMP88 && _TMP96 == _TMP84) { 
                _E2 = _E2 + 2.50000000E-01*(_TMP3.xyz - _E2);
            } else {
                if (_TMP96 != _TMP108 && _TMP108 == _TMP152 && (_TMP96 != _TMP156 || _TMP108 != _TMP128) && _TMP96 == _TMP148 && _TMP96 == _TMP100 && _TMP108 == _TMP112 && _TMP100 == _TMP104 && _TMP112 == _TMP116) { 
                    _E2 = _E2 + 2.50000000E-01*(_TMP7.xyz - _E2);
                } 
            } 
        } 
    } 
    if (_fp.x < 5.00000000E-01) { 
        if (_fp.y < 5.00000000E-01) { 
            _TMP26 = _E0;
        } else {
            _TMP26 = _E2;
        } 
        _TMP25 = _TMP26;
    } else {
        if (_fp.y < 5.00000000E-01) { 
            _TMP27 = _E1;
        } else {
            _TMP27 = _E3;
        } 
        _TMP25 = _TMP27;
    } 
    _OUT._color1 = vec4(_TMP25.x, _TMP25.y, _TMP25.z, 1.00000000E+00);
    FragColor = _OUT._color1;
    return;
} 
#endif
