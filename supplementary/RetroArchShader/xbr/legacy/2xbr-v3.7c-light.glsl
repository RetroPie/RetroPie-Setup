// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARpos;
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 VARposition1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 VARposition1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
    vec2 VARpos;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -2.00000000E+00*_ps.y);
    _OUT._t2 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t3 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t5 = _texCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 2.00000000E+00*_ps.y);
    _OUT._t6 = _texCoord.xyyy + vec4(-2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT._t7 = _texCoord.xyyy + vec4(2.00000000E+00*_ps.x, -_ps.y, 0.00000000E+00, _ps.y);
    _OUT.VARpos = _texCoord*TextureSize;
    VARposition1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    VARpos = _OUT.VARpos;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARpos;
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
    vec2 VARpos;
};
vec4 _ret_0;
float _TMP51;
float _TMP49;
float _TMP50;
float _TMP48;
vec3 _TMP40;
vec3 _TMP42;
vec3 _TMP44;
vec3 _TMP46;
vec3 _TMP47;
vec3 _TMP45;
vec3 _TMP43;
vec3 _TMP41;
vec4 _TMP33;
vec4 _TMP32;
bvec4 _TMP31;
bvec4 _TMP30;
bvec4 _TMP29;
bvec4 _TMP28;
bvec4 _TMP27;
bvec4 _TMP26;
bvec4 _TMP25;
bvec4 _TMP24;
bvec4 _TMP23;
bvec4 _TMP22;
bvec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
out_vertex _VAR1;
uniform sampler2D Texture;
vec4 _r0115;
vec4 _r0125;
vec4 _r0135;
vec4 _r0145;
vec4 _r0155;
vec4 _r0165;
vec4 _TMP176;
vec4 _a0179;
vec4 _TMP182;
vec4 _a0185;
vec4 _TMP188;
vec4 _a0191;
vec4 _TMP194;
vec4 _a0197;
vec4 _TMP200;
vec4 _a0203;
vec4 _TMP206;
vec4 _a0209;
vec4 _TMP212;
vec4 _a0215;
vec4 _TMP218;
vec4 _a0221;
vec4 _TMP224;
vec4 _a0227;
vec4 _TMP230;
vec4 _a0233;
vec4 _TMP236;
vec4 _a0239;
vec4 _TMP242;
vec4 _a0245;
vec4 _TMP246;
vec4 _a0249;
vec4 _TMP250;
vec4 _a0253;
vec4 _TMP254;
vec4 _a0257;
vec4 _TMP258;
vec4 _a0261;
vec4 _TMP264;
vec4 _a0267;
vec4 _TMP268;
vec4 _a0271;
vec4 _TMP272;
vec4 _a0275;
vec4 _TMP276;
vec4 _a0279;
vec4 _TMP280;
vec4 _a0283;
vec4 _TMP284;
vec4 _a0287;
vec4 _TMP288;
vec4 _a0291;
vec4 _TMP292;
vec4 _a0295;
vec4 _TMP296;
vec4 _a0299;
vec4 _TMP300;
vec4 _a0303;
vec4 _TMP304;
vec4 _a0307;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    bvec4 _nc;
    bvec4 _fx;
    bvec4 _fx_left;
    bvec4 _fx_up;
    vec2 _fp;
    vec3 _res;
    _fp = fract(VARpos);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _r0115.x = dot(_TMP4.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0115.y = dot(_TMP6.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0115.z = dot(_TMP10.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0115.w = dot(_TMP8.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0125.x = dot(_TMP5.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0125.y = dot(_TMP3.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0125.z = dot(_TMP9.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0125.w = dot(_TMP11.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0135.x = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0135.y = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0135.z = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0135.w = dot(_TMP7.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0145.x = dot(_TMP20.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0145.y = dot(_TMP2.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0145.z = dot(_TMP15.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0145.w = dot(_TMP12.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0155.x = dot(_TMP14.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0155.y = dot(_TMP18.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0155.z = dot(_TMP0.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0155.w = dot(_TMP17.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0165.x = dot(_TMP13.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0165.y = dot(_TMP19.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0165.z = dot(_TMP1.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _r0165.w = dot(_TMP16.xyz, vec3( 1.43519993E+01, 2.81760006E+01, 5.47200012E+00));
    _fx = bvec4((vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).x > 1.25000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).y > 2.50000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).z > -7.50000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).w > 2.50000000E-01);
    _fx_left = bvec4((vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).x > 7.50000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).y > 5.00000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).z > -7.50000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).w > -5.00000000E-01);
    _fx_up = bvec4((vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).x > 1.50000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).y > -2.50000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).z > -1.50000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).w > 2.50000000E-01);
    _a0179 = _r0115.wxyz - _r0115;
    _TMP176 = abs(_a0179);
    _TMP21 = bvec4(_TMP176.x < 1.50000000E+01, _TMP176.y < 1.50000000E+01, _TMP176.z < 1.50000000E+01, _TMP176.w < 1.50000000E+01);
    _a0185 = _r0115.wxyz - _r0125;
    _TMP182 = abs(_a0185);
    _TMP22 = bvec4(_TMP182.x < 1.50000000E+01, _TMP182.y < 1.50000000E+01, _TMP182.z < 1.50000000E+01, _TMP182.w < 1.50000000E+01);
    _a0191 = _r0115.zwxy - _r0115.yzwx;
    _TMP188 = abs(_a0191);
    _TMP23 = bvec4(_TMP188.x < 1.50000000E+01, _TMP188.y < 1.50000000E+01, _TMP188.z < 1.50000000E+01, _TMP188.w < 1.50000000E+01);
    _a0197 = _r0115.zwxy - _r0125.zwxy;
    _TMP194 = abs(_a0197);
    _TMP24 = bvec4(_TMP194.x < 1.50000000E+01, _TMP194.y < 1.50000000E+01, _TMP194.z < 1.50000000E+01, _TMP194.w < 1.50000000E+01);
    _a0203 = _r0135 - _r0125.wxyz;
    _TMP200 = abs(_a0203);
    _TMP25 = bvec4(_TMP200.x < 1.50000000E+01, _TMP200.y < 1.50000000E+01, _TMP200.z < 1.50000000E+01, _TMP200.w < 1.50000000E+01);
    _a0209 = _r0115.wxyz - _r0165.yzwx;
    _TMP206 = abs(_a0209);
    _TMP26 = bvec4(_TMP206.x < 1.50000000E+01, _TMP206.y < 1.50000000E+01, _TMP206.z < 1.50000000E+01, _TMP206.w < 1.50000000E+01);
    _a0215 = _r0115.wxyz - _r0145;
    _TMP212 = abs(_a0215);
    _TMP27 = bvec4(_TMP212.x < 1.50000000E+01, _TMP212.y < 1.50000000E+01, _TMP212.z < 1.50000000E+01, _TMP212.w < 1.50000000E+01);
    _a0221 = _r0115.zwxy - _r0165;
    _TMP218 = abs(_a0221);
    _TMP28 = bvec4(_TMP218.x < 1.50000000E+01, _TMP218.y < 1.50000000E+01, _TMP218.z < 1.50000000E+01, _TMP218.w < 1.50000000E+01);
    _a0227 = _r0115.zwxy - _r0155;
    _TMP224 = abs(_a0227);
    _TMP29 = bvec4(_TMP224.x < 1.50000000E+01, _TMP224.y < 1.50000000E+01, _TMP224.z < 1.50000000E+01, _TMP224.w < 1.50000000E+01);
    _a0233 = _r0135 - _r0125.zwxy;
    _TMP230 = abs(_a0233);
    _TMP30 = bvec4(_TMP230.x < 1.50000000E+01, _TMP230.y < 1.50000000E+01, _TMP230.z < 1.50000000E+01, _TMP230.w < 1.50000000E+01);
    _a0239 = _r0135 - _r0125;
    _TMP236 = abs(_a0239);
    _TMP31 = bvec4(_TMP236.x < 1.50000000E+01, _TMP236.y < 1.50000000E+01, _TMP236.z < 1.50000000E+01, _TMP236.w < 1.50000000E+01);
    _interp_restriction_lv1 = bvec4(_r0135.x != _r0115.w && _r0135.x != _r0115.z && (!_TMP21.x && !_TMP22.x || !_TMP23.x && !_TMP24.x || _TMP25.x && (!_TMP26.x && !_TMP27.x || !_TMP28.x && !_TMP29.x) || _TMP30.x || _TMP31.x), _r0135.y != _r0115.x && _r0135.y != _r0115.w && (!_TMP21.y && !_TMP22.y || !_TMP23.y && !_TMP24.y || _TMP25.y && (!_TMP26.y && !_TMP27.y || !_TMP28.y && !_TMP29.y) || _TMP30.y || _TMP31.y), _r0135.z != _r0115.y && _r0135.z != _r0115.x && (!_TMP21.z && !_TMP22.z || !_TMP23.z && !_TMP24.z || _TMP25.z && (!_TMP26.z && !_TMP27.z || !_TMP28.z && !_TMP29.z) || _TMP30.z || _TMP31.z), _r0135.w != _r0115.z && _r0135.w != _r0115.y && (!_TMP21.w && !_TMP22.w || !_TMP23.w && !_TMP24.w || _TMP25.w && (!_TMP26.w && !_TMP27.w || !_TMP28.w && !_TMP29.w) || _TMP30.w || _TMP31.w));
    _interp_restriction_lv2_left = bvec4(_r0135.x != _r0125.z && _r0115.y != _r0125.z, _r0135.y != _r0125.w && _r0115.z != _r0125.w, _r0135.z != _r0125.x && _r0115.w != _r0125.x, _r0135.w != _r0125.y && _r0115.x != _r0125.y);
    _interp_restriction_lv2_up = bvec4(_r0135.x != _r0125.x && _r0115.x != _r0125.x, _r0135.y != _r0125.y && _r0115.y != _r0125.y, _r0135.z != _r0125.z && _r0115.z != _r0125.z, _r0135.w != _r0125.w && _r0115.w != _r0125.w);
    _a0245 = _r0135 - _r0125;
    _TMP242 = abs(_a0245);
    _a0249 = _r0135 - _r0125.zwxy;
    _TMP246 = abs(_a0249);
    _a0253 = _r0125.wxyz - _r0165;
    _TMP250 = abs(_a0253);
    _a0257 = _r0125.wxyz - _r0165.yzwx;
    _TMP254 = abs(_a0257);
    _a0261 = _r0115.zwxy - _r0115.wxyz;
    _TMP258 = abs(_a0261);
    _TMP32 = _TMP242 + _TMP246 + _TMP250 + _TMP254 + 4.00000000E+00*_TMP258;
    _a0267 = _r0115.zwxy - _r0115.yzwx;
    _TMP264 = abs(_a0267);
    _a0271 = _r0115.zwxy - _r0155;
    _TMP268 = abs(_a0271);
    _a0275 = _r0115.wxyz - _r0145;
    _TMP272 = abs(_a0275);
    _a0279 = _r0115.wxyz - _r0115;
    _TMP276 = abs(_a0279);
    _a0283 = _r0135 - _r0125.wxyz;
    _TMP280 = abs(_a0283);
    _TMP33 = _TMP264 + _TMP268 + _TMP272 + _TMP276 + 4.00000000E+00*_TMP280;
    _edr = bvec4(_TMP32.x < _TMP33.x && _interp_restriction_lv1.x, _TMP32.y < _TMP33.y && _interp_restriction_lv1.y, _TMP32.z < _TMP33.z && _interp_restriction_lv1.z, _TMP32.w < _TMP33.w && _interp_restriction_lv1.w);
    _a0287 = _r0115.wxyz - _r0125.zwxy;
    _TMP284 = abs(_a0287);
    _a0291 = _r0115.zwxy - _r0125;
    _TMP288 = abs(_a0291);
    _edr_left = bvec4((2.00000000E+00*_TMP284).x < _TMP288.x && _interp_restriction_lv2_left.x, (2.00000000E+00*_TMP284).y < _TMP288.y && _interp_restriction_lv2_left.y, (2.00000000E+00*_TMP284).z < _TMP288.z && _interp_restriction_lv2_left.z, (2.00000000E+00*_TMP284).w < _TMP288.w && _interp_restriction_lv2_left.w);
    _a0295 = _r0115.wxyz - _r0125.zwxy;
    _TMP292 = abs(_a0295);
    _a0299 = _r0115.zwxy - _r0125;
    _TMP296 = abs(_a0299);
    _edr_up = bvec4(_TMP292.x > (2.00000000E+00*_TMP296).x && _interp_restriction_lv2_up.x, _TMP292.y > (2.00000000E+00*_TMP296).y && _interp_restriction_lv2_up.y, _TMP292.z > (2.00000000E+00*_TMP296).z && _interp_restriction_lv2_up.z, _TMP292.w > (2.00000000E+00*_TMP296).w && _interp_restriction_lv2_up.w);
    _nc = bvec4(_edr.x && (_fx.x || _edr_left.x && _fx_left.x || _edr_up.x && _fx_up.x), _edr.y && (_fx.y || _edr_left.y && _fx_left.y || _edr_up.y && _fx_up.y), _edr.z && (_fx.z || _edr_left.z && _fx_left.z || _edr_up.z && _fx_up.z), _edr.w && (_fx.w || _edr_left.w && _fx_left.w || _edr_up.w && _fx_up.w));
    _a0303 = _r0135 - _r0115.wxyz;
    _TMP300 = abs(_a0303);
    _a0307 = _r0135 - _r0115.zwxy;
    _TMP304 = abs(_a0307);
    _px = bvec4(_TMP300.x <= _TMP304.x, _TMP300.y <= _TMP304.y, _TMP300.z <= _TMP304.z, _TMP300.w <= _TMP304.w);
    if (_nc.x) { 
        if (_px.x) { 
            _TMP41 = _TMP8.xyz;
        } else {
            _TMP41 = _TMP10.xyz;
        } 
        _TMP40 = _TMP41;
    } else {
        if (_nc.y) { 
            if (_px.y) { 
                _TMP43 = _TMP4.xyz;
            } else {
                _TMP43 = _TMP8.xyz;
            } 
            _TMP42 = _TMP43;
        } else {
            if (_nc.z) { 
                if (_px.z) { 
                    _TMP45 = _TMP6.xyz;
                } else {
                    _TMP45 = _TMP4.xyz;
                } 
                _TMP44 = _TMP45;
            } else {
                if (_nc.w) { 
                    if (_px.w) { 
                        _TMP47 = _TMP10.xyz;
                    } else {
                        _TMP47 = _TMP6.xyz;
                    } 
                    _TMP46 = _TMP47;
                } else {
                    _TMP46 = _TMP7.xyz;
                } 
                _TMP44 = _TMP46;
            } 
            _TMP42 = _TMP44;
        } 
        _TMP40 = _TMP42;
    } 
    _res = _TMP40;
    _TMP48 = dot(vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01), _TMP7.xyz);
    _TMP49 = abs(_TMP48);
    _TMP50 = dot(vec3( 2.98999995E-01, 5.87000012E-01, 1.14000000E-01), _TMP40);
    _TMP51 = abs(_TMP50);
    if (_TMP49 > _TMP51) { 
        _res = _TMP7.xyz;
    } 
    _ret_0 = vec4(_res.x, _res.y, _res.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
