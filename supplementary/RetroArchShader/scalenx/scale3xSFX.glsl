// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _OUT._t1 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t2 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t3 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t4 = TexCoord.xyxy + vec4(0.00000000E+00, -2.00000000E+00*_ps.y, -2.00000000E+00*_ps.x, 0.00000000E+00);
    _OUT._t5 = TexCoord.xyxy + vec4(2.00000000E+00*_ps.x, 0.00000000E+00, 0.00000000E+00, 2.00000000E+00*_ps.y);
    _ret_0._position1 = _r0007;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    gl_Position = _r0007;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
};
vec3 _TMP22;
vec3 _TMP25;
vec3 _TMP28;
vec3 _TMP29;
vec3 _TMP26;
vec3 _TMP27;
vec3 _TMP23;
vec3 _TMP24;
vec3 _TMP21;
vec3 _TMP20;
vec3 _TMP19;
vec3 _TMP18;
vec3 _TMP17;
vec3 _TMP16;
vec3 _TMP15;
vec3 _TMP14;
vec3 _TMP30;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec2 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0043;
vec2 _x0045;
vec3 _C0057[4];
vec3 _r0059;
vec3 _C0069[4];
vec3 _C0079[4];
bool _TMP80;
vec3 _a0083;
bvec3 _a0085;
bool _TMP86;
vec3 _a0089;
bvec3 _a0091;
bool _TMP92;
vec3 _a0095;
bvec3 _a0097;
bool _TMP98;
vec3 _a0101;
bvec3 _a0103;
bool _TMP104;
vec3 _a0107;
bvec3 _a0109;
bool _TMP110;
vec3 _a0113;
bvec3 _a0115;
bool _TMP116;
vec3 _a0119;
bvec3 _a0121;
bool _TMP122;
vec3 _a0125;
bvec3 _a0127;
bool _TMP128;
vec3 _a0131;
bvec3 _a0133;
bool _TMP134;
vec3 _a0137;
bvec3 _a0139;
bool _TMP140;
vec3 _a0143;
bvec3 _a0145;
bool _TMP146;
vec3 _a0149;
bvec3 _a0151;
bool _TMP152;
vec3 _a0155;
bvec3 _a0157;
bool _TMP158;
vec3 _a0161;
bvec3 _a0163;
bool _TMP164;
vec3 _a0167;
bvec3 _a0169;
bool _TMP170;
vec3 _a0173;
bvec3 _a0175;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _fp;
    bool _par0;
    bool _par1;
    bool _dia0;
    bool _dia1;
    bool _art0;
    bool _art2;
    bool _art6;
    bool _art8;
    _x0043 = TEX0.xy*TextureSize;
    _TMP0 = fract(_x0043);
    _x0045 = 3.00000000E+00*_TMP0;
    _fp = floor(_x0045);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _C0057[0] = _TMP1.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP1.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP1.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0057[1] = _TMP2.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP2.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP2.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0057[2] = _TMP3.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP3.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP3.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0057[3] = _TMP4.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP4.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP4.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _r0059 = _TMP5.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01);
    _r0059 = _r0059 + _TMP5.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01);
    _r0059 = _r0059 + _TMP5.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _C0069[0] = _TMP6.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP6.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP6.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0069[1] = _TMP7.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP7.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP7.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0069[2] = _TMP8.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP8.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP8.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0069[3] = _TMP9.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP9.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP9.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.xy);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xy);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _C0079[0] = _TMP10.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP10.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP10.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0079[1] = _TMP11.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP11.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP11.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0079[2] = _TMP12.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP12.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP12.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0079[3] = _TMP13.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP13.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP13.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _a0083 = _C0069[0] - _C0057[2];
    _TMP30 = abs(_a0083);
    _a0085 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP80 = _a0085.x && _a0085.y && _a0085.z;
    _a0089 = _C0069[0] - _C0079[0];
    _TMP30 = abs(_a0089);
    _a0091 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP86 = _a0091.x && _a0091.y && _a0091.z;
    _a0095 = _C0069[0] - _C0079[1];
    _TMP30 = abs(_a0095);
    _a0097 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP92 = _a0097.x && _a0097.y && _a0097.z;
    _a0101 = _C0057[0] - _C0057[1];
    _TMP30 = abs(_a0101);
    _a0103 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP98 = _a0103.x && _a0103.y && _a0103.z;
    _a0107 = _C0057[0] - _C0057[3];
    _TMP30 = abs(_a0107);
    _a0109 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP104 = _a0109.x && _a0109.y && _a0109.z;
    _a0113 = _C0069[1] - _C0057[2];
    _TMP30 = abs(_a0113);
    _a0115 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP110 = _a0115.x && _a0115.y && _a0115.z;
    _a0119 = _C0069[1] - _C0079[0];
    _TMP30 = abs(_a0119);
    _a0121 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP116 = _a0121.x && _a0121.y && _a0121.z;
    _a0125 = _C0069[1] - _C0079[2];
    _TMP30 = abs(_a0125);
    _a0127 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP122 = _a0127.x && _a0127.y && _a0127.z;
    _a0131 = _C0057[1] - _r0059;
    _TMP30 = abs(_a0131);
    _a0133 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP128 = _a0133.x && _a0133.y && _a0133.z;
    _a0137 = _C0057[2] - _C0069[2];
    _TMP30 = abs(_a0137);
    _a0139 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP134 = _a0139.x && _a0139.y && _a0139.z;
    _a0143 = _C0057[2] - _C0069[3];
    _TMP30 = abs(_a0143);
    _a0145 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP140 = _a0145.x && _a0145.y && _a0145.z;
    _a0149 = _C0057[3] - _r0059;
    _TMP30 = abs(_a0149);
    _a0151 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP146 = _a0151.x && _a0151.y && _a0151.z;
    _a0155 = _C0069[2] - _C0079[1];
    _TMP30 = abs(_a0155);
    _a0157 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP152 = _a0157.x && _a0157.y && _a0157.z;
    _a0161 = _C0069[2] - _C0079[3];
    _TMP30 = abs(_a0161);
    _a0163 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP158 = _a0163.x && _a0163.y && _a0163.z;
    _a0167 = _C0069[3] - _C0079[2];
    _TMP30 = abs(_a0167);
    _a0169 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP164 = _a0169.x && _a0169.y && _a0169.z;
    _a0173 = _C0069[3] - _C0079[3];
    _TMP30 = abs(_a0173);
    _a0175 = bvec3(_TMP30.x <= 1.88235298E-01, _TMP30.y <= 2.74509806E-02, _TMP30.z <= 2.35294122E-02);
    _TMP170 = _a0175.x && _a0175.y && _a0175.z;
    _par0 = !(_TMP104 || _TMP128);
    _par1 = !(_TMP98 || _TMP146);
    _dia0 = _TMP80 || _TMP140;
    _dia1 = _TMP110 || _TMP134;
    _art0 = _TMP98 && _par0 && (!_TMP80 || _dia1 || _TMP86 || _TMP92);
    _art2 = _TMP104 && _par1 && (!_TMP110 || _dia0 || _TMP116 || _TMP122);
    _art6 = _TMP128 && _par1 && (!_TMP134 || _dia0 || _TMP152 || _TMP158);
    _art8 = _TMP146 && _par0 && (!_TMP140 || _dia1 || _TMP164 || _TMP170);
    if (_art0 || _TMP98 && (_TMP110 && !_TMP116 && !_TMP80 || _TMP134 && !_TMP80 && !_TMP152)) { 
        _TMP14 = 5.00000000E-01*(_TMP1.xyz + _TMP2.xyz);
    } else {
        _TMP14 = _TMP3.xyz;
    } 
    if (_art2 || _TMP104 && (_TMP80 && !_TMP86 && !_TMP110 || _TMP140 && !_TMP110 && !_TMP164)) { 
        _TMP15 = 5.00000000E-01*(_TMP1.xyz + _TMP4.xyz);
    } else {
        _TMP15 = _TMP3.xyz;
    } 
    if (_art6 || _TMP128 && (_TMP80 && !_TMP92 && !_TMP134 || _TMP140 && !_TMP134 && !_TMP170)) { 
        _TMP16 = 5.00000000E-01*(_TMP5.xyz + _TMP2.xyz);
    } else {
        _TMP16 = _TMP3.xyz;
    } 
    if (_art8 || _TMP146 && (_TMP110 && !_TMP122 && !_TMP140 || _TMP134 && !_TMP140 && !_TMP158)) { 
        _TMP17 = 5.00000000E-01*(_TMP5.xyz + _TMP4.xyz);
    } else {
        _TMP17 = _TMP3.xyz;
    } 
    if (_art0 && !_TMP110 || _art2 && !_TMP80) { 
        _TMP18 = _TMP1.xyz;
    } else {
        _TMP18 = _TMP3.xyz;
    } 
    if (_art0 && !_TMP134 || _art6 && !_TMP80) { 
        _TMP19 = _TMP2.xyz;
    } else {
        _TMP19 = _TMP3.xyz;
    } 
    if (_art8 && !_TMP110 || _art2 && !_TMP140) { 
        _TMP20 = _TMP4.xyz;
    } else {
        _TMP20 = _TMP3.xyz;
    } 
    if (_art8 && !_TMP134 || _art6 && !_TMP140) { 
        _TMP21 = _TMP5.xyz;
    } else {
        _TMP21 = _TMP3.xyz;
    } 
    if (_fp.y == 0.00000000E+00) { 
        if (_fp.x == 0.00000000E+00) { 
            _TMP23 = _TMP14;
        } else {
            if (_fp.x == 1.00000000E+00) { 
                _TMP24 = _TMP18;
            } else {
                _TMP24 = _TMP15;
            } 
            _TMP23 = _TMP24;
        } 
        _TMP22 = _TMP23;
    } else {
        if (_fp.y == 1.00000000E+00) { 
            if (_fp.x == 0.00000000E+00) { 
                _TMP26 = _TMP19;
            } else {
                if (_fp.x == 1.00000000E+00) { 
                    _TMP27 = _TMP3.xyz;
                } else {
                    _TMP27 = _TMP20;
                } 
                _TMP26 = _TMP27;
            } 
            _TMP25 = _TMP26;
        } else {
            if (_fp.x == 0.00000000E+00) { 
                _TMP28 = _TMP16;
            } else {
                if (_fp.x == 1.00000000E+00) { 
                    _TMP29 = _TMP21;
                } else {
                    _TMP29 = _TMP17;
                } 
                _TMP28 = _TMP29;
            } 
            _TMP25 = _TMP28;
        } 
        _TMP22 = _TMP25;
    } 
    FragColor.xyz = _TMP22;
    return;
} 
#endif
