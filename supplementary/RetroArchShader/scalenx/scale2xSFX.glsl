// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _OUT._t1 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, -_ps.y);
    _OUT._t2 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, 0.00000000E+00);
    _OUT._t3 = TexCoord.xxxy + vec4(-_ps.x, 0.00000000E+00, _ps.x, _ps.y);
    _OUT._t4 = TexCoord.xyxy + vec4(0.00000000E+00, -2.00000000E+00*_ps.y, -2.00000000E+00*_ps.x, 0.00000000E+00);
    _OUT._t5 = TexCoord.xyxy + vec4(2.00000000E+00*_ps.x, 0.00000000E+00, 0.00000000E+00, 2.00000000E+00*_ps.y);
    _ret_0._position1 = _r0007;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    gl_Position = _r0007;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
};
vec3 _TMP34;
vec3 _TMP36;
vec3 _TMP35;
vec3 _TMP30;
vec3 _TMP38;
vec3 _TMP26;
vec3 _TMP22;
vec3 _TMP18;
vec3 _TMP37;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec2 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0051;
vec2 _x0053;
vec3 _C0065[4];
vec3 _r0067;
vec3 _C0077[4];
vec3 _C0087[4];
bool _TMP88;
vec3 _a0091;
bvec3 _a0093;
bool _TMP94;
vec3 _a0097;
bvec3 _a0099;
bool _TMP100;
vec3 _a0103;
bvec3 _a0105;
bool _TMP106;
vec3 _a0109;
bvec3 _a0111;
bool _TMP112;
vec3 _a0115;
bvec3 _a0117;
bool _TMP118;
vec3 _a0121;
bvec3 _a0123;
bool _TMP124;
vec3 _a0127;
bvec3 _a0129;
bool _TMP130;
vec3 _a0133;
bvec3 _a0135;
bool _TMP136;
vec3 _a0139;
bvec3 _a0141;
bool _TMP142;
vec3 _a0145;
bvec3 _a0147;
bool _TMP148;
vec3 _a0151;
bvec3 _a0153;
bool _TMP154;
vec3 _a0157;
bvec3 _a0159;
bool _TMP160;
vec3 _a0163;
bvec3 _a0165;
bool _TMP166;
vec3 _a0169;
bvec3 _a0171;
bool _TMP172;
vec3 _a0175;
bvec3 _a0177;
bool _TMP178;
vec3 _a0181;
bvec3 _a0183;
bool _TMP184;
vec3 _a0187;
bvec3 _a0189;
bool _TMP190;
vec3 _a0193;
bvec3 _a0195;
bool _TMP196;
vec3 _a0199;
bvec3 _a0201;
bool _TMP202;
vec3 _a0205;
bvec3 _a0207;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _fp;
    bool _par0;
    bool _par1;
    bool _art0;
    bool _art1;
    _x0051 = TEX0.xy*TextureSize;
    _TMP0 = fract(_x0051);
    _x0053 = 2.00000000E+00*_TMP0;
    _fp = floor(_x0053);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _C0065[0] = _TMP1.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP1.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP1.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0065[1] = _TMP2.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP2.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP2.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0065[2] = _TMP3.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP3.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP3.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0065[3] = _TMP4.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP4.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP4.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _r0067 = _TMP5.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01);
    _r0067 = _r0067 + _TMP5.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01);
    _r0067 = _r0067 + _TMP5.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _TMP9 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _C0077[0] = _TMP6.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP6.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP6.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0077[1] = _TMP7.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP7.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP7.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0077[2] = _TMP8.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP8.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP8.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0077[3] = _TMP9.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP9.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP9.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.xy);
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xy);
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _C0087[0] = _TMP10.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP10.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP10.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0087[1] = _TMP11.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP11.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP11.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0087[2] = _TMP12.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP12.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP12.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _C0087[3] = _TMP13.x*vec3( 2.98999995E-01, -1.68735996E-01, 5.00000000E-01) + _TMP13.y*vec3( 5.87000012E-01, -3.31263989E-01, -4.18687999E-01) + _TMP13.z*vec3( 1.14000000E-01, 5.00000000E-01, -8.13120008E-02);
    _a0091 = _C0065[0] - _C0065[3];
    _TMP37 = abs(_a0091);
    _a0093 = bvec3(_TMP37.x > 1.88235298E-01, _TMP37.y > 2.74509806E-02, _TMP37.z > 2.35294122E-02);
    _TMP88 = _a0093.x || _a0093.y || _a0093.z;
    _a0097 = _C0065[1] - _r0067;
    _TMP37 = abs(_a0097);
    _a0099 = bvec3(_TMP37.x > 1.88235298E-01, _TMP37.y > 2.74509806E-02, _TMP37.z > 2.35294122E-02);
    _TMP94 = _a0099.x || _a0099.y || _a0099.z;
    _par0 = _TMP88 && _TMP94;
    _a0103 = _C0065[0] - _C0065[1];
    _TMP37 = abs(_a0103);
    _a0105 = bvec3(_TMP37.x > 1.88235298E-01, _TMP37.y > 2.74509806E-02, _TMP37.z > 2.35294122E-02);
    _TMP100 = _a0105.x || _a0105.y || _a0105.z;
    _a0109 = _C0065[3] - _r0067;
    _TMP37 = abs(_a0109);
    _a0111 = bvec3(_TMP37.x > 1.88235298E-01, _TMP37.y > 2.74509806E-02, _TMP37.z > 2.35294122E-02);
    _TMP106 = _a0111.x || _a0111.y || _a0111.z;
    _par1 = _TMP100 && _TMP106;
    _a0115 = _C0077[0] - _C0065[2];
    _TMP38 = abs(_a0115);
    _a0117 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP112 = _a0117.x && _a0117.y && _a0117.z;
    _a0121 = _C0077[1] - _C0065[2];
    _TMP38 = abs(_a0121);
    _a0123 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP118 = _a0123.x && _a0123.y && _a0123.z;
    _a0127 = _C0065[2] - _C0077[2];
    _TMP38 = abs(_a0127);
    _a0129 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP124 = _a0129.x && _a0129.y && _a0129.z;
    _a0133 = _C0065[2] - _C0077[3];
    _TMP38 = abs(_a0133);
    _a0135 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP130 = _a0135.x && _a0135.y && _a0135.z;
    _art0 = _TMP118 || _TMP124;
    _art1 = _TMP112 || _TMP130;
    _a0139 = _C0065[0] - _C0065[1];
    _TMP38 = abs(_a0139);
    _a0141 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP136 = _a0141.x && _a0141.y && _a0141.z;
    _a0145 = _C0077[0] - _C0087[0];
    _TMP38 = abs(_a0145);
    _a0147 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP142 = _a0147.x && _a0147.y && _a0147.z;
    _a0151 = _C0077[0] - _C0087[1];
    _TMP38 = abs(_a0151);
    _a0153 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP148 = _a0153.x && _a0153.y && _a0153.z;
    if (_TMP136 && _par0 && (!_TMP112 || _art0 || _TMP142 || _TMP148)) { 
        _TMP18 = 5.00000000E-01*(_TMP1.xyz + _TMP2.xyz);
    } else {
        _TMP18 = _TMP3.xyz;
    } 
    _a0157 = _C0065[0] - _C0065[3];
    _TMP38 = abs(_a0157);
    _a0159 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP154 = _a0159.x && _a0159.y && _a0159.z;
    _a0163 = _C0077[1] - _C0087[0];
    _TMP38 = abs(_a0163);
    _a0165 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP160 = _a0165.x && _a0165.y && _a0165.z;
    _a0169 = _C0077[1] - _C0087[2];
    _TMP38 = abs(_a0169);
    _a0171 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP166 = _a0171.x && _a0171.y && _a0171.z;
    if (_TMP154 && _par1 && (!_TMP118 || _art1 || _TMP160 || _TMP166)) { 
        _TMP22 = 5.00000000E-01*(_TMP1.xyz + _TMP4.xyz);
    } else {
        _TMP22 = _TMP3.xyz;
    } 
    _a0175 = _C0065[1] - _r0067;
    _TMP38 = abs(_a0175);
    _a0177 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP172 = _a0177.x && _a0177.y && _a0177.z;
    _a0181 = _C0077[2] - _C0087[1];
    _TMP38 = abs(_a0181);
    _a0183 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP178 = _a0183.x && _a0183.y && _a0183.z;
    _a0187 = _C0077[2] - _C0087[3];
    _TMP38 = abs(_a0187);
    _a0189 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP184 = _a0189.x && _a0189.y && _a0189.z;
    if (_TMP172 && _par1 && (!_TMP124 || _art1 || _TMP178 || _TMP184)) { 
        _TMP26 = 5.00000000E-01*(_TMP5.xyz + _TMP2.xyz);
    } else {
        _TMP26 = _TMP3.xyz;
    } 
    _a0193 = _C0065[3] - _r0067;
    _TMP38 = abs(_a0193);
    _a0195 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP190 = _a0195.x && _a0195.y && _a0195.z;
    _a0199 = _C0077[3] - _C0087[2];
    _TMP38 = abs(_a0199);
    _a0201 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP196 = _a0201.x && _a0201.y && _a0201.z;
    _a0205 = _C0077[3] - _C0087[3];
    _TMP38 = abs(_a0205);
    _a0207 = bvec3(_TMP38.x <= 1.88235298E-01, _TMP38.y <= 2.74509806E-02, _TMP38.z <= 2.35294122E-02);
    _TMP202 = _a0207.x && _a0207.y && _a0207.z;
    if (_TMP190 && _par0 && (!_TMP130 || _art0 || _TMP196 || _TMP202)) { 
        _TMP30 = 5.00000000E-01*(_TMP5.xyz + _TMP4.xyz);
    } else {
        _TMP30 = _TMP3.xyz;
    } 
    if (_fp.y == 0.00000000E+00) { 
        if (_fp.x == 0.00000000E+00) { 
            _TMP35 = _TMP18;
        } else {
            _TMP35 = _TMP22;
        } 
        _TMP34 = _TMP35;
    } else {
        if (_fp.x == 0.00000000E+00) { 
            _TMP36 = _TMP26;
        } else {
            _TMP36 = _TMP30;
        } 
        _TMP34 = _TMP36;
    } 
    FragColor.xyz = _TMP34;
    return;
} 
#endif
