// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0011;
vec4 _v0011;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _v0011 = vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w));
    _r0011 = _v0011.x*MVPMatrix[0];
    _r0011 = _r0011 + _v0011.y*MVPMatrix[1];
    _r0011 = _r0011 + _v0011.z*MVPMatrix[2];
    _r0011 = _r0011 + _v0011.w*MVPMatrix[3];
    _OUT._position1 = vec4(float(_r0011.x), float(_r0011.y), float(_r0011.z), float(_r0011.w));
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _OUT._t1 = TexCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float((-2.00000000E+00*_ps.y))));
    _OUT._t2 = TexCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float(-_ps.y)));
    _OUT._t3 = TexCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), 0.00000000E+00);
    _OUT._t4 = TexCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float(_ps.y)));
    _OUT._t5 = TexCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float((2.00000000E+00*_ps.y))));
    _OUT._t6 = TexCoord.xyyy + vec4(float(float((-2.00000000E+00*_ps.x))), float(float(-_ps.y)), 0.00000000E+00, float(float(_ps.y)));
    _OUT._t7 = TexCoord.xyyy + vec4(float(float((2.00000000E+00*_ps.x))), float(float(-_ps.y)), 0.00000000E+00, float(float(_ps.y)));
    _ret_0._position1 = _OUT._position1;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = _OUT._position1;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
float _TMP68;
vec3 _TMP59;
vec3 _TMP57;
vec3 _TMP55;
vec3 _TMP53;
vec3 _TMP58;
vec3 _TMP56;
vec3 _TMP54;
vec3 _TMP52;
vec4 _TMP51;
vec4 _TMP44;
vec4 _TMP43;
vec4 _TMP69;
bvec4 _TMP42;
bvec4 _TMP41;
bvec4 _TMP40;
bvec4 _TMP39;
bvec4 _TMP38;
bvec4 _TMP37;
bvec4 _TMP36;
bvec4 _TMP35;
bvec4 _TMP34;
bvec4 _TMP33;
bvec4 _TMP32;
bvec4 _TMP31;
bvec4 _TMP30;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0089;
vec4 _r0133;
vec4 _r0143;
vec4 _r0153;
vec4 _r0163;
vec4 _r0173;
vec4 _r0183;
vec4 _r0193;
vec4 _r0195;
vec4 _r0197;
vec4 _TMP200;
vec4 _a0203;
vec4 _TMP206;
vec4 _a0209;
vec4 _TMP212;
vec4 _a0215;
vec4 _TMP218;
vec4 _a0221;
vec4 _TMP224;
vec4 _a0227;
vec4 _TMP230;
vec4 _a0233;
vec4 _TMP236;
vec4 _a0239;
vec4 _TMP242;
vec4 _a0245;
vec4 _TMP248;
vec4 _a0251;
vec4 _TMP254;
vec4 _a0257;
vec4 _TMP260;
vec4 _a0263;
vec4 _TMP266;
vec4 _a0269;
vec4 _TMP272;
vec4 _a0275;
vec4 _x0277;
vec4 _TMP278;
vec4 _x0285;
vec4 _TMP286;
vec4 _x0293;
vec4 _TMP294;
vec4 _TMP302;
vec4 _a0305;
vec4 _TMP306;
vec4 _a0309;
vec4 _TMP310;
vec4 _a0313;
vec4 _TMP314;
vec4 _a0317;
vec4 _TMP318;
vec4 _a0321;
vec4 _TMP324;
vec4 _a0327;
vec4 _TMP328;
vec4 _a0331;
vec4 _TMP332;
vec4 _a0335;
vec4 _TMP336;
vec4 _a0339;
vec4 _TMP340;
vec4 _a0343;
vec4 _TMP344;
vec4 _a0347;
vec4 _TMP348;
vec4 _a0351;
vec4 _TMP352;
vec4 _a0355;
vec4 _TMP356;
vec4 _a0359;
vec4 _TMP360;
vec4 _a0363;
vec4 _TMP364;
vec4 _a0367;
float _t0373;
float _t0375;
float _t0377;
float _t0379;
float _t0381;
float _t0383;
float _t0385;
float _t0387;
vec4 _r0389;
vec4 _TMP398;
vec4 _a0401;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    vec2 _fp;
    vec3 _A11;
    vec3 _B11;
    vec3 _C1;
    vec3 _A3;
    vec3 _B3;
    vec3 _C;
    vec3 _D;
    vec3 _E;
    vec3 _F;
    vec3 _G;
    vec3 _H;
    vec3 _I;
    vec3 _G5;
    vec3 _H5;
    vec3 _I5;
    vec3 _A0;
    vec3 _D0;
    vec3 _G0;
    vec3 _C4;
    vec3 _F4;
    vec3 _I4;
    vec4 _b1;
    vec4 _c1;
    vec4 _e1;
    vec4 _i4;
    vec4 _i5;
    vec4 _h5;
    vec3 _fp1;
    vec2 _delta;
    vec4 _fx45;
    vec4 _fx30;
    vec4 _fx60;
    vec4 _maximo;
    vec4 _pixel;
    vec3 _res;
    float _mx;
    _x0089 = TEX0.xy*TextureSize;
    _fp = fract(_x0089);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _A11 = vec3(float(_TMP0.x), float(_TMP0.y), float(_TMP0.z));
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _B11 = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _C1 = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _A3 = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _B3 = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _C = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _D = vec3(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z));
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _E = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _F = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _G = vec3(float(_TMP9.x), float(_TMP9.y), float(_TMP9.z));
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _H = vec3(float(_TMP10.x), float(_TMP10.y), float(_TMP10.z));
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _I = vec3(float(_TMP11.x), float(_TMP11.y), float(_TMP11.z));
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _G5 = vec3(float(_TMP12.x), float(_TMP12.y), float(_TMP12.z));
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _H5 = vec3(float(_TMP13.x), float(_TMP13.y), float(_TMP13.z));
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _I5 = vec3(float(_TMP14.x), float(_TMP14.y), float(_TMP14.z));
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _A0 = vec3(float(_TMP15.x), float(_TMP15.y), float(_TMP15.z));
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _D0 = vec3(float(_TMP16.x), float(_TMP16.y), float(_TMP16.z));
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _G0 = vec3(float(_TMP17.x), float(_TMP17.y), float(_TMP17.z));
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _C4 = vec3(float(_TMP18.x), float(_TMP18.y), float(_TMP18.z));
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _F4 = vec3(float(_TMP19.x), float(_TMP19.y), float(_TMP19.z));
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _I4 = vec3(float(_TMP20.x), float(_TMP20.y), float(_TMP20.z));
    _TMP68 = dot(vec3(float(_B3.x), float(_B3.y), float(_B3.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0133.x = float(_TMP68);
    _TMP68 = dot(vec3(float(_D.x), float(_D.y), float(_D.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0133.y = float(_TMP68);
    _TMP68 = dot(vec3(float(_H.x), float(_H.y), float(_H.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0133.z = float(_TMP68);
    _TMP68 = dot(vec3(float(_F.x), float(_F.y), float(_F.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0133.w = float(_TMP68);
    _b1 = vec4(float(_r0133.x), float(_r0133.y), float(_r0133.z), float(_r0133.w));
    _TMP68 = dot(vec3(float(_C.x), float(_C.y), float(_C.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0143.x = float(_TMP68);
    _TMP68 = dot(vec3(float(_A3.x), float(_A3.y), float(_A3.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0143.y = float(_TMP68);
    _TMP68 = dot(vec3(float(_G.x), float(_G.y), float(_G.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0143.z = float(_TMP68);
    _TMP68 = dot(vec3(float(_I.x), float(_I.y), float(_I.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0143.w = float(_TMP68);
    _c1 = vec4(float(_r0143.x), float(_r0143.y), float(_r0143.z), float(_r0143.w));
    _TMP68 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0153.x = float(_TMP68);
    _TMP68 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0153.y = float(_TMP68);
    _TMP68 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0153.z = float(_TMP68);
    _TMP68 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0153.w = float(_TMP68);
    _e1 = vec4(float(_r0153.x), float(_r0153.y), float(_r0153.z), float(_r0153.w));
    _TMP68 = dot(vec3(float(_I4.x), float(_I4.y), float(_I4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0163.x = float(_TMP68);
    _TMP68 = dot(vec3(float(_C1.x), float(_C1.y), float(_C1.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0163.y = float(_TMP68);
    _TMP68 = dot(vec3(float(_A0.x), float(_A0.y), float(_A0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0163.z = float(_TMP68);
    _TMP68 = dot(vec3(float(_G5.x), float(_G5.y), float(_G5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0163.w = float(_TMP68);
    _i4 = vec4(float(_r0163.x), float(_r0163.y), float(_r0163.z), float(_r0163.w));
    _TMP68 = dot(vec3(float(_I5.x), float(_I5.y), float(_I5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0173.x = float(_TMP68);
    _TMP68 = dot(vec3(float(_C4.x), float(_C4.y), float(_C4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0173.y = float(_TMP68);
    _TMP68 = dot(vec3(float(_A11.x), float(_A11.y), float(_A11.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0173.z = float(_TMP68);
    _TMP68 = dot(vec3(float(_G0.x), float(_G0.y), float(_G0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0173.w = float(_TMP68);
    _i5 = vec4(float(_r0173.x), float(_r0173.y), float(_r0173.z), float(_r0173.w));
    _TMP68 = dot(vec3(float(_H5.x), float(_H5.y), float(_H5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0183.x = float(_TMP68);
    _TMP68 = dot(vec3(float(_F4.x), float(_F4.y), float(_F4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0183.y = float(_TMP68);
    _TMP68 = dot(vec3(float(_B11.x), float(_B11.y), float(_B11.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0183.z = float(_TMP68);
    _TMP68 = dot(vec3(float(_D0.x), float(_D0.y), float(_D0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0183.w = float(_TMP68);
    _h5 = vec4(float(_r0183.x), float(_r0183.y), float(_r0183.z), float(_r0183.w));
    _fp1 = vec3(_fp.y, _fp.x, -1.00000000E+00);
    _r0193 = _fp1.x*vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00);
    _r0193 = _r0193 + _fp1.y*vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00);
    _r0193 = _r0193 + _fp1.z*vec4( 1.50000000E+00, 5.00000000E-01, -5.00000000E-01, 5.00000000E-01);
    _r0195 = _fp1.x*vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00);
    _r0195 = _r0195 + _fp1.y*vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00);
    _r0195 = _r0195 + _fp1.z*vec4( 1.00000000E+00, 1.00000000E+00, -5.00000000E-01, 0.00000000E+00);
    _r0197 = _fp1.x*vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00);
    _r0197 = _r0197 + _fp1.y*vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01);
    _r0197 = _r0197 + _fp1.z*vec4( 2.00000000E+00, 0.00000000E+00, -1.00000000E+00, 5.00000000E-01);
    _a0203 = _b1.wxyz - _c1.wxyz;
    _TMP200 = abs(_a0203);
    _TMP30 = bvec4(_TMP200.x < 1.00000000E+01, _TMP200.y < 1.00000000E+01, _TMP200.z < 1.00000000E+01, _TMP200.w < 1.00000000E+01);
    _a0209 = _b1.wxyz - _c1;
    _TMP206 = abs(_a0209);
    _TMP31 = bvec4(_TMP206.x < 1.00000000E+01, _TMP206.y < 1.00000000E+01, _TMP206.z < 1.00000000E+01, _TMP206.w < 1.00000000E+01);
    _a0215 = _b1.zwxy - _c1.wxyz;
    _TMP212 = abs(_a0215);
    _TMP32 = bvec4(_TMP212.x < 1.00000000E+01, _TMP212.y < 1.00000000E+01, _TMP212.z < 1.00000000E+01, _TMP212.w < 1.00000000E+01);
    _a0221 = _b1.zwxy - _c1.zwxy;
    _TMP218 = abs(_a0221);
    _TMP33 = bvec4(_TMP218.x < 1.00000000E+01, _TMP218.y < 1.00000000E+01, _TMP218.z < 1.00000000E+01, _TMP218.w < 1.00000000E+01);
    _a0227 = _b1 - _i4.yzwx;
    _TMP224 = abs(_a0227);
    _TMP34 = bvec4(_TMP224.x < 1.50000000E+01, _TMP224.y < 1.50000000E+01, _TMP224.z < 1.50000000E+01, _TMP224.w < 1.50000000E+01);
    _a0233 = _b1.yzwx - _i5.wxyz;
    _TMP230 = abs(_a0233);
    _TMP35 = bvec4(_TMP230.x < 1.50000000E+01, _TMP230.y < 1.50000000E+01, _TMP230.z < 1.50000000E+01, _TMP230.w < 1.50000000E+01);
    _a0239 = _b1.wxyz - _b1;
    _TMP236 = abs(_a0239);
    _TMP36 = bvec4(_TMP236.x < 1.50000000E+01, _TMP236.y < 1.50000000E+01, _TMP236.z < 1.50000000E+01, _TMP236.w < 1.50000000E+01);
    _a0245 = _b1.zwxy - _b1.yzwx;
    _TMP242 = abs(_a0245);
    _TMP37 = bvec4(_TMP242.x < 1.50000000E+01, _TMP242.y < 1.50000000E+01, _TMP242.z < 1.50000000E+01, _TMP242.w < 1.50000000E+01);
    _a0251 = _e1 - _c1.wxyz;
    _TMP248 = abs(_a0251);
    _TMP38 = bvec4(_TMP248.x < 1.50000000E+01, _TMP248.y < 1.50000000E+01, _TMP248.z < 1.50000000E+01, _TMP248.w < 1.50000000E+01);
    _a0257 = _b1.wxyz - _i4;
    _TMP254 = abs(_a0257);
    _TMP39 = bvec4(_TMP254.x < 1.50000000E+01, _TMP254.y < 1.50000000E+01, _TMP254.z < 1.50000000E+01, _TMP254.w < 1.50000000E+01);
    _a0263 = _b1.zwxy - _i5;
    _TMP260 = abs(_a0263);
    _TMP40 = bvec4(_TMP260.x < 1.50000000E+01, _TMP260.y < 1.50000000E+01, _TMP260.z < 1.50000000E+01, _TMP260.w < 1.50000000E+01);
    _a0269 = _e1 - _c1.zwxy;
    _TMP266 = abs(_a0269);
    _TMP41 = bvec4(_TMP266.x < 1.50000000E+01, _TMP266.y < 1.50000000E+01, _TMP266.z < 1.50000000E+01, _TMP266.w < 1.50000000E+01);
    _a0275 = _e1 - _c1;
    _TMP272 = abs(_a0275);
    _TMP42 = bvec4(_TMP272.x < 1.50000000E+01, _TMP272.y < 1.50000000E+01, _TMP272.z < 1.50000000E+01, _TMP272.w < 1.50000000E+01);
    _interp_restriction_lv1 = bvec4(_e1.x != _b1.w && _e1.x != _b1.z && (!_TMP30.x || !_TMP31.x || !_TMP32.x || !_TMP33.x || _TMP34.x && _TMP35.x) && (!_TMP36.x && !_TMP37.x || _TMP38.x && !_TMP39.x && !_TMP40.x || _TMP41.x || _TMP42.x), _e1.y != _b1.x && _e1.y != _b1.w && (!_TMP30.y || !_TMP31.y || !_TMP32.y || !_TMP33.y || _TMP34.y && _TMP35.y) && (!_TMP36.y && !_TMP37.y || _TMP38.y && !_TMP39.y && !_TMP40.y || _TMP41.y || _TMP42.y), _e1.z != _b1.y && _e1.z != _b1.x && (!_TMP30.z || !_TMP31.z || !_TMP32.z || !_TMP33.z || _TMP34.z && _TMP35.z) && (!_TMP36.z && !_TMP37.z || _TMP38.z && !_TMP39.z && !_TMP40.z || _TMP41.z || _TMP42.z), _e1.w != _b1.z && _e1.w != _b1.y && (!_TMP30.w || !_TMP31.w || !_TMP32.w || !_TMP33.w || _TMP34.w && _TMP35.w) && (!_TMP36.w && !_TMP37.w || _TMP38.w && !_TMP39.w && !_TMP40.w || _TMP41.w || _TMP42.w));
    _interp_restriction_lv2_left = bvec4(_e1.x != _c1.z && _b1.y != _c1.z, _e1.y != _c1.w && _b1.z != _c1.w, _e1.z != _c1.x && _b1.w != _c1.x, _e1.w != _c1.y && _b1.x != _c1.y);
    _interp_restriction_lv2_up = bvec4(_e1.x != _c1.x && _b1.x != _c1.x, _e1.y != _c1.y && _b1.y != _c1.y, _e1.z != _c1.z && _b1.z != _c1.z, _e1.w != _c1.w && _b1.w != _c1.w);
    _delta = vec2(float((InputSize.x/OutputSize.x)), float(((5.00000000E-01*InputSize.x)/OutputSize.x)));
    _x0277 = _r0193/(2.00000000E+00*_delta.xxxx) + 5.00000000E-01;
    _TMP69 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0277);
    _TMP278 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP69);
    _x0285 = _r0195/(2.00000000E+00*_delta.yxyx) + 5.00000000E-01;
    _TMP69 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0285);
    _TMP286 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP69);
    _x0293 = _r0197/(2.00000000E+00*_delta.xyxy) + 5.00000000E-01;
    _TMP69 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0293);
    _TMP294 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP69);
    _a0305 = _e1 - _c1;
    _TMP302 = abs(_a0305);
    _a0309 = _e1 - _c1.zwxy;
    _TMP306 = abs(_a0309);
    _a0313 = _c1.wxyz - _h5;
    _TMP310 = abs(_a0313);
    _a0317 = _c1.wxyz - _h5.yzwx;
    _TMP314 = abs(_a0317);
    _a0321 = _b1.zwxy - _b1.wxyz;
    _TMP318 = abs(_a0321);
    _TMP43 = _TMP302 + _TMP306 + _TMP310 + _TMP314 + 4.00000000E+00*_TMP318;
    _a0327 = _b1.zwxy - _b1.yzwx;
    _TMP324 = abs(_a0327);
    _a0331 = _b1.zwxy - _i5;
    _TMP328 = abs(_a0331);
    _a0335 = _b1.wxyz - _i4;
    _TMP332 = abs(_a0335);
    _a0339 = _b1.wxyz - _b1;
    _TMP336 = abs(_a0339);
    _a0343 = _e1 - _c1.wxyz;
    _TMP340 = abs(_a0343);
    _TMP44 = _TMP324 + _TMP328 + _TMP332 + _TMP336 + 4.00000000E+00*_TMP340;
    _edr = bvec4(_TMP43.x < _TMP44.x && _interp_restriction_lv1.x, _TMP43.y < _TMP44.y && _interp_restriction_lv1.y, _TMP43.z < _TMP44.z && _interp_restriction_lv1.z, _TMP43.w < _TMP44.w && _interp_restriction_lv1.w);
    _a0347 = _b1.wxyz - _c1.zwxy;
    _TMP344 = abs(_a0347);
    _a0351 = _b1.zwxy - _c1;
    _TMP348 = abs(_a0351);
    _edr_left = bvec4((2.00000000E+00*_TMP344).x <= _TMP348.x && _interp_restriction_lv2_left.x && _edr.x, (2.00000000E+00*_TMP344).y <= _TMP348.y && _interp_restriction_lv2_left.y && _edr.y, (2.00000000E+00*_TMP344).z <= _TMP348.z && _interp_restriction_lv2_left.z && _edr.z, (2.00000000E+00*_TMP344).w <= _TMP348.w && _interp_restriction_lv2_left.w && _edr.w);
    _a0355 = _b1.wxyz - _c1.zwxy;
    _TMP352 = abs(_a0355);
    _a0359 = _b1.zwxy - _c1;
    _TMP356 = abs(_a0359);
    _edr_up = bvec4(_TMP352.x >= (2.00000000E+00*_TMP356).x && _interp_restriction_lv2_up.x && _edr.x, _TMP352.y >= (2.00000000E+00*_TMP356).y && _interp_restriction_lv2_up.y && _edr.y, _TMP352.z >= (2.00000000E+00*_TMP356).z && _interp_restriction_lv2_up.z && _edr.z, _TMP352.w >= (2.00000000E+00*_TMP356).w && _interp_restriction_lv2_up.w && _edr.w);
    _fx45 = vec4(float(_edr.x), float(_edr.y), float(_edr.z), float(_edr.w))*_TMP278;
    _fx30 = vec4(float(_edr_left.x), float(_edr_left.y), float(_edr_left.z), float(_edr_left.w))*_TMP286;
    _fx60 = vec4(float(_edr_up.x), float(_edr_up.y), float(_edr_up.z), float(_edr_up.w))*_TMP294;
    _a0363 = _e1 - _b1.wxyz;
    _TMP360 = abs(_a0363);
    _a0367 = _e1 - _b1.zwxy;
    _TMP364 = abs(_a0367);
    _px = bvec4(_TMP360.x <= _TMP364.x, _TMP360.y <= _TMP364.y, _TMP360.z <= _TMP364.z, _TMP360.w <= _TMP364.w);
    _TMP51 = max(_fx30, _fx60);
    _maximo = max(_TMP51, _fx45);
    _t0373 = float(_px.x);
    _TMP52 = _H + _t0373*(_F - _H);
    _t0375 = float(_maximo.x);
    _TMP53 = _E + _t0375*(_TMP52 - _E);
    _t0377 = float(_px.y);
    _TMP54 = _F + _t0377*(_B3 - _F);
    _t0379 = float(_maximo.y);
    _TMP55 = _E + _t0379*(_TMP54 - _E);
    _t0381 = float(_px.z);
    _TMP56 = _B3 + _t0381*(_D - _B3);
    _t0383 = float(_maximo.z);
    _TMP57 = _E + _t0383*(_TMP56 - _E);
    _t0385 = float(_px.w);
    _TMP58 = _D + _t0385*(_H - _D);
    _t0387 = float(_maximo.w);
    _TMP59 = _E + _t0387*(_TMP58 - _E);
    _TMP68 = dot(vec3(float(_TMP53.x), float(_TMP53.y), float(_TMP53.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0389.x = float(_TMP68);
    _TMP68 = dot(vec3(float(_TMP55.x), float(_TMP55.y), float(_TMP55.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0389.y = float(_TMP68);
    _TMP68 = dot(vec3(float(_TMP57.x), float(_TMP57.y), float(_TMP57.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0389.z = float(_TMP68);
    _TMP68 = dot(vec3(float(_TMP59.x), float(_TMP59.y), float(_TMP59.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0389.w = float(_TMP68);
    _pixel = vec4(float(_r0389.x), float(_r0389.y), float(_r0389.z), float(_r0389.w));
    _a0401 = _pixel - _e1;
    _TMP398 = abs(_a0401);
    _res = _TMP53;
    _mx = _TMP398.x;
    if (_TMP398.y > _TMP398.x) { 
        _res = _TMP55;
        _mx = _TMP398.y;
    } 
    if (_TMP398.z > _mx) { 
        _res = _TMP57;
        _mx = _TMP398.z;
    } 
    if (_TMP398.w > _mx) { 
        _res = _TMP59;
    } 
    _ret_0 = vec4(float(_res.x), float(_res.y), float(_res.z), 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
