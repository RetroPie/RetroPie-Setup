// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARorig_tex;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _tex_coord;
struct orig {
    vec2 _tex_coord;
    vec2 _texture_size;
float _placeholder30;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size1;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
    vec4 _t1;
    vec2 VARorig_tex;
};
out_vertex _co1;
orig _ORIG1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
uniform COMPAT_PRECISION vec2 OrigTextureSize;
COMPAT_ATTRIBUTE vec2 OrigTexCoord;
void main()
{
    vec2 _ps;
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _co1._position1 = _r0007;
    _co1._color1 = COLOR;
    _ps = vec2(1.00000000E+00/OrigTextureSize.x, 1.00000000E+00/OrigTextureSize.y);
    _co1._texCoord1 = TexCoord.xy;
    VARorig_tex = OrigTexCoord;
    _co1._t1 = vec4(_ps.x, 0.00000000E+00, 0.00000000E+00, _ps.y);
    gl_Position = _r0007;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    TEX1 = _co1._t1;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARorig_tex;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _tex_coord;
struct orig {
    vec2 _tex_coord;
    vec2 _texture_size;
float _placeholder34;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size1;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color1;
    vec2 _texCoord;
    vec4 _t1;
    vec2 VARorig_tex;
};
vec4 _ret_0;
vec3 _TMP40;
vec3 _TMP39;
vec3 _TMP38;
vec3 _TMP37;
vec3 _TMP36;
float _TMP32;
float _TMP33;
float _TMP34;
float _TMP35;
float _TMP28;
float _TMP29;
float _TMP30;
float _TMP31;
float _TMP27;
float _TMP26;
float _TMP46;
float _TMP47;
float _TMP25;
float _TMP24;
float _TMP23;
float _TMP43;
float _TMP42;
float _TMP41;
float _TMP22;
float _TMP21;
float _TMP20;
vec4 _TMP19;
float _TMP18;
vec4 _TMP17;
float _TMP16;
vec4 _TMP15;
vec4 _TMP45;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
float _TMP44;
vec2 _TMP0;
out_vertex _co1;
uniform sampler2D Texture;
orig _ORIG1;
input_dummy _IN1;
vec2 _x0057;
vec2 _val0059;
float _x0061;
float _TMP62;
float _x0069;
float _TMP70;
float _x0077;
float _TMP78;
float _x0085;
float _TMP86;
vec2 _c0093;
vec2 _c0095;
vec2 _c0097;
vec2 _c0099;
vec2 _c0103;
vec2 _c0105;
vec2 _c0107;
vec4 _r0109;
vec4 _TMP112;
vec4 _TMP118;
vec4 _x0121;
vec2 _c0129;
vec2 _c0135;
float _x0141;
float _x0145;
float _x0149;
float _x0153;
float _x0157;
float _x0161;
float _TMP164;
float _x0167;
float _x0169;
float _x0173;
float _TMP176;
float _x0179;
vec4 _info0181;
float _x0183;
float _x0187;
float _TMP190;
float _x0193;
float _x0195;
float _x0199;
float _TMP202;
float _x0205;
float _x0207;
float _x0211;
float _TMP214;
float _x0217;
float _x0219;
float _x0223;
float _TMP226;
float _x0229;
float _x0231;
float _x0235;
float _x0239;
float _x0243;
float _x0247;
float _x0251;
float _TMP254;
float _x0257;
float _x0259;
float _x0263;
float _x0267;
float _x0271;
float _TMP274;
float _x0277;
float _x0279;
float _x0283;
float _x0287;
float _x0291;
float _TMP294;
float _x0297;
float _TMP300;
float _x0303;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
 
uniform sampler2D OrigTexture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    float _pct;
    vec2 _pos;
    vec2 _dir;
    vec2 _g1;
    vec2 _g2;
    float _info1;
    float _info_nr;
    float _info_nd;
    vec3 _color;
    _x0057 = TEX0.xy*TextureSize;
    _TMP0 = fract(_x0057);
    _pos = _TMP0 - vec2( 5.00000000E-01, 5.00000000E-01);
    _val0059 = vec2(float((_pos.x > 0.00000000E+00)), float((_pos.y > 0.00000000E+00)));
    _dir = _val0059 - vec2(float((_pos.x < 0.00000000E+00)), float((_pos.y < 0.00000000E+00)));
    _x0061 = -_dir.y*_dir.x;
    _TMP44 = min(1.00000000E+00, _x0061);
    _TMP62 = max(0.00000000E+00, _TMP44);
    _x0069 = _dir.y*_dir.x;
    _TMP44 = min(1.00000000E+00, _x0069);
    _TMP70 = max(0.00000000E+00, _TMP44);
    _g1 = _dir*(_TMP62*TEX1.zw + _TMP70*TEX1.xy);
    _x0077 = _dir.y*_dir.x;
    _TMP44 = min(1.00000000E+00, _x0077);
    _TMP78 = max(0.00000000E+00, _TMP44);
    _x0085 = -_dir.y*_dir.x;
    _TMP44 = min(1.00000000E+00, _x0085);
    _TMP86 = max(0.00000000E+00, _TMP44);
    _g2 = _dir*(_TMP78*TEX1.zw + _TMP86*TEX1.xy);
    _c0093 = VARorig_tex + _g1;
    _TMP5 = COMPAT_TEXTURE(OrigTexture, _c0093);
    _c0095 = VARorig_tex - _g2;
    _TMP6 = COMPAT_TEXTURE(OrigTexture, _c0095);
    _c0097 = VARorig_tex - _g1;
    _TMP7 = COMPAT_TEXTURE(OrigTexture, _c0097);
    _c0099 = VARorig_tex + _g2;
    _TMP8 = COMPAT_TEXTURE(OrigTexture, _c0099);
    _TMP9 = COMPAT_TEXTURE(OrigTexture, VARorig_tex);
    _c0103 = VARorig_tex + 2.00000000E+00*_g1;
    _TMP10 = COMPAT_TEXTURE(OrigTexture, _c0103);
    _c0105 = VARorig_tex + _g1 + _g2;
    _TMP11 = COMPAT_TEXTURE(OrigTexture, _c0105);
    _c0107 = VARorig_tex + 2.00000000E+00*_g2;
    _TMP12 = COMPAT_TEXTURE(OrigTexture, _c0107);
    _r0109 = _dir.x*vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00);
    _r0109 = _r0109 + _dir.y*vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00);
    _TMP45 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0109);
    _TMP112 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP45);
    _x0121 = _TMP112 + 5.00000000E-01;
    _TMP118 = floor(_x0121);
    _TMP15 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP16 = dot(_TMP15, _TMP118);
    _info1 = 2.55000000E+02*_TMP16 + 5.00000000E-01;
    _c0129 = TEX0.xy + _g1;
    _TMP17 = COMPAT_TEXTURE(Texture, _c0129);
    _TMP18 = dot(_TMP17, _TMP118);
    _info_nr = 2.55000000E+02*_TMP18 + 5.00000000E-01;
    _c0135 = TEX0.xy + _g2;
    _TMP19 = COMPAT_TEXTURE(Texture, _c0135);
    _TMP20 = dot(_TMP19, _TMP118);
    _info_nd = 2.55000000E+02*_TMP20 + 5.00000000E-01;
    _x0141 = _info1/2.00000000E+00;
    if (_x0141 < 0.00000000E+00) { 
        _x0145 = -_x0141;
        _TMP47 = floor(_x0145);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0141);
    } 
    _x0149 = _TMP46/2.00000000E+00;
    if (_x0149 < 0.00000000E+00) { 
        _x0153 = -_x0149;
        _TMP47 = floor(_x0153);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0149);
    } 
    _x0157 = _TMP46/2.00000000E+00;
    if (_x0157 < 0.00000000E+00) { 
        _x0161 = -_x0157;
        _TMP47 = floor(_x0161);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0157);
    } 
    _TMP21 = _x0157 - _TMP46;
    _x0167 = _TMP21 + 5.00000000E-01;
    _TMP164 = floor(_x0167);
    _x0169 = _TMP46/2.00000000E+00;
    if (_x0169 < 0.00000000E+00) { 
        _x0173 = -_x0169;
        _TMP47 = floor(_x0173);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0169);
    } 
    _TMP22 = _x0169 - _TMP46;
    _x0179 = _TMP22 + 5.00000000E-01;
    _TMP176 = floor(_x0179);
    _x0183 = _TMP46/2.00000000E+00;
    if (_x0183 < 0.00000000E+00) { 
        _x0187 = -_x0183;
        _TMP47 = floor(_x0187);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0183);
    } 
    _TMP41 = _x0183 - _TMP46;
    _x0193 = _TMP41 + 5.00000000E-01;
    _TMP190 = floor(_x0193);
    _info0181.x = _TMP190;
    _x0195 = _TMP46/2.00000000E+00;
    if (_x0195 < 0.00000000E+00) { 
        _x0199 = -_x0195;
        _TMP47 = floor(_x0199);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0195);
    } 
    _TMP42 = _x0195 - _TMP46;
    _x0205 = _TMP42 + 5.00000000E-01;
    _TMP202 = floor(_x0205);
    _info0181.y = _TMP202;
    _x0207 = _TMP46/2.00000000E+00;
    if (_x0207 < 0.00000000E+00) { 
        _x0211 = -_x0207;
        _TMP47 = floor(_x0211);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0207);
    } 
    _TMP43 = _x0207 - _TMP46;
    _x0217 = _TMP43 + 5.00000000E-01;
    _TMP214 = floor(_x0217);
    _info0181.z = _TMP214;
    _info0181.w = _TMP46;
    _x0219 = _info_nr/2.00000000E+00;
    if (_x0219 < 0.00000000E+00) { 
        _x0223 = -_x0219;
        _TMP47 = floor(_x0223);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0219);
    } 
    _TMP23 = _x0219 - _TMP46;
    _x0229 = _TMP23 + 5.00000000E-01;
    _TMP226 = floor(_x0229);
    _x0231 = _TMP46/2.00000000E+00;
    if (_x0231 < 0.00000000E+00) { 
        _x0235 = -_x0231;
        _TMP47 = floor(_x0235);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0231);
    } 
    _x0239 = _TMP46/2.00000000E+00;
    if (_x0239 < 0.00000000E+00) { 
        _x0243 = -_x0239;
        _TMP47 = floor(_x0243);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0239);
    } 
    _x0247 = _TMP46/2.00000000E+00;
    if (_x0247 < 0.00000000E+00) { 
        _x0251 = -_x0247;
        _TMP47 = floor(_x0251);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0247);
    } 
    _TMP24 = _x0247 - _TMP46;
    _x0257 = _TMP24 + 5.00000000E-01;
    _TMP254 = floor(_x0257);
    _x0259 = _info_nd/2.00000000E+00;
    if (_x0259 < 0.00000000E+00) { 
        _x0263 = -_x0259;
        _TMP47 = floor(_x0263);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0259);
    } 
    _x0267 = _TMP46/2.00000000E+00;
    if (_x0267 < 0.00000000E+00) { 
        _x0271 = -_x0267;
        _TMP47 = floor(_x0271);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0267);
    } 
    _TMP25 = _x0267 - _TMP46;
    _x0277 = _TMP25 + 5.00000000E-01;
    _TMP274 = floor(_x0277);
    _x0279 = _TMP46/2.00000000E+00;
    if (_x0279 < 0.00000000E+00) { 
        _x0283 = -_x0279;
        _TMP47 = floor(_x0283);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0279);
    } 
    _x0287 = _TMP46/2.00000000E+00;
    if (_x0287 < 0.00000000E+00) { 
        _x0291 = -_x0287;
        _TMP47 = floor(_x0291);
        _TMP46 = -_TMP47;
    } else {
        _TMP46 = floor(_x0287);
    } 
    _TMP26 = _x0287 - _TMP46;
    _x0297 = _TMP26 + 5.00000000E-01;
    _TMP294 = floor(_x0297);
    _TMP27 = dot(vec4( 8.00000000E+00, 4.00000000E+00, 2.00000000E+00, 1.00000000E+00), _info0181);
    _x0303 = _TMP27 + 5.00000000E-01;
    _TMP300 = floor(_x0303);
    if (_TMP300 >= 5.00000000E+00) { 
        if (_TMP300 == 5.00000000E+00) { 
            _TMP28 = 5.00000000E-01;
        } else {
            if (_TMP300 == 6.00000000E+00) { 
                _TMP29 = 6.25000000E-01;
            } else {
                if (_TMP300 == 7.00000000E+00) { 
                    _TMP30 = 7.50000000E-01;
                } else {
                    if (_TMP300 == 8.00000000E+00) { 
                        _TMP31 = 8.33333313E-01;
                    } else {
                        _TMP31 = 8.75000000E-01;
                    } 
                    _TMP30 = _TMP31;
                } 
                _TMP29 = _TMP30;
            } 
            _TMP28 = _TMP29;
        } 
        _pct = _TMP28;
    } else {
        if (_TMP300 == 0.00000000E+00) { 
            _TMP32 = 0.00000000E+00;
        } else {
            if (_TMP300 == 1.00000000E+00) { 
                _TMP33 = 1.25000000E-01;
            } else {
                if (_TMP300 == 2.00000000E+00) { 
                    _TMP34 = 1.66666672E-01;
                } else {
                    if (_TMP300 == 3.00000000E+00) { 
                        _TMP35 = 2.50000000E-01;
                    } else {
                        _TMP35 = 3.75000000E-01;
                    } 
                    _TMP34 = _TMP35;
                } 
                _TMP33 = _TMP34;
            } 
            _TMP32 = _TMP33;
        } 
        _pct = _TMP32;
    } 
    if (bool(_TMP226)) { 
        _TMP36 = _TMP11.xyz + _TMP254*(_TMP10.xyz - _TMP11.xyz);
        _color = _TMP9.xyz + 1.66666672E-01*(_TMP36 - _TMP9.xyz);
    } else {
        if (bool(_TMP274)) { 
            _TMP37 = _TMP11.xyz + _TMP294*(_TMP12.xyz - _TMP11.xyz);
            _color = _TMP9.xyz + 1.66666672E-01*(_TMP37 - _TMP9.xyz);
        } else {
            _TMP38 = _TMP8.xyz + _TMP176*(_TMP5.xyz - _TMP8.xyz);
            _TMP39 = _TMP7.xyz + _TMP176*(_TMP6.xyz - _TMP7.xyz);
            _TMP40 = _TMP38 + _TMP164*(_TMP39 - _TMP38);
            _color = _TMP9.xyz + _pct*(_TMP40 - _TMP9.xyz);
        } 
    } 
    _ret_0 = vec4(_color.x, _color.y, _color.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
