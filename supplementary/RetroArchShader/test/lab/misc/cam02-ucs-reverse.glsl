// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
};
out_vertex _co1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _co1._position1 = _r0007;
    _co1._color1 = COLOR;
    _co1._texCoord1 = TexCoord.xy;
    gl_Position = _r0007;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
};
vec4 _ret_0;
vec3 _TMP14;
float _TMP23;
float _TMP22;
float _TMP21;
vec3 _TMP24;
vec3 _TMP13;
vec3 _TMP10;
vec3 _TMP12;
vec3 _TMP11;
float _TMP9;
float _TMP8;
float _TMP20;
float _TMP7;
float _TMP6;
float _TMP5;
float _TMP4;
float _TMP3;
float _TMP2;
float _TMP19;
float _TMP18;
float _TMP15;
float _TMP17;
float _TMP16;
vec4 _TMP0;
uniform sampler2D Texture;
float _t30036;
float _t10036;
float _t00036;
float _t40036;
float _TMP49;
float _x0050;
float _x0056;
float _a0064;
float _TMP65;
vec3 _r0076;
vec3 _val0084;
vec3 _a0090;
vec3 _r0098;
vec3 _TMP107;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec3 _c0;
    float _Mp;
    float _J;
    float _C0;
    float _t;
    float _l;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0 = 1.70000000E+02*_TMP0.xyz - 6.99499969E+01;
    _Mp = length(_c0.yz);
    _t30036 = abs(_c0.y);
    _t10036 = abs(_c0.z);
    _t00036 = max(_t30036, _t10036);
    _t10036 = min(_t30036, _t10036);
    _t30036 = 1.00000000E+00/_t00036;
    _t30036 = _t10036*_t30036;
    _t40036 = _t30036*_t30036;
    _t00036 = -1.34804696E-02*_t40036 + 5.74773103E-02;
    _t00036 = _t00036*_t40036 - 1.21239103E-01;
    _t00036 = _t00036*_t40036 + 1.95635900E-01;
    _t00036 = _t00036*_t40036 - 3.32994610E-01;
    _t00036 = _t00036*_t40036 + 9.99995589E-01;
    _t30036 = _t00036*_t30036;
    _TMP16 = abs(_c0.z);
    _TMP17 = abs(_c0.y);
    if (_TMP16 > _TMP17) { 
        _TMP15 = 1.57079601E+00 - _t30036;
    } else {
        _TMP15 = _t30036;
    } 
    if (_c0.y < 0.00000000E+00) { 
        _TMP18 = 3.14159298E+00 - _TMP15;
    } else {
        _TMP18 = _TMP15;
    } 
    if (_c0.z < 0.00000000E+00) { 
        _TMP19 = -_TMP18;
    } else {
        _TMP19 = _TMP18;
    } 
    _J = (1.42857147E+02*_c0.x)/(2.42857147E+02 - _c0.x);
    _x0050 = 5.29999984E-03*_Mp;
    _TMP49 = pow(2.71828198E+00, _x0050);
    _C0 = 1.99504013E+02*(_TMP49 - 1.00000000E+00);
    _TMP2 = inversesqrt(_J);
    _x0056 = _C0*_TMP2;
    _TMP3 = pow(_x0056, 1.11111116E+00);
    _t = 1.46057415E+01*_TMP3;
    _TMP4 = pow(_J, 9.88350153E-01);
    _c0.x = 4.12368774E-01*_TMP4;
    _TMP5 = cos(_TMP19);
    _TMP6 = sin(_TMP19);
    _a0064 = _TMP19 + 2.00000000E+00;
    _TMP7 = cos(_a0064);
    _l = ((6.37727261E-01 + 2.09027362E+00*_c0.x)*_t)/(6.11374609E+03 + _t*(_TMP5 + 9.81818199E+00*_TMP6) + 1.60888062E+03*_TMP7);
    _TMP20 = min(1.11772120E+00, _l);
    _TMP65 = max(0.00000000E+00, _TMP20);
    _TMP8 = cos(_TMP19);
    _c0.y = _TMP65*_TMP8;
    _TMP9 = sin(_TMP19);
    _c0.z = _TMP65*_TMP9;
    _r0076.x = dot(vec3( 3.27769220E-01, 3.21454018E-01, 2.05274418E-01), _c0);
    _r0076.y = dot(vec3( 3.27769220E-01, -6.35067701E-01, -1.86029941E-01), _c0);
    _r0076.z = dot(vec3( 3.27769220E-01, -1.56806841E-01, -4.49037790E+00), _c0);
    _val0084 = vec3(float((_r0076.x > 0.00000000E+00)), float((_r0076.y > 0.00000000E+00)), float((_r0076.z > 0.00000000E+00)));
    _TMP10 = _val0084 - vec3(float((_r0076.x < 0.00000000E+00)), float((_r0076.y < 0.00000000E+00)), float((_r0076.z < 0.00000000E+00)));
    _TMP11 = abs(_r0076);
    _TMP12 = abs(_r0076);
    _a0090 = (2.06135117E+02*_TMP11)/(4.00000000E+02 - _TMP12);
    _TMP21 = pow(_a0090.x, 2.38095236E+00);
    _TMP22 = pow(_a0090.y, 2.38095236E+00);
    _TMP23 = pow(_a0090.z, 2.38095236E+00);
    _TMP13 = vec3(_TMP21, _TMP22, _TMP23);
    _c0 = _TMP10*_TMP13;
    _r0098.x = dot(vec3( 5.76475286E+00, -4.70581341E+00, 1.56517535E-01), _c0);
    _r0098.y = dot(vec3( -1.18676174E+00, 2.32166862E+00, -1.54712185E-01), _c0);
    _r0098.z = dot(vec3( 3.17751467E-02, -1.95603043E-01, 1.06830180E+00), _c0);
    _c0 = _r0098/1.00000000E+02;
    _TMP24 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _c0);
    _TMP107 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP24);
    _TMP21 = pow(_TMP107.x, 4.16666657E-01);
    _TMP22 = pow(_TMP107.y, 4.16666657E-01);
    _TMP23 = pow(_TMP107.z, 4.16666657E-01);
    _TMP14 = vec3(_TMP21, _TMP22, _TMP23);
    _c0 = vec3(_TMP107.x <= 3.13080498E-03 ? (1.29200001E+01*_TMP107).x : (1.05499995E+00*_TMP14 - 5.49999997E-02).x, _TMP107.y <= 3.13080498E-03 ? (1.29200001E+01*_TMP107).y : (1.05499995E+00*_TMP14 - 5.49999997E-02).y, _TMP107.z <= 3.13080498E-03 ? (1.29200001E+01*_TMP107).z : (1.05499995E+00*_TMP14 - 5.49999997E-02).z);
    _ret_0 = vec4(_c0.x, _c0.y, _c0.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
