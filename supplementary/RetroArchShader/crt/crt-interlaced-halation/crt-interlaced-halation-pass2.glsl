// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARcosangle;
COMPAT_VARYING     vec2 VARsinangle;
COMPAT_VARYING     vec3 VARstretch;
COMPAT_VARYING     vec2 VARilfac;
COMPAT_VARYING     float VARmod_factor;
COMPAT_VARYING     vec2 VARone;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _tex_coord;
struct orig {
    vec2 _tex_coord;
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder47;
};
struct input_dummy {
    vec2 _video_size1;
    vec2 _texture_size1;
    vec2 _output_dummy_size1;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
    vec2 VARone;
    float VARmod_factor;
    vec2 VARilfac;
    vec3 VARstretch;
    vec2 VARsinangle;
    vec2 VARcosangle;
};
out_vertex _ret_0;
float _TMP1;
float _TMP12;
float _TMP11;
vec2 _TMP10;
vec2 _TMP9;
float _TMP25;
float _TMP24;
float _TMP23;
float _TMP22;
float _TMP21;
float _TMP20;
float _TMP29;
vec2 _TMP8;
vec2 _TMP7;
float _TMP19;
float _TMP18;
float _TMP17;
float _TMP30;
float _TMP16;
float _TMP15;
float _TMP14;
float _TMP13;
float _TMP28;
float _TMP27;
float _TMP26;
float _TMP6;
float _TMP5;
float _TMP4;
float _TMP3;
orig _ORIG1;
input_dummy _IN1;
vec4 _r0038;
vec2 _c0052;
vec2 _lo0052;
vec2 _hi0052;
vec2 _TMP340052;
float _c0054;
vec2 _xy0054;
vec2 _point0054;
vec2 _tang0054;
vec2 _poc0054;
float _A0054;
float _B0054;
float _C0054;
float _a0054;
vec2 _uv0054;
float _r0054;
float _A0056;
float _B0056;
float _C0056;
float _a0062;
float _a0072;
float _negate0076;
float _x0076;
float _ret0076;
float _a0080;
float _a0084;
float _a0088;
vec2 _uv0090;
float _r0090;
float _x0090;
float _D0090;
float _a0102;
float _a0104;
vec2 _uv0108;
float _r0108;
float _x0108;
float _D0108;
float _a0120;
float _a0122;
vec2 _uv0126;
float _r0126;
float _x0126;
float _D0126;
float _a0138;
float _a0140;
vec2 _uv0144;
float _r0144;
float _x0144;
float _D0144;
float _a0156;
float _a0158;
float _a0162;
float _b0162;
float _x0164;
float _TMP165;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
uniform COMPAT_PRECISION vec2 OrigTextureSize;
uniform COMPAT_PRECISION vec2 OrigInputSize;
void main()
{
    out_vertex _OUT;
    _r0038 = VertexCoord.x*MVPMatrix[0];
    _r0038 = _r0038 + VertexCoord.y*MVPMatrix[1];
    _r0038 = _r0038 + VertexCoord.z*MVPMatrix[2];
    _r0038 = _r0038 + VertexCoord.w*MVPMatrix[3];
    _TMP3 = sin(0.00000000E+00);
    _TMP4 = sin(-1.50000006E-01);
    _OUT.VARsinangle = vec2(_TMP3, _TMP4);
    _TMP5 = cos(0.00000000E+00);
    _TMP6 = cos(-1.50000006E-01);
    _OUT.VARcosangle = vec2(_TMP5, _TMP6);
    _xy0054 = (-2.00000000E+00*_OUT.VARsinangle)/(1.00000000E+00 + _OUT.VARcosangle.x*_OUT.VARcosangle.y);
    _TMP26 = dot(_xy0054, _xy0054);
    _A0056 = _TMP26 + 4.00000000E+00;
    _TMP27 = dot(_xy0054, _OUT.VARsinangle);
    _B0056 = 2.00000000E+00*(2.00000000E+00*(_TMP27 - 2.00000000E+00*_OUT.VARcosangle.x*_OUT.VARcosangle.y) - 4.00000000E+00);
    _C0056 = 4.00000000E+00 + 8.00000000E+00*_OUT.VARcosangle.x*_OUT.VARcosangle.y;
    _a0062 = _B0056*_B0056 - 4.00000000E+00*_A0056*_C0056;
    _TMP29 = inversesqrt(_a0062);
    _TMP28 = 1.00000000E+00/_TMP29;
    _c0054 = (-_B0056 - _TMP28)/(2.00000000E+00*_A0056);
    _point0054 = vec2(_c0054, _c0054)*_xy0054;
    _point0054 = _point0054 - vec2( -2.00000000E+00, -2.00000000E+00)*_OUT.VARsinangle;
    _point0054 = _point0054/vec2( 2.00000000E+00, 2.00000000E+00);
    _tang0054 = _OUT.VARsinangle/_OUT.VARcosangle;
    _poc0054 = _point0054/_OUT.VARcosangle;
    _TMP13 = dot(_tang0054, _tang0054);
    _A0054 = _TMP13 + 1.00000000E+00;
    _TMP14 = dot(_poc0054, _tang0054);
    _B0054 = -2.00000000E+00*_TMP14;
    _TMP15 = dot(_poc0054, _poc0054);
    _C0054 = _TMP15 - 1.00000000E+00;
    _a0072 = _B0054*_B0054 - 4.00000000E+00*_A0054*_C0054;
    _TMP29 = inversesqrt(_a0072);
    _TMP16 = 1.00000000E+00/_TMP29;
    _a0054 = (-_B0054 + _TMP16)/(2.00000000E+00*_A0054);
    _uv0054 = (_point0054 - _a0054*_OUT.VARsinangle)/_OUT.VARcosangle;
    _negate0076 = float((_a0054 < 0.00000000E+00));
    _x0076 = abs(_a0054);
    _ret0076 = -1.87292993E-02*_x0076;
    _ret0076 = _ret0076 + 7.42610022E-02;
    _ret0076 = _ret0076*_x0076;
    _ret0076 = _ret0076 - 2.12114394E-01;
    _ret0076 = _ret0076*_x0076;
    _ret0076 = _ret0076 + 1.57072902E+00;
    _a0080 = 1.00000000E+00 - _x0076;
    _TMP29 = inversesqrt(_a0080);
    _TMP30 = 1.00000000E+00/_TMP29;
    _ret0076 = _ret0076*_TMP30;
    _ret0076 = _ret0076 - 2.00000000E+00*_negate0076*_ret0076;
    _TMP17 = _negate0076*3.14159298E+00 + _ret0076;
    _a0084 = 2.00000000E+00*_TMP17;
    _TMP18 = abs(_a0084);
    _r0054 = max(_TMP18, 9.99999975E-06);
    _a0088 = _r0054/2.00000000E+00;
    _TMP19 = sin(_a0088);
    _c0052 = (_uv0054*_r0054)/_TMP19;
    _uv0090 = vec2(-5.00000000E-01, _c0052.y);
    _TMP20 = dot(_uv0090, _uv0090);
    _TMP29 = inversesqrt(_TMP20);
    _TMP21 = 1.00000000E+00/_TMP29;
    _TMP22 = abs(_TMP21);
    _r0090 = max(_TMP22, 9.99999975E-06);
    _a0102 = _r0090/2.00000000E+00;
    _TMP23 = sin(_a0102);
    _uv0090 = _uv0090*(_TMP23/_r0090);
    _a0104 = _r0090/2.00000000E+00;
    _TMP24 = cos(_a0104);
    _x0090 = 1.00000000E+00 - _TMP24;
    _TMP25 = dot(_uv0090, _OUT.VARsinangle);
    _D0090 = 1.00000000E+00 + _x0090*_OUT.VARcosangle.x*_OUT.VARcosangle.y + _TMP25;
    _TMP7 = (2.00000000E+00*(_uv0090*_OUT.VARcosangle - _x0090*_OUT.VARsinangle))/_D0090;
    _uv0108 = vec2(_c0052.x, -3.75000000E-01);
    _TMP20 = dot(_uv0108, _uv0108);
    _TMP29 = inversesqrt(_TMP20);
    _TMP21 = 1.00000000E+00/_TMP29;
    _TMP22 = abs(_TMP21);
    _r0108 = max(_TMP22, 9.99999975E-06);
    _a0120 = _r0108/2.00000000E+00;
    _TMP23 = sin(_a0120);
    _uv0108 = _uv0108*(_TMP23/_r0108);
    _a0122 = _r0108/2.00000000E+00;
    _TMP24 = cos(_a0122);
    _x0108 = 1.00000000E+00 - _TMP24;
    _TMP25 = dot(_uv0108, _OUT.VARsinangle);
    _D0108 = 1.00000000E+00 + _x0108*_OUT.VARcosangle.x*_OUT.VARcosangle.y + _TMP25;
    _TMP8 = (2.00000000E+00*(_uv0108*_OUT.VARcosangle - _x0108*_OUT.VARsinangle))/_D0108;
    _lo0052 = vec2(_TMP7.x, _TMP8.y)/vec2( 1.00000000E+00, 7.50000000E-01);
    _uv0126 = vec2(5.00000000E-01, _c0052.y);
    _TMP20 = dot(_uv0126, _uv0126);
    _TMP29 = inversesqrt(_TMP20);
    _TMP21 = 1.00000000E+00/_TMP29;
    _TMP22 = abs(_TMP21);
    _r0126 = max(_TMP22, 9.99999975E-06);
    _a0138 = _r0126/2.00000000E+00;
    _TMP23 = sin(_a0138);
    _uv0126 = _uv0126*(_TMP23/_r0126);
    _a0140 = _r0126/2.00000000E+00;
    _TMP24 = cos(_a0140);
    _x0126 = 1.00000000E+00 - _TMP24;
    _TMP25 = dot(_uv0126, _OUT.VARsinangle);
    _D0126 = 1.00000000E+00 + _x0126*_OUT.VARcosangle.x*_OUT.VARcosangle.y + _TMP25;
    _TMP9 = (2.00000000E+00*(_uv0126*_OUT.VARcosangle - _x0126*_OUT.VARsinangle))/_D0126;
    _uv0144 = vec2(_c0052.x, 3.75000000E-01);
    _TMP20 = dot(_uv0144, _uv0144);
    _TMP29 = inversesqrt(_TMP20);
    _TMP21 = 1.00000000E+00/_TMP29;
    _TMP22 = abs(_TMP21);
    _r0144 = max(_TMP22, 9.99999975E-06);
    _a0156 = _r0144/2.00000000E+00;
    _TMP23 = sin(_a0156);
    _uv0144 = _uv0144*(_TMP23/_r0144);
    _a0158 = _r0144/2.00000000E+00;
    _TMP24 = cos(_a0158);
    _x0144 = 1.00000000E+00 - _TMP24;
    _TMP25 = dot(_uv0144, _OUT.VARsinangle);
    _D0144 = 1.00000000E+00 + _x0144*_OUT.VARcosangle.x*_OUT.VARcosangle.y + _TMP25;
    _TMP10 = (2.00000000E+00*(_uv0144*_OUT.VARcosangle - _x0144*_OUT.VARsinangle))/_D0144;
    _hi0052 = vec2(_TMP9.x, _TMP10.y)/vec2( 1.00000000E+00, 7.50000000E-01);
    _a0162 = _hi0052.x - _lo0052.x;
    _b0162 = _hi0052.y - _lo0052.y;
    _TMP11 = max(_a0162, _b0162);
    _TMP340052 = ((_hi0052 + _lo0052)*vec2( 1.00000000E+00, 7.50000000E-01))*5.00000000E-01;
    _OUT.VARstretch = vec3(_TMP340052.x, _TMP340052.y, _TMP11);
    _x0164 = InputSize.y/2.00000000E+02;
    _TMP1 = floor(_x0164);
    _TMP12 = min(2.00000000E+00, _TMP1);
    _TMP165 = max(1.00000000E+00, _TMP12);
    _OUT.VARilfac = vec2(1.00000000E+00, _TMP165);
    _OUT.VARone = _OUT.VARilfac/OrigTextureSize;
    _OUT.VARmod_factor = (TexCoord.x*OrigTextureSize.x*OutputSize.x)/OrigInputSize.x;
    _ret_0._position1 = _r0038;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord1 = TexCoord.xy;
    VARone = _OUT.VARone;
    VARmod_factor = _OUT.VARmod_factor;
    VARilfac = _OUT.VARilfac;
    VARstretch = _OUT.VARstretch;
    VARsinangle = _OUT.VARsinangle;
    VARcosangle = _OUT.VARcosangle;
    gl_Position = _r0038;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord1;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARcosangle;
COMPAT_VARYING     vec2 VARsinangle;
COMPAT_VARYING     vec3 VARstretch;
COMPAT_VARYING     vec2 VARilfac;
COMPAT_VARYING     float _mod_factor;
COMPAT_VARYING     vec2 VARone;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _tex_coord;
struct orig {
    vec2 _tex_coord;
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder44;
};
struct input_dummy {
    vec2 _video_size1;
    vec2 _texture_size1;
    vec2 _output_dummy_size1;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color1;
    vec2 _texCoord;
    vec2 VARone;
    float _mod_factor;
    vec2 VARilfac;
    vec3 VARstretch;
    vec2 VARsinangle;
    vec2 VARcosangle;
};
vec4 _ret_0;
float _TMP58;
float _TMP57;
float _TMP56;
float _TMP44;
float _TMP43;
float _TMP42;
float _TMP41;
vec3 _TMP29;
vec4 _TMP28;
float _TMP52;
float _TMP51;
float _TMP50;
float _TMP49;
vec4 _TMP54;
vec4 _TMP53;
vec4 _TMP26;
vec4 _TMP24;
vec4 _TMP22;
vec4 _TMP20;
vec4 _TMP25;
vec4 _TMP23;
vec4 _TMP21;
vec4 _TMP19;
vec4 _TMP17;
vec4 _TMP15;
vec4 _TMP13;
vec4 _TMP11;
vec4 _TMP16;
vec4 _TMP14;
vec4 _TMP12;
vec4 _TMP10;
float _TMP9;
vec4 _TMP8;
vec4 _TMP7;
float _TMP48;
float _TMP47;
float _TMP46;
float _TMP45;
vec4 _TMP6;
vec2 _TMP5;
float _TMP4;
float _TMP40;
float _TMP3;
float _TMP39;
vec2 _TMP2;
vec2 _TMP1;
vec2 _TMP0;
float _TMP38;
float _TMP37;
float _TMP36;
float _TMP62;
float _TMP35;
float _TMP34;
float _TMP33;
float _TMP32;
float _TMP61;
float _TMP60;
float _TMP59;
out_vertex _VAR1;
uniform sampler2D Texture;
orig _ORIG1;
input_dummy _IN1;
float _c0071;
vec2 _point0071;
vec2 _tang0071;
vec2 _poc0071;
float _A0071;
float _B0071;
float _C0071;
float _a0071;
vec2 _uv0071;
float _r0071;
float _A0073;
float _B0073;
float _C0073;
float _a0079;
float _a0089;
float _negate0093;
float _x0093;
float _ret0093;
float _a0097;
float _a0101;
float _a0105;
vec2 _b0107;
float _TMP116;
float _x0117;
float _c0123;
float _a0125;
vec4 _TMP136;
vec4 _x0151;
vec2 _c0163;
vec2 _c0187;
vec2 _c0199;
vec4 _r0211;
vec4 _TMP212;
vec2 _c0219;
vec2 _c0231;
vec2 _c0243;
vec2 _c0255;
vec4 _r0267;
vec4 _TMP268;
vec4 _wid0275;
vec4 _weights0275;
vec4 _TMP276;
vec4 _x0277;
vec4 _wid0289;
vec4 _weights0289;
float _distance0289;
vec4 _TMP290;
vec4 _x0291;
COMPAT_VARYING vec4 TEX0;
 
uniform COMPAT_PRECISION vec2 OrigTextureSize;
uniform COMPAT_PRECISION vec2 OrigInputSize;
uniform sampler2D OrigTexture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _cd;
    vec2 _xy2;
    vec2 _cd2;
    float _dist;
    vec2 _xy21;
    vec2 _ilfloat;
    vec2 _ratio_scale;
    vec2 _uv_ratio;
    vec4 _coeffs;
    vec4 _weights1;
    vec4 _weights2;
    vec3 _mul_res;
    _cd = TEX0.xy*(OrigTextureSize/OrigInputSize);
    _cd = ((_cd - vec2( 5.00000000E-01, 5.00000000E-01))*vec2( 1.00000000E+00, 7.50000000E-01))*VARstretch.z + VARstretch.xy;
    _TMP59 = dot(_cd, _cd);
    _A0073 = _TMP59 + 4.00000000E+00;
    _TMP60 = dot(_cd, VARsinangle);
    _B0073 = 2.00000000E+00*(2.00000000E+00*(_TMP60 - 2.00000000E+00*VARcosangle.x*VARcosangle.y) - 4.00000000E+00);
    _C0073 = 4.00000000E+00 + 8.00000000E+00*VARcosangle.x*VARcosangle.y;
    _a0079 = _B0073*_B0073 - 4.00000000E+00*_A0073*_C0073;
    _TMP39 = inversesqrt(_a0079);
    _TMP61 = 1.00000000E+00/_TMP39;
    _c0071 = (-_B0073 - _TMP61)/(2.00000000E+00*_A0073);
    _point0071 = vec2(_c0071, _c0071)*_cd;
    _point0071 = _point0071 - vec2( -2.00000000E+00, -2.00000000E+00)*VARsinangle;
    _point0071 = _point0071/vec2( 2.00000000E+00, 2.00000000E+00);
    _tang0071 = VARsinangle/VARcosangle;
    _poc0071 = _point0071/VARcosangle;
    _TMP32 = dot(_tang0071, _tang0071);
    _A0071 = _TMP32 + 1.00000000E+00;
    _TMP33 = dot(_poc0071, _tang0071);
    _B0071 = -2.00000000E+00*_TMP33;
    _TMP34 = dot(_poc0071, _poc0071);
    _C0071 = _TMP34 - 1.00000000E+00;
    _a0089 = _B0071*_B0071 - 4.00000000E+00*_A0071*_C0071;
    _TMP39 = inversesqrt(_a0089);
    _TMP35 = 1.00000000E+00/_TMP39;
    _a0071 = (-_B0071 + _TMP35)/(2.00000000E+00*_A0071);
    _uv0071 = (_point0071 - _a0071*VARsinangle)/VARcosangle;
    _negate0093 = float((_a0071 < 0.00000000E+00));
    _x0093 = abs(_a0071);
    _ret0093 = -1.87292993E-02*_x0093;
    _ret0093 = _ret0093 + 7.42610022E-02;
    _ret0093 = _ret0093*_x0093;
    _ret0093 = _ret0093 - 2.12114394E-01;
    _ret0093 = _ret0093*_x0093;
    _ret0093 = _ret0093 + 1.57072902E+00;
    _a0097 = 1.00000000E+00 - _x0093;
    _TMP39 = inversesqrt(_a0097);
    _TMP62 = 1.00000000E+00/_TMP39;
    _ret0093 = _ret0093*_TMP62;
    _ret0093 = _ret0093 - 2.00000000E+00*_negate0093*_ret0093;
    _TMP36 = _negate0093*3.14159298E+00 + _ret0093;
    _a0101 = 2.00000000E+00*_TMP36;
    _TMP37 = abs(_a0101);
    _r0071 = max(_TMP37, 9.99999975E-06);
    _a0105 = _r0071/2.00000000E+00;
    _TMP38 = sin(_a0105);
    _TMP0 = (_uv0071*_r0071)/_TMP38;
    _xy2 = ((_TMP0/vec2( 1.00000000E+00, 7.50000000E-01) + vec2( 5.00000000E-01, 5.00000000E-01))*OrigInputSize)/OrigTextureSize;
    _cd2 = _xy2*(OrigTextureSize/OrigInputSize);
    _cd2 = (_cd2 - vec2( 5.00000000E-01, 5.00000000E-01)) + vec2( 5.00000000E-01, 5.00000000E-01);
    _b0107 = vec2( 1.00000000E+00, 1.00000000E+00) - _cd2;
    _TMP1 = min(_cd2, _b0107);
    _cd2 = _TMP1*vec2( 1.00000000E+00, 7.50000000E-01);
    _TMP2 = min(_cd2, vec2( 9.99999978E-03, 9.99999978E-03));
    _cd2 = vec2( 9.99999978E-03, 9.99999978E-03) - _TMP2;
    _TMP3 = dot(_cd2, _cd2);
    _TMP39 = inversesqrt(_TMP3);
    _dist = 1.00000000E+00/_TMP39;
    _x0117 = (9.99999978E-03 - _dist)*8.00000000E+02;
    _TMP40 = min(1.00000000E+00, _x0117);
    _TMP116 = max(0.00000000E+00, _TMP40);
    _xy21 = ((((_xy2*OrigTextureSize)/OrigInputSize - vec2( 5.00000000E-01, 5.00000000E-01)) + vec2( 5.00000000E-01, 5.00000000E-01))*InputSize)/TextureSize;
    if (VARilfac.y > 1.50000000E+00) { 
        _a0125 = float(FrameCount)/2.00000000E+00;
        _TMP41 = abs(_a0125);
        _TMP42 = fract(_TMP41);
        _TMP43 = abs(2.00000000E+00);
        _c0123 = _TMP42*_TMP43;
        if (float(FrameCount) < 0.00000000E+00) { 
            _TMP44 = -_c0123;
        } else {
            _TMP44 = _c0123;
        } 
        _TMP4 = _TMP44;
    } else {
        _TMP4 = 0.00000000E+00;
    } 
    _ilfloat = vec2(0.00000000E+00, _TMP4);
    _ratio_scale = ((_xy2*TextureSize - vec2( 5.00000000E-01, 5.00000000E-01)) + _ilfloat)/VARilfac;
    _uv_ratio = fract(_ratio_scale);
    _TMP5 = floor(_ratio_scale);
    _xy2 = ((_TMP5*VARilfac + vec2( 5.00000000E-01, 5.00000000E-01)) - _ilfloat)/TextureSize;
    _coeffs = 3.14159274E+00*vec4(1.00000000E+00 + _uv_ratio.x, _uv_ratio.x, 1.00000000E+00 - _uv_ratio.x, 2.00000000E+00 - _uv_ratio.x);
    _TMP6 = abs(_coeffs);
    _TMP136 = max(_TMP6, vec4( 9.99999975E-06, 9.99999975E-06, 9.99999975E-06, 9.99999975E-06));
    _TMP45 = sin(_TMP136.x);
    _TMP46 = sin(_TMP136.y);
    _TMP47 = sin(_TMP136.z);
    _TMP48 = sin(_TMP136.w);
    _TMP7 = vec4(_TMP45, _TMP46, _TMP47, _TMP48);
    _x0151 = _TMP136/2.00000000E+00;
    _TMP45 = sin(_x0151.x);
    _TMP46 = sin(_x0151.y);
    _TMP47 = sin(_x0151.z);
    _TMP48 = sin(_x0151.w);
    _TMP8 = vec4(_TMP45, _TMP46, _TMP47, _TMP48);
    _coeffs = ((2.00000000E+00*_TMP7)*_TMP8)/(_TMP136*_TMP136);
    _TMP9 = dot(_coeffs, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _coeffs = _coeffs/_TMP9;
    _c0163 = _xy2 + vec2(-VARone.x, 0.00000000E+00);
    _TMP10 = COMPAT_TEXTURE(OrigTexture, _c0163);
    _TMP49 = pow(_TMP10.x, 2.40000010E+00);
    _TMP50 = pow(_TMP10.y, 2.40000010E+00);
    _TMP51 = pow(_TMP10.z, 2.40000010E+00);
    _TMP52 = pow(_TMP10.w, 2.40000010E+00);
    _TMP11 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _TMP12 = COMPAT_TEXTURE(OrigTexture, _xy2);
    _TMP49 = pow(_TMP12.x, 2.40000010E+00);
    _TMP50 = pow(_TMP12.y, 2.40000010E+00);
    _TMP51 = pow(_TMP12.z, 2.40000010E+00);
    _TMP52 = pow(_TMP12.w, 2.40000010E+00);
    _TMP13 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _c0187 = _xy2 + vec2(VARone.x, 0.00000000E+00);
    _TMP14 = COMPAT_TEXTURE(OrigTexture, _c0187);
    _TMP49 = pow(_TMP14.x, 2.40000010E+00);
    _TMP50 = pow(_TMP14.y, 2.40000010E+00);
    _TMP51 = pow(_TMP14.z, 2.40000010E+00);
    _TMP52 = pow(_TMP14.w, 2.40000010E+00);
    _TMP15 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _c0199 = _xy2 + vec2(2.00000000E+00*VARone.x, 0.00000000E+00);
    _TMP16 = COMPAT_TEXTURE(OrigTexture, _c0199);
    _TMP49 = pow(_TMP16.x, 2.40000010E+00);
    _TMP50 = pow(_TMP16.y, 2.40000010E+00);
    _TMP51 = pow(_TMP16.z, 2.40000010E+00);
    _TMP52 = pow(_TMP16.w, 2.40000010E+00);
    _TMP17 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _r0211 = _coeffs.x*_TMP11;
    _r0211 = _r0211 + _coeffs.y*_TMP13;
    _r0211 = _r0211 + _coeffs.z*_TMP15;
    _r0211 = _r0211 + _coeffs.w*_TMP17;
    _TMP53 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0211);
    _TMP212 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP53);
    _c0219 = _xy2 + vec2(-VARone.x, VARone.y);
    _TMP19 = COMPAT_TEXTURE(OrigTexture, _c0219);
    _TMP49 = pow(_TMP19.x, 2.40000010E+00);
    _TMP50 = pow(_TMP19.y, 2.40000010E+00);
    _TMP51 = pow(_TMP19.z, 2.40000010E+00);
    _TMP52 = pow(_TMP19.w, 2.40000010E+00);
    _TMP20 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _c0231 = _xy2 + vec2(0.00000000E+00, VARone.y);
    _TMP21 = COMPAT_TEXTURE(OrigTexture, _c0231);
    _TMP49 = pow(_TMP21.x, 2.40000010E+00);
    _TMP50 = pow(_TMP21.y, 2.40000010E+00);
    _TMP51 = pow(_TMP21.z, 2.40000010E+00);
    _TMP52 = pow(_TMP21.w, 2.40000010E+00);
    _TMP22 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _c0243 = _xy2 + VARone;
    _TMP23 = COMPAT_TEXTURE(OrigTexture, _c0243);
    _TMP49 = pow(_TMP23.x, 2.40000010E+00);
    _TMP50 = pow(_TMP23.y, 2.40000010E+00);
    _TMP51 = pow(_TMP23.z, 2.40000010E+00);
    _TMP52 = pow(_TMP23.w, 2.40000010E+00);
    _TMP24 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _c0255 = _xy2 + vec2(2.00000000E+00*VARone.x, VARone.y);
    _TMP25 = COMPAT_TEXTURE(OrigTexture, _c0255);
    _TMP49 = pow(_TMP25.x, 2.40000010E+00);
    _TMP50 = pow(_TMP25.y, 2.40000010E+00);
    _TMP51 = pow(_TMP25.z, 2.40000010E+00);
    _TMP52 = pow(_TMP25.w, 2.40000010E+00);
    _TMP26 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _r0267 = _coeffs.x*_TMP20;
    _r0267 = _r0267 + _coeffs.y*_TMP22;
    _r0267 = _r0267 + _coeffs.z*_TMP24;
    _r0267 = _r0267 + _coeffs.w*_TMP26;
    _TMP53 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0267);
    _TMP268 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP53);
    _TMP54 = _TMP212*_TMP212*_TMP212;
    _wid0275 = 3.00000012E-01 + 1.00000001E-01*_TMP54;
    _weights0275 = _uv_ratio.y/_wid0275;
    _x0277 = -_weights0275*_weights0275;
    _TMP49 = pow(2.71828198E+00, _x0277.x);
    _TMP50 = pow(2.71828198E+00, _x0277.y);
    _TMP51 = pow(2.71828198E+00, _x0277.z);
    _TMP52 = pow(2.71828198E+00, _x0277.w);
    _TMP276 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _weights1 = (4.00000006E-01*_TMP276)/_wid0275;
    _distance0289 = 1.00000000E+00 - _uv_ratio.y;
    _TMP54 = _TMP268*_TMP268*_TMP268;
    _wid0289 = 3.00000012E-01 + 1.00000001E-01*_TMP54;
    _weights0289 = _distance0289/_wid0289;
    _x0291 = -_weights0289*_weights0289;
    _TMP49 = pow(2.71828198E+00, _x0291.x);
    _TMP50 = pow(2.71828198E+00, _x0291.y);
    _TMP51 = pow(2.71828198E+00, _x0291.z);
    _TMP52 = pow(2.71828198E+00, _x0291.w);
    _TMP290 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _weights2 = (4.00000006E-01*_TMP290)/_wid0289;
    _mul_res = (_TMP212*_weights1 + _TMP268*_weights2).xyz;
    _TMP28 = COMPAT_TEXTURE(Texture, _xy21);
    _TMP56 = pow(_TMP28.x, 2.20000005E+00);
    _TMP57 = pow(_TMP28.y, 2.20000005E+00);
    _TMP58 = pow(_TMP28.z, 2.20000005E+00);
    _TMP29 = vec3(_TMP56, _TMP57, _TMP58);
    _mul_res = _mul_res + _TMP29*1.00000001E-01;
    _mul_res = _mul_res*vec3(_TMP116, _TMP116, _TMP116);
    _TMP56 = pow(_mul_res.x, 4.54545438E-01);
    _TMP57 = pow(_mul_res.y, 4.54545438E-01);
    _TMP58 = pow(_mul_res.z, 4.54545438E-01);
    _mul_res = vec3(_TMP56, _TMP57, _TMP58);
    _ret_0 = vec4(_mul_res.x, _mul_res.y, _mul_res.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
