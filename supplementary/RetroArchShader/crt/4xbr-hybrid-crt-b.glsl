// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0010;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0010 = VertexCoord.x*MVPMatrix[0];
    _r0010 = _r0010 + VertexCoord.y*MVPMatrix[1];
    _r0010 = _r0010 + VertexCoord.z*MVPMatrix[2];
    _r0010 = _r0010 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT._t1 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float((-2.00000000E+00*_ps.y))));
    _OUT._t2 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float(-_ps.y)));
    _OUT._t3 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), 0.00000000E+00);
    _OUT._t4 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float(_ps.y)));
    _OUT._t5 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float((2.00000000E+00*_ps.y))));
    _OUT._t6 = _texCoord.xyyy + vec4(float(float((-2.00000000E+00*_ps.x))), float(float(-_ps.y)), 0.00000000E+00, float(float(_ps.y)));
    _OUT._t7 = _texCoord.xyyy + vec4(float(float((2.00000000E+00*_ps.x))), float(float(-_ps.y)), 0.00000000E+00, float(float(_ps.y)));
    _ret_0._position1 = _r0010;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    _ret_0._t1 = _OUT._t1;
    _ret_0._t2 = _OUT._t2;
    _ret_0._t3 = _OUT._t3;
    _ret_0._t4 = _OUT._t4;
    _ret_0._t5 = _OUT._t5;
    _ret_0._t6 = _OUT._t6;
    _ret_0._t7 = _OUT._t7;
    gl_Position = vec4(float(_r0010.x), float(_r0010.y), float(_r0010.z), float(_r0010.w));
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    TEX1 = _OUT._t1;
    TEX2 = _OUT._t2;
    TEX3 = _OUT._t3;
    TEX4 = _OUT._t4;
    TEX5 = _OUT._t5;
    TEX6 = _OUT._t6;
    TEX7 = _OUT._t7;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
    TEX5 = _ret_0._t5;
    TEX6 = _ret_0._t6;
    TEX7 = _ret_0._t7;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t7;
COMPAT_VARYING     vec4 _t6;
COMPAT_VARYING     vec4 _t5;
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color1;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
    vec4 _t5;
    vec4 _t6;
    vec4 _t7;
};
vec4 _ret_0;
vec3 _TMP72;
vec3 _TMP88;
float _TMP87;
float _TMP86;
float _TMP85;
vec3 _TMP71;
float _TMP84;
float _TMP83;
float _TMP82;
float _TMP91;
float _TMP70;
float _TMP69;
float _TMP68;
vec3 _TMP90;
vec3 _TMP67;
vec3 _TMP66;
vec3 _TMP65;
vec3 _TMP64;
vec3 _TMP63;
vec3 _TMP62;
vec3 _TMP61;
vec3 _TMP60;
vec3 _TMP59;
vec3 _TMP58;
vec4 _TMP57;
float _TMP56;
float _TMP55;
float _TMP54;
vec3 _TMP81;
vec3 _TMP52;
vec3 _TMP51;
vec3 _TMP50;
vec3 _TMP49;
vec4 _TMP42;
vec4 _TMP41;
vec4 _TMP92;
bvec4 _TMP40;
bvec4 _TMP39;
bvec4 _TMP38;
bvec4 _TMP37;
bvec4 _TMP36;
bvec4 _TMP35;
bvec4 _TMP34;
bvec4 _TMP33;
bvec4 _TMP32;
bvec4 _TMP31;
bvec4 _TMP30;
bvec4 _TMP29;
bvec4 _TMP28;
bvec4 _TMP27;
float _TMP89;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0106;
vec4 _r0150;
vec4 _r0160;
vec4 _r0170;
vec4 _r0180;
vec4 _r0190;
vec4 _r0200;
vec4 _TMP211;
vec4 _a0214;
vec4 _TMP217;
vec4 _a0220;
vec4 _TMP223;
vec4 _a0226;
vec4 _TMP229;
vec4 _a0232;
vec4 _TMP235;
vec4 _a0238;
vec4 _TMP241;
vec4 _a0244;
vec4 _TMP247;
vec4 _a0250;
vec4 _TMP253;
vec4 _a0256;
vec4 _TMP259;
vec4 _a0262;
vec4 _TMP265;
vec4 _a0268;
vec4 _TMP271;
vec4 _a0274;
vec4 _TMP277;
vec4 _a0280;
vec4 _TMP283;
vec4 _a0286;
vec4 _TMP289;
vec4 _a0292;
vec4 _x0296;
vec4 _TMP297;
vec4 _x0306;
vec4 _TMP307;
vec4 _x0316;
vec4 _TMP317;
vec4 _TMP325;
vec4 _a0328;
vec4 _TMP329;
vec4 _a0332;
vec4 _TMP333;
vec4 _a0336;
vec4 _TMP337;
vec4 _a0340;
vec4 _TMP341;
vec4 _a0344;
vec4 _TMP347;
vec4 _a0350;
vec4 _TMP351;
vec4 _a0354;
vec4 _TMP355;
vec4 _a0358;
vec4 _TMP359;
vec4 _a0362;
vec4 _TMP363;
vec4 _a0366;
vec4 _TMP367;
vec4 _a0370;
vec4 _TMP371;
vec4 _a0374;
vec4 _TMP375;
vec4 _a0378;
vec4 _TMP379;
vec4 _a0382;
vec4 _TMP383;
vec4 _a0386;
vec4 _TMP387;
vec4 _a0390;
vec3 _b0394;
vec3 _b0398;
vec3 _TMP399;
vec3 _a0400;
vec3 _b0408;
vec3 _b0412;
vec3 _TMP413;
vec3 _a0414;
vec4 _a0420;
vec4 _a0422;
vec4 _a0424;
vec3 _b0430;
vec3 _b0432;
vec3 _df0434;
vec3 _a0436;
vec3 _df0438;
vec3 _a0440;
vec3 _TMP469;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
COMPAT_VARYING vec4 TEX5;
COMPAT_VARYING vec4 TEX6;
COMPAT_VARYING vec4 TEX7;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    bvec4 _nc;
    bvec4 _nc30;
    bvec4 _nc60;
    bvec4 _nc45;
    vec4 _fx;
    vec4 _fx_left;
    vec4 _fx_up;
    vec3 _res1;
    vec3 _res2;
    vec3 _pix1;
    vec3 _pix2;
    float _blend1;
    float _blend2;
    vec2 _fp;
    vec3 _A11;
    vec3 _B11;
    vec3 _C1;
    vec3 _A3;
    vec3 _B3;
    vec3 _C;
    vec3 _D;
    vec3 _E;
    vec3 _F;
    vec3 _G;
    vec3 _H;
    vec3 _I;
    vec3 _G5;
    vec3 _H5;
    vec3 _I5;
    vec3 _A0;
    vec3 _D0;
    vec3 _G0;
    vec3 _C4;
    vec3 _F4;
    vec3 _I4;
    vec4 _b1;
    vec4 _c3;
    vec4 _e1;
    vec4 _i4;
    vec4 _i5;
    vec4 _h5;
    vec4 _fx45;
    vec4 _fx30;
    vec4 _fx60;
    vec3 _res;
    vec3 _n1;
    vec3 _n2;
    vec3 _n3;
    vec3 _n4;
    vec3 _s;
    vec3 _aa;
    vec3 _bb;
    vec3 _cc;
    vec3 _dd;
    vec3 _t;
    vec3 _m;
    vec3 _s1;
    vec3 _s0;
    vec4 _maximo;
    vec3 _color;
    float _ddy;
    float _v_weight_00;
    vec3 _coords10;
    vec3 _colorNB;
    float _v_weight_10;
    _x0106 = TEX0.xy*TextureSize;
    _fp = fract(_x0106);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xw);
    _A11 = vec3(float(_TMP0.x), float(_TMP0.y), float(_TMP0.z));
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.yw);
    _B11 = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _TMP2 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _C1 = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _TMP3 = COMPAT_TEXTURE(Texture, TEX2.xw);
    _A3 = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));
    _TMP4 = COMPAT_TEXTURE(Texture, TEX2.yw);
    _B3 = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _C = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _TMP6 = COMPAT_TEXTURE(Texture, TEX3.xw);
    _D = vec3(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z));
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.yw);
    _E = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _F = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _TMP9 = COMPAT_TEXTURE(Texture, TEX4.xw);
    _G = vec3(float(_TMP9.x), float(_TMP9.y), float(_TMP9.z));
    _TMP10 = COMPAT_TEXTURE(Texture, TEX4.yw);
    _H = vec3(float(_TMP10.x), float(_TMP10.y), float(_TMP10.z));
    _TMP11 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _I = vec3(float(_TMP11.x), float(_TMP11.y), float(_TMP11.z));
    _TMP12 = COMPAT_TEXTURE(Texture, TEX5.xw);
    _G5 = vec3(float(_TMP12.x), float(_TMP12.y), float(_TMP12.z));
    _TMP13 = COMPAT_TEXTURE(Texture, TEX5.yw);
    _H5 = vec3(float(_TMP13.x), float(_TMP13.y), float(_TMP13.z));
    _TMP14 = COMPAT_TEXTURE(Texture, TEX5.zw);
    _I5 = vec3(float(_TMP14.x), float(_TMP14.y), float(_TMP14.z));
    _TMP15 = COMPAT_TEXTURE(Texture, TEX6.xy);
    _A0 = vec3(float(_TMP15.x), float(_TMP15.y), float(_TMP15.z));
    _TMP16 = COMPAT_TEXTURE(Texture, TEX6.xz);
    _D0 = vec3(float(_TMP16.x), float(_TMP16.y), float(_TMP16.z));
    _TMP17 = COMPAT_TEXTURE(Texture, TEX6.xw);
    _G0 = vec3(float(_TMP17.x), float(_TMP17.y), float(_TMP17.z));
    _TMP18 = COMPAT_TEXTURE(Texture, TEX7.xy);
    _C4 = vec3(float(_TMP18.x), float(_TMP18.y), float(_TMP18.z));
    _TMP19 = COMPAT_TEXTURE(Texture, TEX7.xz);
    _F4 = vec3(float(_TMP19.x), float(_TMP19.y), float(_TMP19.z));
    _TMP20 = COMPAT_TEXTURE(Texture, TEX7.xw);
    _I4 = vec3(float(_TMP20.x), float(_TMP20.y), float(_TMP20.z));
    _TMP89 = dot(vec3(float(_B3.x), float(_B3.y), float(_B3.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0150.x = float(_TMP89);
    _TMP89 = dot(vec3(float(_D.x), float(_D.y), float(_D.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0150.y = float(_TMP89);
    _TMP89 = dot(vec3(float(_H.x), float(_H.y), float(_H.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0150.z = float(_TMP89);
    _TMP89 = dot(vec3(float(_F.x), float(_F.y), float(_F.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0150.w = float(_TMP89);
    _b1 = vec4(float(_r0150.x), float(_r0150.y), float(_r0150.z), float(_r0150.w));
    _TMP89 = dot(vec3(float(_C.x), float(_C.y), float(_C.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0160.x = float(_TMP89);
    _TMP89 = dot(vec3(float(_A3.x), float(_A3.y), float(_A3.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0160.y = float(_TMP89);
    _TMP89 = dot(vec3(float(_G.x), float(_G.y), float(_G.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0160.z = float(_TMP89);
    _TMP89 = dot(vec3(float(_I.x), float(_I.y), float(_I.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0160.w = float(_TMP89);
    _c3 = vec4(float(_r0160.x), float(_r0160.y), float(_r0160.z), float(_r0160.w));
    _TMP89 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0170.x = float(_TMP89);
    _TMP89 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0170.y = float(_TMP89);
    _TMP89 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0170.z = float(_TMP89);
    _TMP89 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0170.w = float(_TMP89);
    _e1 = vec4(float(_r0170.x), float(_r0170.y), float(_r0170.z), float(_r0170.w));
    _TMP89 = dot(vec3(float(_I4.x), float(_I4.y), float(_I4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0180.x = float(_TMP89);
    _TMP89 = dot(vec3(float(_C1.x), float(_C1.y), float(_C1.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0180.y = float(_TMP89);
    _TMP89 = dot(vec3(float(_A0.x), float(_A0.y), float(_A0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0180.z = float(_TMP89);
    _TMP89 = dot(vec3(float(_G5.x), float(_G5.y), float(_G5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0180.w = float(_TMP89);
    _i4 = vec4(float(_r0180.x), float(_r0180.y), float(_r0180.z), float(_r0180.w));
    _TMP89 = dot(vec3(float(_I5.x), float(_I5.y), float(_I5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0190.x = float(_TMP89);
    _TMP89 = dot(vec3(float(_C4.x), float(_C4.y), float(_C4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0190.y = float(_TMP89);
    _TMP89 = dot(vec3(float(_A11.x), float(_A11.y), float(_A11.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0190.z = float(_TMP89);
    _TMP89 = dot(vec3(float(_G0.x), float(_G0.y), float(_G0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0190.w = float(_TMP89);
    _i5 = vec4(float(_r0190.x), float(_r0190.y), float(_r0190.z), float(_r0190.w));
    _TMP89 = dot(vec3(float(_H5.x), float(_H5.y), float(_H5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0200.x = float(_TMP89);
    _TMP89 = dot(vec3(float(_F4.x), float(_F4.y), float(_F4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0200.y = float(_TMP89);
    _TMP89 = dot(vec3(float(_B11.x), float(_B11.y), float(_B11.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0200.z = float(_TMP89);
    _TMP89 = dot(vec3(float(_D0.x), float(_D0.y), float(_D0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0200.w = float(_TMP89);
    _h5 = vec4(float(_r0200.x), float(_r0200.y), float(_r0200.z), float(_r0200.w));
    _fx = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x;
    _fx_left = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x;
    _fx_up = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x;
    _a0214 = _e1 - _b1;
    _TMP211 = abs(_a0214);
    _TMP27 = bvec4(_TMP211.x < 2.00000000E+00, _TMP211.y < 2.00000000E+00, _TMP211.z < 2.00000000E+00, _TMP211.w < 2.00000000E+00);
    _a0220 = _e1 - _b1.yzwx;
    _TMP217 = abs(_a0220);
    _TMP28 = bvec4(_TMP217.x < 2.00000000E+00, _TMP217.y < 2.00000000E+00, _TMP217.z < 2.00000000E+00, _TMP217.w < 2.00000000E+00);
    _a0226 = _e1 - _c3.yzwx;
    _TMP223 = abs(_a0226);
    _TMP29 = bvec4(_TMP223.x < 2.00000000E+00, _TMP223.y < 2.00000000E+00, _TMP223.z < 2.00000000E+00, _TMP223.w < 2.00000000E+00);
    _a0232 = _b1.wxyz - _h5.yzwx;
    _TMP229 = abs(_a0232);
    _TMP30 = bvec4(_TMP229.x < 2.00000000E+00, _TMP229.y < 2.00000000E+00, _TMP229.z < 2.00000000E+00, _TMP229.w < 2.00000000E+00);
    _a0238 = _b1.wxyz - _c3;
    _TMP235 = abs(_a0238);
    _TMP31 = bvec4(_TMP235.x < 2.00000000E+00, _TMP235.y < 2.00000000E+00, _TMP235.z < 2.00000000E+00, _TMP235.w < 2.00000000E+00);
    _a0244 = _b1.zwxy - _h5;
    _TMP241 = abs(_a0244);
    _TMP32 = bvec4(_TMP241.x < 2.00000000E+00, _TMP241.y < 2.00000000E+00, _TMP241.z < 2.00000000E+00, _TMP241.w < 2.00000000E+00);
    _a0250 = _b1.zwxy - _c3.zwxy;
    _TMP247 = abs(_a0250);
    _TMP33 = bvec4(_TMP247.x < 2.00000000E+00, _TMP247.y < 2.00000000E+00, _TMP247.z < 2.00000000E+00, _TMP247.w < 2.00000000E+00);
    _a0256 = _b1.wxyz - _b1;
    _TMP253 = abs(_a0256);
    _TMP34 = bvec4(_TMP253.x < 1.50000000E+01, _TMP253.y < 1.50000000E+01, _TMP253.z < 1.50000000E+01, _TMP253.w < 1.50000000E+01);
    _a0262 = _b1.zwxy - _b1.yzwx;
    _TMP259 = abs(_a0262);
    _TMP35 = bvec4(_TMP259.x < 1.50000000E+01, _TMP259.y < 1.50000000E+01, _TMP259.z < 1.50000000E+01, _TMP259.w < 1.50000000E+01);
    _a0268 = _e1 - _c3.wxyz;
    _TMP265 = abs(_a0268);
    _TMP36 = bvec4(_TMP265.x < 1.50000000E+01, _TMP265.y < 1.50000000E+01, _TMP265.z < 1.50000000E+01, _TMP265.w < 1.50000000E+01);
    _a0274 = _b1.wxyz - _i4;
    _TMP271 = abs(_a0274);
    _TMP37 = bvec4(_TMP271.x < 1.50000000E+01, _TMP271.y < 1.50000000E+01, _TMP271.z < 1.50000000E+01, _TMP271.w < 1.50000000E+01);
    _a0280 = _b1.zwxy - _i5;
    _TMP277 = abs(_a0280);
    _TMP38 = bvec4(_TMP277.x < 1.50000000E+01, _TMP277.y < 1.50000000E+01, _TMP277.z < 1.50000000E+01, _TMP277.w < 1.50000000E+01);
    _a0286 = _e1 - _c3.zwxy;
    _TMP283 = abs(_a0286);
    _TMP39 = bvec4(_TMP283.x < 1.50000000E+01, _TMP283.y < 1.50000000E+01, _TMP283.z < 1.50000000E+01, _TMP283.w < 1.50000000E+01);
    _a0292 = _e1 - _c3;
    _TMP289 = abs(_a0292);
    _TMP40 = bvec4(_TMP289.x < 1.50000000E+01, _TMP289.y < 1.50000000E+01, _TMP289.z < 1.50000000E+01, _TMP289.w < 1.50000000E+01);
    _interp_restriction_lv1 = bvec4(_e1.x != _b1.w && _e1.x != _b1.z && (_TMP27.x || _TMP28.x || !_TMP29.x) && (_TMP30.x || _TMP31.x || _TMP32.x || _TMP33.x) && (!_TMP34.x && !_TMP35.x || _TMP36.x && !_TMP37.x && !_TMP38.x || _TMP39.x || _TMP40.x), _e1.y != _b1.x && _e1.y != _b1.w && (_TMP27.y || _TMP28.y || !_TMP29.y) && (_TMP30.y || _TMP31.y || _TMP32.y || _TMP33.y) && (!_TMP34.y && !_TMP35.y || _TMP36.y && !_TMP37.y && !_TMP38.y || _TMP39.y || _TMP40.y), _e1.z != _b1.y && _e1.z != _b1.x && (_TMP27.z || _TMP28.z || !_TMP29.z) && (_TMP30.z || _TMP31.z || _TMP32.z || _TMP33.z) && (!_TMP34.z && !_TMP35.z || _TMP36.z && !_TMP37.z && !_TMP38.z || _TMP39.z || _TMP40.z), _e1.w != _b1.z && _e1.w != _b1.y && (_TMP27.w || _TMP28.w || !_TMP29.w) && (_TMP30.w || _TMP31.w || _TMP32.w || _TMP33.w) && (!_TMP34.w && !_TMP35.w || _TMP36.w && !_TMP37.w && !_TMP38.w || _TMP39.w || _TMP40.w));
    _interp_restriction_lv2_left = bvec4(_e1.x != _c3.z && _b1.y != _c3.z, _e1.y != _c3.w && _b1.z != _c3.w, _e1.z != _c3.x && _b1.w != _c3.x, _e1.w != _c3.y && _b1.x != _c3.y);
    _interp_restriction_lv2_up = bvec4(_e1.x != _c3.x && _b1.x != _c3.x, _e1.y != _c3.y && _b1.y != _c3.y, _e1.z != _c3.z && _b1.z != _c3.z, _e1.w != _c3.w && _b1.w != _c3.w);
    _x0296 = (_fx - vec4( 1.10000002E+00, 9.99999940E-02, -8.99999976E-01, 9.99999940E-02))/vec4( 7.99999952E-01, 7.99999952E-01, 7.99999952E-01, 7.99999952E-01);
    _TMP92 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0296);
    _TMP297 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP92);
    _fx45 = _TMP297*_TMP297*(3.00000000E+00 - 2.00000000E+00*_TMP297);
    _x0306 = (_fx_left - vec4( 6.00000024E-01, 6.00000024E-01, -8.99999976E-01, -4.00000006E-01))/vec4( 7.99999952E-01, 7.99999952E-01, 7.99999952E-01, 8.00000012E-01);
    _TMP92 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0306);
    _TMP307 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP92);
    _fx30 = _TMP307*_TMP307*(3.00000000E+00 - 2.00000000E+00*_TMP307);
    _x0316 = (_fx_up - vec4( 1.60000002E+00, -4.00000006E-01, -1.39999998E+00, 9.99999940E-02))/vec4( 8.00000072E-01, 8.00000012E-01, 7.99999952E-01, 7.99999952E-01);
    _TMP92 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0316);
    _TMP317 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP92);
    _fx60 = _TMP317*_TMP317*(3.00000000E+00 - 2.00000000E+00*_TMP317);
    _a0328 = _e1 - _c3;
    _TMP325 = abs(_a0328);
    _a0332 = _e1 - _c3.zwxy;
    _TMP329 = abs(_a0332);
    _a0336 = _c3.wxyz - _h5;
    _TMP333 = abs(_a0336);
    _a0340 = _c3.wxyz - _h5.yzwx;
    _TMP337 = abs(_a0340);
    _a0344 = _b1.zwxy - _b1.wxyz;
    _TMP341 = abs(_a0344);
    _TMP41 = _TMP325 + _TMP329 + _TMP333 + _TMP337 + 4.00000000E+00*_TMP341;
    _a0350 = _b1.zwxy - _b1.yzwx;
    _TMP347 = abs(_a0350);
    _a0354 = _b1.zwxy - _i5;
    _TMP351 = abs(_a0354);
    _a0358 = _b1.wxyz - _i4;
    _TMP355 = abs(_a0358);
    _a0362 = _b1.wxyz - _b1;
    _TMP359 = abs(_a0362);
    _a0366 = _e1 - _c3.wxyz;
    _TMP363 = abs(_a0366);
    _TMP42 = _TMP347 + _TMP351 + _TMP355 + _TMP359 + 4.00000000E+00*_TMP363;
    _edr = bvec4((_TMP41 + 3.50000000E+00).x < _TMP42.x && _interp_restriction_lv1.x, (_TMP41 + 3.50000000E+00).y < _TMP42.y && _interp_restriction_lv1.y, (_TMP41 + 3.50000000E+00).z < _TMP42.z && _interp_restriction_lv1.z, (_TMP41 + 3.50000000E+00).w < _TMP42.w && _interp_restriction_lv1.w);
    _a0370 = _b1.wxyz - _c3.zwxy;
    _TMP367 = abs(_a0370);
    _a0374 = _b1.zwxy - _c3;
    _TMP371 = abs(_a0374);
    _edr_left = bvec4((2.00000000E+00*_TMP367).x <= _TMP371.x && _interp_restriction_lv2_left.x, (2.00000000E+00*_TMP367).y <= _TMP371.y && _interp_restriction_lv2_left.y, (2.00000000E+00*_TMP367).z <= _TMP371.z && _interp_restriction_lv2_left.z, (2.00000000E+00*_TMP367).w <= _TMP371.w && _interp_restriction_lv2_left.w);
    _a0378 = _b1.wxyz - _c3.zwxy;
    _TMP375 = abs(_a0378);
    _a0382 = _b1.zwxy - _c3;
    _TMP379 = abs(_a0382);
    _edr_up = bvec4(_TMP375.x >= (2.00000000E+00*_TMP379).x && _interp_restriction_lv2_up.x, _TMP375.y >= (2.00000000E+00*_TMP379).y && _interp_restriction_lv2_up.y, _TMP375.z >= (2.00000000E+00*_TMP379).z && _interp_restriction_lv2_up.z, _TMP375.w >= (2.00000000E+00*_TMP379).w && _interp_restriction_lv2_up.w);
    _nc45 = bvec4(_edr.x && bool(_fx45.x), _edr.y && bool(_fx45.y), _edr.z && bool(_fx45.z), _edr.w && bool(_fx45.w));
    _nc30 = bvec4(_edr.x && _edr_left.x && bool(_fx30.x), _edr.y && _edr_left.y && bool(_fx30.y), _edr.z && _edr_left.z && bool(_fx30.z), _edr.w && _edr_left.w && bool(_fx30.w));
    _nc60 = bvec4(_edr.x && _edr_up.x && bool(_fx60.x), _edr.y && _edr_up.y && bool(_fx60.y), _edr.z && _edr_up.z && bool(_fx60.z), _edr.w && _edr_up.w && bool(_fx60.w));
    _a0386 = _e1 - _b1.wxyz;
    _TMP383 = abs(_a0386);
    _a0390 = _e1 - _b1.zwxy;
    _TMP387 = abs(_a0390);
    _px = bvec4(_TMP383.x <= _TMP387.x, _TMP383.y <= _TMP387.y, _TMP383.z <= _TMP387.z, _TMP383.w <= _TMP387.w);
    _n1 = vec3(float(_B11.x), float(_B11.y), float(_B11.z));
    _n2 = vec3(float(_B3.x), float(_B3.y), float(_B3.z));
    _s = vec3(float(_E.x), float(_E.y), float(_E.z));
    _n3 = vec3(float(_H.x), float(_H.y), float(_H.z));
    _n4 = vec3(float(_H5.x), float(_H5.y), float(_H5.z));
    _aa = _n2 - _n1;
    _bb = _s - _n2;
    _cc = _n3 - _s;
    _dd = _n4 - _n3;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_s.x < 5.00000000E-01 ? (2.00000000E+00*_s).x : (2.00000000E+00*(1.00000000E+00 - _s)).x, _s.y < 5.00000000E-01 ? (2.00000000E+00*_s).y : (2.00000000E+00*(1.00000000E+00 - _s)).y, _s.z < 5.00000000E-01 ? (2.00000000E+00*_s).z : (2.00000000E+00*(1.00000000E+00 - _s)).z);
    _TMP49 = abs(_bb);
    _b0394 = 6.49999976E-01*_TMP49;
    _m = min(_m, _b0394);
    _TMP50 = abs(_cc);
    _b0398 = 6.49999976E-01*_TMP50;
    _m = min(_m, _b0398);
    _a0400 = -_m;
    _TMP81 = min(_m, _t);
    _TMP399 = max(_a0400, _TMP81);
    _s1 = (2.00000000E+00*_fp.y - 1.00000000E+00)*_TMP399 + _s;
    _n1 = vec3(float(_D0.x), float(_D0.y), float(_D0.z));
    _n2 = vec3(float(_D.x), float(_D.y), float(_D.z));
    _n3 = vec3(float(_F.x), float(_F.y), float(_F.z));
    _n4 = vec3(float(_F4.x), float(_F4.y), float(_F4.z));
    _aa = _n2 - _n1;
    _bb = _s1 - _n2;
    _cc = _n3 - _s1;
    _dd = _n4 - _n3;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_s1.x < 5.00000000E-01 ? (2.00000000E+00*_s1).x : (2.00000000E+00*(1.00000000E+00 - _s1)).x, _s1.y < 5.00000000E-01 ? (2.00000000E+00*_s1).y : (2.00000000E+00*(1.00000000E+00 - _s1)).y, _s1.z < 5.00000000E-01 ? (2.00000000E+00*_s1).z : (2.00000000E+00*(1.00000000E+00 - _s1)).z);
    _TMP51 = abs(_bb);
    _b0408 = 6.49999976E-01*_TMP51;
    _m = min(_m, _b0408);
    _TMP52 = abs(_cc);
    _b0412 = 6.49999976E-01*_TMP52;
    _m = min(_m, _b0412);
    _a0414 = -_m;
    _TMP81 = min(_m, _t);
    _TMP413 = max(_a0414, _TMP81);
    _s0 = (2.00000000E+00*_fp.x - 1.00000000E+00)*_TMP413 + _s1;
    _nc = bvec4(_nc30.x || _nc60.x || _nc45.x, _nc30.y || _nc60.y || _nc45.y, _nc30.z || _nc60.z || _nc45.z, _nc30.w || _nc60.w || _nc45.w);
    _blend2 = 0.00000000E+00;
    _blend1 = 0.00000000E+00;
    _a0420 = vec4(float(_nc45.x), float(_nc45.y), float(_nc45.z), float(_nc45.w));
    _TMP54 = dot(_a0420, _fx45);
    _a0422 = vec4(float(_nc30.x), float(_nc30.y), float(_nc30.z), float(_nc30.w));
    _TMP55 = dot(_a0422, _fx30);
    _a0424 = vec4(float(_nc60.x), float(_nc60.y), float(_nc60.z), float(_nc60.w));
    _TMP56 = dot(_a0424, _fx60);
    _TMP57 = max(vec4(_TMP55, _TMP55, _TMP55, _TMP55), vec4(_TMP56, _TMP56, _TMP56, _TMP56));
    _maximo = max(_TMP57, vec4(_TMP54, _TMP54, _TMP54, _TMP54));
    if (_nc.x) { 
        if (_px.x) { 
            _TMP58 = _F;
        } else {
            _TMP58 = _H;
        } 
        _pix1 = _TMP58;
        _blend1 = _maximo.x;
    } else {
        if (_nc.y) { 
            if (_px.y) { 
                _TMP59 = _B3;
            } else {
                _TMP59 = _F;
            } 
            _pix1 = _TMP59;
            _blend1 = _maximo.y;
        } else {
            if (_nc.z) { 
                if (_px.z) { 
                    _TMP60 = _D;
                } else {
                    _TMP60 = _B3;
                } 
                _pix1 = _TMP60;
                _blend1 = _maximo.z;
            } else {
                if (_nc.w) { 
                    if (_px.w) { 
                        _TMP61 = _H;
                    } else {
                        _TMP61 = _D;
                    } 
                    _pix1 = _TMP61;
                    _blend1 = _maximo.w;
                } 
            } 
        } 
    } 
    if (_nc.w) { 
        if (_px.w) { 
            _TMP62 = _H;
        } else {
            _TMP62 = _D;
        } 
        _pix2 = _TMP62;
        _blend2 = _maximo.w;
    } else {
        if (_nc.z) { 
            if (_px.z) { 
                _TMP63 = _D;
            } else {
                _TMP63 = _B3;
            } 
            _pix2 = _TMP63;
            _blend2 = _maximo.z;
        } else {
            if (_nc.y) { 
                if (_px.y) { 
                    _TMP64 = _B3;
                } else {
                    _TMP64 = _F;
                } 
                _pix2 = _TMP64;
                _blend2 = _maximo.y;
            } else {
                if (_nc.x) { 
                    if (_px.x) { 
                        _TMP65 = _F;
                    } else {
                        _TMP65 = _H;
                    } 
                    _pix2 = _TMP65;
                    _blend2 = _maximo.x;
                } 
            } 
        } 
    } 
    _b0430 = vec3(float(_pix1.x), float(_pix1.y), float(_pix1.z));
    _TMP66 = _s0 + _blend1*(_b0430 - _s0);
    _res1 = vec3(float(_TMP66.x), float(_TMP66.y), float(_TMP66.z));
    _b0432 = vec3(float(_pix2.x), float(_pix2.y), float(_pix2.z));
    _TMP67 = _s0 + _blend2*(_b0432 - _s0);
    _res2 = vec3(float(_TMP67.x), float(_TMP67.y), float(_TMP67.z));
    _a0436 = _E - _res1;
    _TMP90 = abs(vec3(float(_a0436.x), float(_a0436.y), float(_a0436.z)));
    _df0434 = vec3(float(_TMP90.x), float(_TMP90.y), float(_TMP90.z));
    _TMP68 = _df0434.x + _df0434.y + _df0434.z;
    _a0440 = _E - _res2;
    _TMP90 = abs(vec3(float(_a0440.x), float(_a0440.y), float(_a0440.z)));
    _df0438 = vec3(float(_TMP90.x), float(_TMP90.y), float(_TMP90.z));
    _TMP69 = _df0438.x + _df0438.y + _df0438.z;
    _TMP70 = float((_TMP69 >= _TMP68));
    _res = _res1 + _TMP70*(_res2 - _res1);
    _TMP91 = pow(float(_res.x), 2.40039062E+00);
    _TMP82 = float(_TMP91);
    _TMP91 = pow(float(_res.y), 2.40039062E+00);
    _TMP83 = float(_TMP91);
    _TMP91 = pow(float(_res.z), 2.40039062E+00);
    _TMP84 = float(_TMP91);
    _TMP71 = vec3(_TMP82, _TMP83, _TMP84);
    _color = vec3(float(_TMP71.x), float(_TMP71.y), float(_TMP71.z));
    _ddy = _fp.y - 5.00000000E-01;
    _v_weight_00 = _ddy/5.79999983E-01;
    if (_v_weight_00 > 1.00000000E+00) { 
        _v_weight_00 = 1.00000000E+00;
    } 
    _v_weight_00 = 1.00000000E+00 - _v_weight_00*_v_weight_00;
    _v_weight_00 = _v_weight_00*_v_weight_00;
    _color = _color*vec3(_v_weight_00, _v_weight_00, _v_weight_00);
    if (_ddy > 0.00000000E+00) { 
        _coords10 = vec3(float(_H.x), float(_H.y), float(_H.z));
        _ddy = 1.00000000E+00 - _ddy;
    } else {
        _coords10 = vec3(float(_B3.x), float(_B3.y), float(_B3.z));
        _ddy = 1.00000000E+00 + _ddy;
    } 
    _TMP85 = pow(_coords10.x, 2.40000010E+00);
    _TMP86 = pow(_coords10.y, 2.40000010E+00);
    _TMP87 = pow(_coords10.z, 2.40000010E+00);
    _colorNB = vec3(_TMP85, _TMP86, _TMP87);
    _v_weight_10 = _ddy/5.79999983E-01;
    if (_v_weight_10 > 1.00000000E+00) { 
        _v_weight_10 = 1.00000000E+00;
    } 
    _v_weight_10 = 1.00000000E+00 - _v_weight_10*_v_weight_10;
    _v_weight_10 = _v_weight_10*_v_weight_10;
    _color = _color + _colorNB*vec3(_v_weight_10, _v_weight_10, _v_weight_10);
    _color = _color*vec3( 1.45000005E+00, 1.45000005E+00, 1.45000005E+00);
    _TMP85 = pow(_color.x, 4.54545438E-01);
    _TMP86 = pow(_color.y, 4.54545438E-01);
    _TMP87 = pow(_color.z, 4.54545438E-01);
    _TMP72 = vec3(_TMP85, _TMP86, _TMP87);
    _TMP88 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _TMP72);
    _TMP469 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP88);
    _ret_0 = vec4(_TMP469.x, _TMP469.y, _TMP469.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
