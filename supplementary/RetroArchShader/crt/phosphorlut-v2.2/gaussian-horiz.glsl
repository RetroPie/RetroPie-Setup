// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _col;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _texCoord_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texCoord_size;
    vec2 _output_dummy_size;
    vec2 _texture_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
float _placeholder24;
};
struct output_dummy {
    vec4 _col;
};
vec4 _oPosition1;
vec4 _r0005;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _otexCoord;
    _r0005 = VertexCoord.x*MVPMatrix[0];
    _r0005 = _r0005 + VertexCoord.y*MVPMatrix[1];
    _r0005 = _r0005 + VertexCoord.z*MVPMatrix[2];
    _r0005 = _r0005 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0005;
    _otexCoord = TexCoord.xy;
    gl_Position = _r0005;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _col;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _texCoord_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texCoord_size;
    vec2 _output_dummy_size;
    vec2 _texture_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
float _placeholder30;
};
struct output_dummy {
    vec4 _col;
};
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
input_dummy _IN1;
vec2 _c0012;
vec2 _c0014;
vec2 _c0016;
vec2 _c0018;
vec2 _c0020;
vec2 _c0022;
vec2 _c0024;
vec2 _c0026;
vec2 _c0028;
COMPAT_VARYING vec4 TEX0;
 
uniform sampler2D Texture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _sum;
    float _SHARPNESS;
    if (InputSize.x > 8.00000000E+02) { 
        _SHARPNESS = TextureSize.x/9.60000000E+01;
    } else {
        _SHARPNESS = 2.00000000E+00*(TextureSize.x/2.56000000E+02);
    } 
    _c0012 = vec2(TEX0.x - 4.00000000E+00/(_SHARPNESS*1.28000000E+02), TEX0.y);
    _TMP0 = COMPAT_TEXTURE(Texture, _c0012);
    _sum = _TMP0*5.00000007E-02;
    _c0014 = vec2(TEX0.x - 3.00000000E+00/(_SHARPNESS*1.28000000E+02), TEX0.y);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0014);
    _sum = _sum + _TMP1*9.00000036E-02;
    _c0016 = vec2(TEX0.x - 2.00000000E+00/(_SHARPNESS*1.28000000E+02), TEX0.y);
    _TMP2 = COMPAT_TEXTURE(Texture, _c0016);
    _sum = _sum + _TMP2*1.19999997E-01;
    _c0018 = vec2(TEX0.x - 1.00000000E+00/(_SHARPNESS*1.28000000E+02), TEX0.y);
    _TMP3 = COMPAT_TEXTURE(Texture, _c0018);
    _sum = _sum + _TMP3*1.50000006E-01;
    _c0020 = vec2(TEX0.x, TEX0.y);
    _TMP4 = COMPAT_TEXTURE(Texture, _c0020);
    _sum = _sum + _TMP4*1.59999996E-01;
    _c0022 = vec2(TEX0.x + 1.00000000E+00/(_SHARPNESS*1.28000000E+02), TEX0.y);
    _TMP5 = COMPAT_TEXTURE(Texture, _c0022);
    _sum = _sum + _TMP5*1.50000006E-01;
    _c0024 = vec2(TEX0.x + 2.00000000E+00/(_SHARPNESS*1.28000000E+02), TEX0.y);
    _TMP6 = COMPAT_TEXTURE(Texture, _c0024);
    _sum = _sum + _TMP6*1.19999997E-01;
    _c0026 = vec2(TEX0.x + 3.00000000E+00/(_SHARPNESS*1.28000000E+02), TEX0.y);
    _TMP7 = COMPAT_TEXTURE(Texture, _c0026);
    _sum = _sum + _TMP7*9.00000036E-02;
    _c0028 = vec2(TEX0.x + 4.00000000E+00/(_SHARPNESS*1.28000000E+02), TEX0.y);
    _TMP8 = COMPAT_TEXTURE(Texture, _c0028);
    _sum = _sum + _TMP8*5.00000007E-02;
    FragColor = _sum;
    return;
} 
#endif
