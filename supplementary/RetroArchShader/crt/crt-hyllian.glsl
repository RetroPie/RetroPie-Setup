// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _texCoord1;
};
vec4 _oPosition1;
out_vertex _ret_0;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0008;
    _ret_0._texCoord1 = TexCoord.xy;
    gl_Position = _r0008;
    TEX0.xy = TexCoord.xy;
    return;
    TEX0.xy = _ret_0._texCoord1;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _texCoord;
};
vec4 _ret_0;
float _TMP11;
float _TMP10;
float _TMP9;
float _TMP7;
float _TMP16;
float _TMP15;
float _TMP14;
float _TMP13;
vec3 _TMP12;
vec3 _TMP8;
vec3 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec2 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _c0031;
vec2 _c0035;
vec2 _c0037;
vec4 _r0043;
vec4 _v0043;
vec3 _r0053;
vec4 _r0055;
vec4 _v0055;
vec3 _r0065;
vec4 _r0067;
vec4 _v0067;
vec3 _r0077;
vec3 _TMP82;
float _a0089;
vec3 _TMP92;
vec3 _TMP94;
vec3 _TMP102;
vec3 _x0103;
vec3 _x0109;
vec3 _TMP112;
vec3 _TMP118;
vec3 _x0119;
float _c0133;
float _a0135;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _dx;
    vec2 _pix_coord;
    vec2 _tc;
    vec2 _fp;
    vec3 _min_sample;
    vec3 _max_sample;
    vec3 _color;
    float _dz;
    vec2 _fpf;
    vec2 _fpd;
    float _pos;
    vec3 _lum;
    vec3 _d;
    float _mod_factor;
    vec3 _dotMaskWeights;
    _dx = vec2(1.00000000E+00/TextureSize.x, 0.00000000E+00);
    _pix_coord = TEX0.xy*TextureSize - vec2( 5.00000000E-01, 0.00000000E+00);
    _TMP0 = floor(_pix_coord);
    _tc = (_TMP0 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize;
    _fp = fract(_pix_coord);
    _c0031 = _tc - _dx;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0031);
    _TMP2 = COMPAT_TEXTURE(Texture, _tc);
    _c0035 = _tc + _dx;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0035);
    _c0037 = _tc + 2.00000000E+00*_dx;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0037);
    _min_sample = min(_TMP2.xyz, _TMP3.xyz);
    _max_sample = max(_TMP2.xyz, _TMP3.xyz);
    _v0043 = vec4(_fp.x*_fp.x*_fp.x, _fp.x*_fp.x, _fp.x, 1.00000000E+00);
    _r0043.x = dot(vec4( -5.00000000E-01, 1.00000000E+00, -5.00000000E-01, 0.00000000E+00), _v0043);
    _r0043.y = dot(vec4( 1.50000000E+00, -2.50000000E+00, 0.00000000E+00, 1.00000000E+00), _v0043);
    _r0043.z = dot(vec4( -1.50000000E+00, 2.00000000E+00, 5.00000000E-01, 0.00000000E+00), _v0043);
    _r0043.w = dot(vec4( 5.00000000E-01, -5.00000000E-01, 0.00000000E+00, 0.00000000E+00), _v0043);
    _r0053 = _r0043.x*_TMP1.xyz;
    _r0053 = _r0053 + _r0043.y*_TMP2.xyz;
    _r0053 = _r0053 + _r0043.z*_TMP3.xyz;
    _r0053 = _r0053 + _r0043.w*_TMP4.xyz;
    _dz = (8.99999976E-01*InputSize.x)/OutputSize.x;
    _fpf = vec2(_fp.x + _dz, _fp.y);
    _fpd = vec2(_fp.x - _dz, _fp.y);
    _v0055 = vec4(_fpf.x*_fpf.x*_fpf.x, _fpf.x*_fpf.x, _fpf.x, 1.00000000E+00);
    _r0055.x = dot(vec4( -5.00000000E-01, 1.00000000E+00, -5.00000000E-01, 0.00000000E+00), _v0055);
    _r0055.y = dot(vec4( 1.50000000E+00, -2.50000000E+00, 0.00000000E+00, 1.00000000E+00), _v0055);
    _r0055.z = dot(vec4( -1.50000000E+00, 2.00000000E+00, 5.00000000E-01, 0.00000000E+00), _v0055);
    _r0055.w = dot(vec4( 5.00000000E-01, -5.00000000E-01, 0.00000000E+00, 0.00000000E+00), _v0055);
    _r0065 = _r0055.x*_TMP1.xyz;
    _r0065 = _r0065 + _r0055.y*_TMP2.xyz;
    _r0065 = _r0065 + _r0055.z*_TMP3.xyz;
    _r0065 = _r0065 + _r0055.w*_TMP4.xyz;
    _v0067 = vec4(_fpd.x*_fpd.x*_fpd.x, _fpd.x*_fpd.x, _fpd.x, 1.00000000E+00);
    _r0067.x = dot(vec4( -5.00000000E-01, 1.00000000E+00, -5.00000000E-01, 0.00000000E+00), _v0067);
    _r0067.y = dot(vec4( 1.50000000E+00, -2.50000000E+00, 0.00000000E+00, 1.00000000E+00), _v0067);
    _r0067.z = dot(vec4( -1.50000000E+00, 2.00000000E+00, 5.00000000E-01, 0.00000000E+00), _v0067);
    _r0067.w = dot(vec4( 5.00000000E-01, -5.00000000E-01, 0.00000000E+00, 0.00000000E+00), _v0067);
    _r0077 = _r0067.x*_TMP1.xyz;
    _r0077 = _r0077 + _r0067.y*_TMP2.xyz;
    _r0077 = _r0077 + _r0067.z*_TMP3.xyz;
    _r0077 = _r0077 + _r0067.w*_TMP4.xyz;
    _TMP5 = max(_r0065, _r0077);
    _color = max(_r0053, _TMP5);
    _TMP8 = min(_max_sample, _color);
    _TMP82 = max(_min_sample, _TMP8);
    _color = _TMP82;
    _a0089 = _fp.y - 5.00000000E-01;
    _pos = abs(_a0089);
    _lum = vec3( 1.00000001E-01, 1.00000001E-01, 1.00000001E-01) + _TMP82*vec3( 5.99999964E-01, 5.99999964E-01, 5.99999964E-01);
    _TMP94 = vec3(inversesqrt(_lum.x), inversesqrt(_lum.y), inversesqrt(_lum.z));
    _TMP92 = 1.00000000E+00/_TMP94;
    _x0103 = _pos/_TMP92;
    _TMP12 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0103);
    _TMP102 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP12);
    _x0109 = 1.00000000E+00 - _TMP102;
    _TMP8 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0109);
    _TMP112 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP8);
    _d = _TMP112*_TMP112*(vec3( 3.00000000E+00, 3.00000000E+00, 3.00000000E+00) - 2.00000000E+00*_TMP112);
    _d = 6.99999988E-01*(_d - 1.00000000E+00) + 1.00000000E+00;
    _color.z = _TMP82.z*1.04999995E+00;
    _x0119 = _color*_d;
    _TMP12 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0119);
    _TMP118 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP12);
    _TMP9 = pow(_TMP118.x, 2.40000010E+00);
    _TMP10 = pow(_TMP118.y, 2.40000010E+00);
    _TMP11 = pow(_TMP118.z, 2.40000010E+00);
    _color = vec3(_TMP9, _TMP10, _TMP11);
    _mod_factor = (TEX0.x*OutputSize.x*TextureSize.x)/InputSize.x;
    _a0135 = _mod_factor/2.00000000E+00;
    _TMP13 = abs(_a0135);
    _TMP14 = fract(_TMP13);
    _TMP15 = abs(2.00000000E+00);
    _c0133 = _TMP14*_TMP15;
    if (_mod_factor < 0.00000000E+00) { 
        _TMP16 = -_c0133;
    } else {
        _TMP16 = _c0133;
    } 
    _TMP7 = floor(_TMP16);
    _dotMaskWeights = vec3( 1.00000000E+00, 6.99999988E-01, 1.00000000E+00) + _TMP7*vec3( -3.00000012E-01, 3.00000012E-01, -3.00000012E-01);
    _color.xyz = _color.xyz*_dotMaskWeights;
    _color = _color*1.20000005E+00;
    _TMP9 = pow(_color.x, 4.54545438E-01);
    _TMP10 = pow(_color.y, 4.54545438E-01);
    _TMP11 = pow(_color.z, 4.54545438E-01);
    _color = vec3(_TMP9, _TMP10, _TMP11);
    _ret_0 = vec4(_color.x, _color.y, _color.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
