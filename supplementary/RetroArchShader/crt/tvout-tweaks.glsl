// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
vec4 _outPosition1;
vec4 _r0010;
vec4 _v0010;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _outTexCoord;
    _v0010 = vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w));
    _r0010 = _v0010.x*MVPMatrix[0];
    _r0010 = _r0010 + _v0010.y*MVPMatrix[1];
    _r0010 = _r0010 + _v0010.z*MVPMatrix[2];
    _r0010 = _r0010 + _v0010.w*MVPMatrix[3];
    _outPosition1 = vec4(float(_r0010.x), float(_r0010.y), float(_r0010.z), float(_r0010.w));
    _outTexCoord = TexCoord.xy;
    gl_Position = _outPosition1;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
vec4 _ret_0;
float _TMP51;
float _TMP47;
float _TMP44;
float _TMP41;
float _TMP50;
float _TMP49;
float _TMP48;
float _TMP46;
float _TMP45;
float _TMP43;
float _TMP42;
float _TMP40;
vec4 _TMP39;
float _TMP38;
float _TMP34;
float _TMP31;
float _TMP28;
float _TMP37;
float _TMP36;
float _TMP35;
float _TMP33;
float _TMP32;
float _TMP30;
float _TMP29;
float _TMP27;
vec4 _TMP26;
float _TMP25;
float _TMP21;
float _TMP18;
float _TMP15;
float _TMP24;
float _TMP23;
float _TMP22;
float _TMP20;
float _TMP19;
float _TMP17;
float _TMP16;
float _TMP14;
vec4 _TMP13;
float _TMP12;
float _TMP8;
float _TMP5;
float _TMP2;
float _TMP11;
float _TMP10;
float _TMP9;
float _TMP7;
float _TMP6;
float _TMP4;
float _TMP3;
float _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
float _TMP57;
float _x0058;
vec2 _c0062;
float _a0068;
float _b0068;
float _a0072;
float _b0072;
float _a0074;
float _a0078;
float _b0078;
float _b0080;
float _a0084;
float _b0084;
float _b0086;
float _a0088;
vec2 _c0090;
float _a0096;
float _b0096;
float _a0100;
float _b0100;
float _a0102;
float _a0106;
float _b0106;
float _b0108;
float _a0112;
float _b0112;
float _b0114;
float _a0116;
vec2 _c0118;
float _a0124;
float _b0124;
float _a0128;
float _b0128;
float _a0130;
float _a0134;
float _b0134;
float _b0136;
float _a0140;
float _b0140;
float _b0142;
float _a0144;
vec2 _c0146;
float _a0152;
float _b0152;
float _a0156;
float _b0156;
float _a0158;
float _a0162;
float _b0162;
float _b0164;
float _a0168;
float _b0168;
float _b0170;
float _a0172;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec3 _tempColor;
    float _oneT;
    float _oneI;
    float _X;
    _x0058 = TEX0.x*TextureSize.x - 5.00000000E-01;
    _TMP57 = fract(_x0058);
    _oneT = 1.00000000E+00/TextureSize.x;
    _oneI = float((1.00000000E+00/InputSize.x));
    _X = _TMP57 - -1.00000000E+00;
    _c0062 = vec2(TEX0.x - _X*_oneT, TEX0.y);
    _TMP0 = COMPAT_TEXTURE(Texture, _c0062);
    _TMP1 = abs(_X);
    _a0068 = _TMP1 + 5.00000000E-01;
    _b0068 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP2 = min(_a0068, _b0068);
    _TMP3 = abs(_X);
    _a0072 = _TMP3 + 5.00000000E-01;
    _b0072 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP4 = min(_a0072, _b0072);
    _a0074 = 3.14159274E+00*2.56000000E+02*_oneI*_TMP4;
    _TMP5 = sin(_a0074);
    _TMP6 = abs(_X);
    _a0078 = _TMP6 - 5.00000000E-01;
    _b0078 = -1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP7 = max(_a0078, _b0078);
    _b0080 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP8 = min(_TMP7, _b0080);
    _TMP9 = abs(_X);
    _a0084 = _TMP9 - 5.00000000E-01;
    _b0084 = -1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP10 = max(_a0084, _b0084);
    _b0086 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP11 = min(_TMP10, _b0086);
    _a0088 = 3.14159274E+00*2.56000000E+02*_oneI*_TMP11;
    _TMP12 = sin(_a0088);
    _tempColor = _TMP0.xyz*((((3.14159274E+00*2.56000000E+02*_oneI*_TMP2 + _TMP5) - 3.14159274E+00*2.56000000E+02*_oneI*_TMP8) - _TMP12)/6.28318548E+00);
    _c0090 = vec2(TEX0.x - _TMP57*_oneT, TEX0.y);
    _TMP13 = COMPAT_TEXTURE(Texture, _c0090);
    _TMP14 = abs(_TMP57);
    _a0096 = _TMP14 + 5.00000000E-01;
    _b0096 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP15 = min(_a0096, _b0096);
    _TMP16 = abs(_TMP57);
    _a0100 = _TMP16 + 5.00000000E-01;
    _b0100 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP17 = min(_a0100, _b0100);
    _a0102 = 3.14159274E+00*2.56000000E+02*_oneI*_TMP17;
    _TMP18 = sin(_a0102);
    _TMP19 = abs(_TMP57);
    _a0106 = _TMP19 - 5.00000000E-01;
    _b0106 = -1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP20 = max(_a0106, _b0106);
    _b0108 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP21 = min(_TMP20, _b0108);
    _TMP22 = abs(_TMP57);
    _a0112 = _TMP22 - 5.00000000E-01;
    _b0112 = -1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP23 = max(_a0112, _b0112);
    _b0114 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP24 = min(_TMP23, _b0114);
    _a0116 = 3.14159274E+00*2.56000000E+02*_oneI*_TMP24;
    _TMP25 = sin(_a0116);
    _tempColor = _tempColor + _TMP13.xyz*((((3.14159274E+00*2.56000000E+02*_oneI*_TMP15 + _TMP18) - 3.14159274E+00*2.56000000E+02*_oneI*_TMP21) - _TMP25)/6.28318548E+00);
    _X = _TMP57 - 1.00000000E+00;
    _c0118 = vec2(TEX0.x - _X*_oneT, TEX0.y);
    _TMP26 = COMPAT_TEXTURE(Texture, _c0118);
    _TMP27 = abs(_X);
    _a0124 = _TMP27 + 5.00000000E-01;
    _b0124 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP28 = min(_a0124, _b0124);
    _TMP29 = abs(_X);
    _a0128 = _TMP29 + 5.00000000E-01;
    _b0128 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP30 = min(_a0128, _b0128);
    _a0130 = 3.14159274E+00*2.56000000E+02*_oneI*_TMP30;
    _TMP31 = sin(_a0130);
    _TMP32 = abs(_X);
    _a0134 = _TMP32 - 5.00000000E-01;
    _b0134 = -1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP33 = max(_a0134, _b0134);
    _b0136 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP34 = min(_TMP33, _b0136);
    _TMP35 = abs(_X);
    _a0140 = _TMP35 - 5.00000000E-01;
    _b0140 = -1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP36 = max(_a0140, _b0140);
    _b0142 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP37 = min(_TMP36, _b0142);
    _a0144 = 3.14159274E+00*2.56000000E+02*_oneI*_TMP37;
    _TMP38 = sin(_a0144);
    _tempColor = _tempColor + _TMP26.xyz*((((3.14159274E+00*2.56000000E+02*_oneI*_TMP28 + _TMP31) - 3.14159274E+00*2.56000000E+02*_oneI*_TMP34) - _TMP38)/6.28318548E+00);
    _X = _TMP57 - 2.00000000E+00;
    _c0146 = vec2(TEX0.x - _X*_oneT, TEX0.y);
    _TMP39 = COMPAT_TEXTURE(Texture, _c0146);
    _TMP40 = abs(_X);
    _a0152 = _TMP40 + 5.00000000E-01;
    _b0152 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP41 = min(_a0152, _b0152);
    _TMP42 = abs(_X);
    _a0156 = _TMP42 + 5.00000000E-01;
    _b0156 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP43 = min(_a0156, _b0156);
    _a0158 = 3.14159274E+00*2.56000000E+02*_oneI*_TMP43;
    _TMP44 = sin(_a0158);
    _TMP45 = abs(_X);
    _a0162 = _TMP45 - 5.00000000E-01;
    _b0162 = -1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP46 = max(_a0162, _b0162);
    _b0164 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP47 = min(_TMP46, _b0164);
    _TMP48 = abs(_X);
    _a0168 = _TMP48 - 5.00000000E-01;
    _b0168 = -1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP49 = max(_a0168, _b0168);
    _b0170 = 1.00000000E+00/(2.56000000E+02*_oneI);
    _TMP50 = min(_TMP49, _b0170);
    _a0172 = 3.14159274E+00*2.56000000E+02*_oneI*_TMP50;
    _TMP51 = sin(_a0172);
    _tempColor = _tempColor + _TMP39.xyz*((((3.14159274E+00*2.56000000E+02*_oneI*_TMP41 + _TMP44) - 3.14159274E+00*2.56000000E+02*_oneI*_TMP47) - _TMP51)/6.28318548E+00);
    _ret_0 = vec4(_tempColor.x, _tempColor.y, _tempColor.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
